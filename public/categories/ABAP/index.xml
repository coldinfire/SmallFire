<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ABAP on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/categories/ABAP/</link>
    <description>Recent content in ABAP on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 28 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://coldinfire.github.io/categories/ABAP/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SAP RFC Function 日志工具</title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_RFC_Log/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_RFC_Log/</guid>
      <description>SAP 与外部系统接口日志记录 工具结构设计 表设计 程序结构设计 程序使用</description>
    </item>
    
    <item>
      <title> SAP全局宏设置和使用 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_GlobalMacro/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_GlobalMacro/</guid>
      <description>宏定义和使用 在 ABAP 代码的开发中通过使用DEFINE ... END-OF-DEFINITION. 来创建局部的宏变量，通过局部宏变量的设定可以让代码变得更加简单，同时也避免了代码冗余。 最</description>
    </item>
    
    <item>
      <title> BAPI和Tcode执行之间的差异 </title>
      <link>https://coldinfire.github.io/2021/SAP_BAPI_TCODE/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/SAP_BAPI_TCODE/</guid>
      <description>BAPI 和前台 Tcode 操作大部分是相同的，但是仍然会有一些差异。当使用 BAPI 进行操作时，如果遇到问题，可能需要查找一些资料信息或者 Debug 进行参数排查。 Subsequent Debit/Credit 无法使</description>
    </item>
    
    <item>
      <title> DBCO 执行结果查询 </title>
      <link>https://coldinfire.github.io/2021/ABAP_SQL_DBCO_Result/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_SQL_DBCO_Result/</guid>
      <description>查询 DBCO 执行结果 Step1：执行程序 ADBC_QUERY DB Connection Name：DBCO 中配置的数据库连接名称 Table Name：DBCO 配置连接的数据库对应数据表的表名称 Ste</description>
    </item>
    
    <item>
      <title>选择屏幕添加Layout选择</title>
      <link>https://coldinfire.github.io/2021/ABAP_ALV_Screen_Layout/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_ALV_Screen_Layout/</guid>
      <description>屏幕选择 Layout &amp;#34; 选择屏幕参数 &amp;#34; PARAMETERS: p_disva TYPE slis_vari MEMORY ID zvari. &amp;#34; 屏幕事件定义 &amp;#34; AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_disva. PERFORM variant_search CHANGING p_disva. &amp;#34; Search Help &amp;#34; Function 方法 FORM variant_search CHANGING cv_variant. DATA: zlv_f4_exit TYPE c, zls_variant TYPE disvariant. CLEAR:zls_variant. zls_variant-report = syst-repid. CALL FUNCTION &amp;#39;REUSE_ALV_VARIANT_F4&amp;#39; EXPORTING is_variant = zls_variant i_save = &amp;#39;A&amp;#39;</description>
    </item>
    
    <item>
      <title> BABI-BADI-RFC-BDC 区别 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_FunctionDiff/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_FunctionDiff/</guid>
      <description>BAPI 介绍 BAPI (Business Application Programming Interface) 代表业务应用程序编程接口。 BAPI 是存储在 SAP 系统的 BOR（业务对象库）中以执行特定业务任务的特定方法。 它支持 SAP 组件之间以及 SAP 和非 SAP</description>
    </item>
    
    <item>
      <title> ABAP 数值四舍五入函数 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_RoundDecimals/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_RoundDecimals/</guid>
      <description>ABAP 保留指定小数位 ROUND函数 INT_SORT-MENGE = ROUND( VAL = LTB-EMENG * P_QPA DEC = 3 MODE = 1 ). mode代表着小数省略的规则， 1： 默认值，这个值总是从 0 四舍五入到更大的绝对值 5</description>
    </item>
    
    <item>
      <title>ABAP 将数字金额转为大写</title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_AmountToUpcase/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_AmountToUpcase/</guid>
      <description>SAP 实际业务中可能会有将金额、重量等数字格式转换为中文大写或则英文大写的银行金额内容。可以使用标准的函数 SPELL_AMOUNT 来进行处理，但是要注意该函数可能出现</description>
    </item>
    
    <item>
      <title> ABAP 获取CLASS参数结果 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionClass/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionClass/</guid>
      <description>Read Class Data data: i_class type klah-class. data: i_classtype type klah-klart. data: i_key_date type sy-datum default sy-datum. data: e_structure type ref to cl_abap_structdescr, et_data type ref to data, e_table type ref to cl_abap_tabledescr. field-symbols: &amp;lt;char&amp;gt; type bapi1003_charact_r. data: mt_classdescriptions type standard table of bapi1003_catch_r. data: mt_classlongtexts type standard table of bapi1003_longtext_r. data: mt_classcharacteristics type standard table of bapi1003_charact_r. data: mt_classcharactvalues type standard table of bapi1003_char_val_r. data: mt_return type standard table</description>
    </item>
    
    <item>
      <title> ABAP 获取FM参数结果 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionFM/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_ReflectionFM/</guid>
      <description>获取FM的参数 REPORT zz_get_fm_detail. DATA: ls_trans_callstack TYPE sys_calls, lt_trans_callstack TYPE sys_callst. DATA: lv_trans_funtion_name TYPE string. DATA: ls_trans_fupararef TYPE fupararef, lt_trans_fupararef TYPE TABLE OF fupararef. CLEAR lt_trans_callstack[]. CALL FUNCTION &amp;#39;SYSTEM_CALLSTACK&amp;#39; IMPORTING * callstack = callstack et_callstack = lt_trans_callstack. CLEAR: ls_trans_callstack. READ TABLE lt_trans_callstack INTO ls_trans_callstack WITH KEY eventtype = &amp;#39;FUNC&amp;#39;. IF ls_trans_callstack IS INITIAL. EXIT. ENDIF. &amp;#34;获取FM的</description>
    </item>
    
    <item>
      <title> BAPI:VIEW_MAINTENANCE_CALL 使用 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Table_BAPI_Maintenance/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Table_BAPI_Maintenance/</guid>
      <description>BAPI: VIEW_MAINTENANCE_CALL DATA:LT_SELLIST LIKE TABLE OF VIMSELLIST WITH HEADER LINE. CLEAR:LT_SELLIST. REFRESH: LT_SELLIST. LT_SELLIST-VIEWFIELD = &amp;#39;BUKRS&amp;#39;. LT_SELLIST-OPERATOR = &amp;#39;EQ&amp;#39;. LT_SELLIST-VALUE = P_BUKRS. LT_SELLIST-AND_OR = &amp;#39;AND&amp;#39;. APPEND LT_SELLIST. CALL FUNCTION &amp;#39;VIEW_MAINTENANCE_CALL&amp;#39; EXPORTING ACTION = &amp;#39;U&amp;#39;&amp;#34;S = Display U = Change T = Transport VIEW_NAME = &amp;#39;ZCO002&amp;#39; TABLES DBA_SELLIST = LT_SELLIST EXCEPTIONS CLIENT_REFERENCE = 1 FOREIGN_LOCK = 2 INVALID_ACTION = 3 NO_CLIENTINDEPENDENT_AUTH = 4 NO_DATABASE_FUNCTION = 5 NO_EDITOR_FUNCTION = 6 NO_SHOW_AUTH =</description>
    </item>
    
    <item>
      <title> ABAP 调用HTTP请求 </title>
      <link>https://coldinfire.github.io/2021/ABAP_Utils_HttpFunction/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_Utils_HttpFunction/</guid>
      <description>SAP 使用HTTP 示例程序 REPORT ZZ_SEND_HTTP. * Selection Screen SELECTION-SCREEN BEGIN OF BLOCK bk01 WITH FRAME TITLE text-001. PARAMETER p_fname TYPE RS38L_FNAM. PARAMETER p_json TYPE string. SELECTION-SCREEN END OF BLOCK bk01. * Message TYPE: BEGIN OF str_message, type TYPE bapi_mtype, message TYPE bapi_msg, END OF str_message. DATA: e_data TYPE str_message. * Connection Parameter DATA:lt_setting TYPE TABLE OF zws_http_url WITH HEADER LINE. DATA:lv_url TYPE</description>
    </item>
    
    <item>
      <title>ABAP Json 转换</title>
      <link>https://coldinfire.github.io/2021/ABAP_JSON/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_JSON/</guid>
      <description>ABAP 对象和 JSON 格式的转换工具 创建工具类 SE24：创建类,输入描述并选择类型 点击保存 定义属性值 需要创建的方法 方法详细代码列表 定义Types Section 定义 Public</description>
    </item>
    
    <item>
      <title>ABAP&amp;Json转换Methods</title>
      <link>https://coldinfire.github.io/2021/ABAP_JSON_Methods/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_JSON_Methods/</guid>
      <description>方法列表 DATA_TO_JSON METHOD DATA_TO_JSON. DATA:LO_DESCR TYPE REF TO CL_ABAP_TYPEDESCR. LO_DESCR = CL_ABAP_TYPEDESCR=&amp;gt;DESCRIBE_BY_DATA( IA_DATA ). RV_JSON = DATA_TO_JSON_INTERNAL( IA_DATA = IA_DATA IO_DESCR = LO_DESCR ). &amp;#34;Test if root is an single element, if yes root object { ... } needed&amp;#34; IF LO_DESCR-&amp;gt;KIND EQ CL_ABAP_TYPEDESCR=&amp;gt;KIND_ELEM. CONCATENATE &amp;#39;{&amp;#34;$ROOT&amp;#34;:&amp;#39; RV_JSON &amp;#39;}&amp;#39; INTO RV_JSON. ENDIF. ENDMETHOD. JSON_TO_DATA METHOD JSON_TO_DATA. DATA:LV_JSON TYPE STRING. LV_JSON = IV_JSON. JSON_TO_DATA_INTERNAL( CHANGING CV_JSON = LV_JSON CA_DATA =</description>
    </item>
    
    <item>
      <title>Text Enhancements</title>
      <link>https://coldinfire.github.io/2020/ABAP_Enhance_Text/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Enhance_Text/</guid>
      <description>文本增强 用文本增强修改SAP标准屏幕中的字段名称，如修改Internal Order 的 End of Work。 Step 1 : 找到对应的Data Element 事务 KO03 进入 Internal Order 主数据显示</description>
    </item>
    
    <item>
      <title> SAP系统间数据表的Copy </title>
      <link>https://coldinfire.github.io/2020/ABAP_Utils_ClientTableCopy/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Utils_ClientTableCopy/</guid>
      <description>需求场景 在功能开发完成后，需要使用一些测试数据来进行测试，有时可能需要将一些比较新的生产数据复制到测试系统，为了完成数据表的复制，需要使用一</description>
    </item>
    
    <item>
      <title> SAP Report 选择和显示栏位配置 </title>
      <link>https://coldinfire.github.io/2020/SAP_Report_config/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_Report_config/</guid>
      <description>SAP 的一些 Report 的选择和显示栏位是可配置的。 MB51 是比较常见的查询物料凭证的报表，在该报表中，如下图所示，默认可以根据物料号码、工厂、移动类型等信息进</description>
    </item>
    
    <item>
      <title>函数创建用户并分配权限</title>
      <link>https://coldinfire.github.io/2020/ABAP_CreateUser/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_CreateUser/</guid>
      <description>函数创建用户并分配权限 REPORT ZCREATE_USER. DATA:LS_DATA TYPE BAPILOGOND, LS_ADDR TYPE BAPIADDR3, LS_DEFU TYPE BAPIDEFAUL, LS_PWD TYPE BAPIPWD, GT_RETURN TYPE TABLE OF BAPIRET2, GW_RETURN LIKE LINE OF GT_RETURN, GV_DEST TYPE RFCDEST, GT_FILE TYPE TABLE OF BAPIPROF, GW_FILE LIKE LINE OF GT_FILE. CALL FUNCTION &amp;#39;CRM_OFI_GET_RFCDEST&amp;#39; IMPORTING EV_RFCDEST = GV_DEST EXCEPTIONS NO_RFCDEST = 1 MULTIPLE_RFCDEST = 2 OTHERS = 3. IF SY-SUBRC &amp;lt;&amp;gt; 0. ENDIF.</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - ALV Image Light </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproABAP_Light/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproABAP_Light/</guid>
      <description>Context Component Controller WDDOINIT METHOD INIT_DATA_NODE . *... Create an instance of ALV component data: l_ref_cmp_usage type ref to if_wd_component_usage. l_ref_cmp_usage = wd_this-&amp;gt;wd_cpuse_my_alv( ). if l_ref_cmp_usage-&amp;gt;has_active_component( ) is initial. l_ref_cmp_usage-&amp;gt;create_component( ). endif. *... Get data node data: lr_node type ref to if_wd_context_node. lr_node = wd_context-&amp;gt;get_child_node( &amp;#39;TEST_DATA&amp;#39; ). *... Invoke a method of the ALV Interfacecontroller data: l_ref_interfacecontroller type ref to iwci_salv_wd_table. l_ref_interfacecontroller = wd_this-&amp;gt;wd_cpifc_my_alv( ). *... Set the data l_ref_interfacecontroller-&amp;gt;set_data(</description>
    </item>
    
    <item>
      <title>LSMW 操作步骤详解</title>
      <link>https://coldinfire.github.io/2020/SAP_LSMW_Details/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_LSMW_Details/</guid>
      <description>Step1:数据准备 数据准备一般使用 Excel 整理数据，并转换成标准文本。我们以创建物料主数据（事物代码 MM01）的基本视图为例。 物料主数据的基本视</description>
    </item>
    
    <item>
      <title>LSMW 批处理使用方法</title>
      <link>https://coldinfire.github.io/2020/SAP_LSMW/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_LSMW/</guid>
      <description>参考链接：https://fenginfo.com/1821.html 总述 在 SAP 系统中，批处理操作有多种方法。如果是对一个事物码（TCODE）</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - ALV dropdown </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproABAP_DropList/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproABAP_DropList/</guid>
      <description>ALV Dropdown Step1:给ALV结构添加VALUE SET字段。 Attribute Name : TYPE_SET Type : WDR_CONTEXT_ATTR_VALUE_LIST Step2:将TYPE_SET字段设置为值范围 METHOD wddoinit . DATA: lo_node TYPE REF TO if_wd_context_node, lo_elem TYPE REF TO</description>
    </item>
    
    <item>
      <title> WebDynpro configuring Runtime Enviroment </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproRuntimeEnv/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproRuntimeEnv/</guid>
      <description>Remove User settings option ABAP Enviroment Method 1 Modify the WebDynpro Application and add the Parameter: ​ WDDISABLEUSERPERSONALIZATION = X. Method 2 Alternatively you can call the webdynpro application WD_GLOBAL_SETTING in SE80 and globally disable all user personalization for all applications. This avoids endusers from calling helpdesk because &amp;ldquo;fields are gone&amp;rdquo; etc. pretty well. JAVA Enviroment Procedure A number of settings allow you to influence the behavior of the Web</description>
    </item>
    
    <item>
      <title> SAP配置RFC连接-SM59 </title>
      <link>https://coldinfire.github.io/2020/SAP_RFC_Connect/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_RFC_Connect/</guid>
      <description>原文链接 SAP配置RFC连接-SM59 SAP配置的RFC Connection都保存在表RFCDES中 Step1：Procedure to steup an RFC connection</description>
    </item>
    
    <item>
      <title>ABAP 7.40 Quick Reference</title>
      <link>https://coldinfire.github.io/2020/ABAP_7.40_QuickReference/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_7.40_QuickReference/</guid>
      <description>Inline Declarations 注意@DATA(ITAB)语句的强大，有了它，我们在访问数据库的时候，直接写SELECT就好了，不需要构建各式各样的內表和表类型了。注意</description>
    </item>
    
    <item>
      <title>SAP 数据库连接配置</title>
      <link>https://coldinfire.github.io/2020/ABAP_SQL_DBConnect/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SQL_DBConnect/</guid>
      <description>配置连接方式 DBCO：查看数据库连接信息 DB02：DBA Cockpit 系统配置维护 两种方式都是维护同一个配置表：DBCON 。 测试连通性 使用程序：ADBC</description>
    </item>
    
    <item>
      <title> SAP Adobe Form Demo </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP_Demo/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP_Demo/</guid>
      <description>Adobe Form调用 画好了对应的 Form 格式与数据绑定，就可以在 Report 程序中通过具体代码进行调用了。 SFPOUTPUTPARAMS 参数介绍 nodialog: 是否弹出打印对话框 noprint: 不打印，能预览 nopdf: 不会产生</description>
    </item>
    
    <item>
      <title> SAP Adobe Form </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP/</guid>
      <description>SAP 中关于 Form 的设计有三种工具：Script Form，Smart Form 和 Adobe Form. 要在 SAP 系统中展示 Adobe Form 需要 SAP 版本在 ECC6.0以上 ，而且要开发自定义的 Adobe Form</description>
    </item>
    
    <item>
      <title> 透明表删除Key值后激活 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</guid>
      <description>当业务场景发生变化，或则其它原因需要变更透明表的Key值时，保存和激活时会报错，需要使用SE14进行处理。 勾选Direct,Save Data</description>
    </item>
    
    <item>
      <title>SAP Cost Center</title>
      <link>https://coldinfire.github.io/2020/MM_CostCenter/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_CostCenter/</guid>
      <description>成本中心理解 成本中心（Cost Center）是管理会计中的基本责任单元，是公司内部对费用负责人的组织，可以理解为企业内的“部门”。但在管理会</description>
    </item>
    
    <item>
      <title> SAP ABAP 代码扫描工具 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Utils_CodeSearch/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Utils_CodeSearch/</guid>
      <description>使用场景 在不知道某功能模块的名称，并且需要查找使用 RFC 的位置，则可以使用诸如 CALL FUNCTION 或DESTINATION 之类的关键字来运行 ABAP 代码扫描工具。 当增</description>
    </item>
    
    <item>
      <title>OLE 下载数据到EXCEL模板及速度优化</title>
      <link>https://coldinfire.github.io/2020/ABAP_EXCEL_OLE/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_EXCEL_OLE/</guid>
      <description>OLE 下载 EXCEL 问题描述: 当项目中对导出数据EXCEL模板有要求时，ALV标准导出功能不能满足需要开发人员自定义下载数据程序。 步骤： 上传模板 tcod</description>
    </item>
    
    <item>
      <title>SAP Authorization table</title>
      <link>https://coldinfire.github.io/2020/SAPAuthorizationTable/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPAuthorizationTable/</guid>
      <description>相关权限分配的Table Table Desc Table Decs AGR_1016 活动组参数文件名称 AGR_FLAGS 角色属性 AGR_1016B 活动组参数文件名称 AGR_FLAGSB 角色属性 AGR_1250 活动组的权限数据 AGR_HIER 菜单结构信息表 AGR_1251 活动组的权限</description>
    </item>
    
    <item>
      <title>移动平均价和标准价</title>
      <link>https://coldinfire.github.io/2020/MM_StandardPrice/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_StandardPrice/</guid>
      <description>引用链接：移动平均价和标准价 移动平均价和标准价的概念 标准价： 以一个标准的价格表示一个物料在一段时间内的价值，简称S。来源于实际成本估算。用以</description>
    </item>
    
    <item>
      <title>ALV 复制内容到剪贴板</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_ItabToClip/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_ItabToClip/</guid>
      <description>引用链接：ALV复制内容到剪贴板 使用场景 用在 ALV 的 USER_COMMAND 里面；复制 ALV 内容到剪贴板，已经考虑了 ALV 的列隐藏、筛选，负号已经提前；如果有选中的列，则复制</description>
    </item>
    
    <item>
      <title>ALV 添加执行进度功能</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_Progress/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_Progress/</guid>
      <description>添加进度条功能 为了更加清晰的了解到程序执行进度，可以在程序中添加显示进度条功能。 DATA:BEGIN OF gt_result OCCURS 0, sel(1), matnr TYPE mara-matnr, zz_edi_grp TYPE mara-zz_edi_grp, werks TYPE mseg-werks, eknam TYPE eknam, maktx TYPE maktx, num TYPE sy-tabix, row TYPE sy-tabix, icon TYPE icon-id,</description>
    </item>
    
    <item>
      <title> BTE 增强使用 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Enhance_BTE/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Enhance_BTE/</guid>
      <description>BTE概念 BTE(Business Transaction Events)：BTE是SAP中可用的增强技术之一，通常使用在财务会计模块,可由 SAP，第三方供应商（合作伙伴）和客户使用。S</description>
    </item>
    
    <item>
      <title> CS12 ALV 的增强 </title>
      <link>https://coldinfire.github.io/2019/ABAP_BOM_Enhance/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BOM_Enhance/</guid>
      <description>Tcode：CS12的执行程序查看 可以看到，最终执行的程序是RCS12001，因此可以在该程序中查找增强。 执行的程序： RCS11001 Display BOM Level by Level RCS12001 Display Multilevel BOM RCS13001</description>
    </item>
    
    <item>
      <title>SAP JCO 连接</title>
      <link>https://coldinfire.github.io/2019/SAP_JCO/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_JCO/</guid>
      <description>SAP JCO简介 为了在 R/3 系统和 JAVA 平台之间进行实时的交换数据。SAP 提供了一套高效的基于 RFC 的 ABAP 和 JAVA 进程间通讯组件：SAP JAV Connector. Jco 库提供了可以直接在 JAVA</description>
    </item>
    
    <item>
      <title>ABAP 科学计数法问题</title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberQAS/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberQAS/</guid>
      <description>科学计数法转换数字 ABAP 函数 QSS0_FLTP_TO_CHAR_CONVERSION，能将 SAP 系统内的科学计数法显示的数字转换成一般数字。 DATA: l_result TYPE qsollwerte,</description>
    </item>
    
    <item>
      <title> SO10 创建标准文本 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SO10/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SO10/</guid>
      <description>创建标准文本 通过事物码 SO10 可以创建标准文本： 在标准文本中输入文本内容，文本内容可以加入其他的文本，可以实现文本嵌套。 Smartforms 中使用 Step1：Cre</description>
    </item>
    
    <item>
      <title> ABAP搜索帮助 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SearchHelp/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SearchHelp/</guid>
      <description>使用搜索帮助对象 1、在命令字段中输入事务代码 SE11。 2、选择搜索帮助单选按钮，然后输入自定义搜索帮助的名称。然后点击创建按钮。 3、在下一个</description>
    </item>
    
    <item>
      <title> ABAP Dynnamic Programer </title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</guid>
      <description>利用Field Symbols和数据参考的实例： *&amp;amp;-------------------------------------------------------------------- *&amp;amp; Report ZZSM_TEST_DYN *&amp;amp;-------------------------------------------------------------------- REPORT zzsm_test_dyn. DATA: tab_reference TYPE REF TO data, struc_reference TYPE REF TO data. DATA: descr TYPE REF TO cl_abap_structdescr. FIELD-SYMBOLS: &amp;lt;struc&amp;gt; TYPE ANY, &amp;lt;field&amp;gt; TYPE ANY, &amp;lt;itab&amp;gt; TYPE ANY TABLE. PARAMETERS: p_table(20) DEFAULT &amp;#39;LFA1&amp;#39; OBLIGATORY, p_rows TYPE i OBLIGATORY. TRY . &amp;#34;Dynamic</description>
    </item>
    
    <item>
      <title>IDoc 操作</title>
      <link>https://coldinfire.github.io/2019/SAP_IDoc/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_IDoc/</guid>
      <description>参考链接 1.IDoc简介 IDoc：是基于文档，用作异步传输数据的载体，类似于XML;使用功能场景：假设 1040 和 1020 是同一个集团下两个不同子公司的 SAP</description>
    </item>
    
    <item>
      <title> ABAP 字符串处理 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_String/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_String/</guid>
      <description>字符串的处理在程序中的使用十分常见，在这里结合自己日常的使用对ABAP的字符串常用操作进行总结，以便后续使用。 1.获取字符串长度 var1 = strlen( str );</description>
    </item>
    
    <item>
      <title>SAP 长文本</title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_LongText/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_LongText/</guid>
      <description>介绍 长文本是用于在 SAP 系统中包含长文本的容器，通常将它们附加到业务对象上，用户可以输入自由注释。 长文本只能通过与其相连的业务对象的维护事务来维</description>
    </item>
    
    <item>
      <title>SQVI 创建一张简易的报表</title>
      <link>https://coldinfire.github.io/2019/ABAP_ALV_SQVI/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALV_SQVI/</guid>
      <description>SAP提供的SQVI功能，用以快速自定义一个自己需要的报表 通过该方式创建的报表，只能在SQVI下查，谁的用户创建的就只能谁看，其他用户无法共</description>
    </item>
    
    <item>
      <title>ABAP混合算术运算</title>
      <link>https://coldinfire.github.io/2019/ABAP_MixedCalculate/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_MixedCalculate/</guid>
      <description>使用 在ABAP程序中将数值与表达式分别存放，通过表达式计算对应的结果。 一、调用BAPI：EVAL_FORMULA TYPES:BEGIN OF TY_VAL, OPERAND TYPE C, VALUE TYPE STRING, END OF TY_VAL. TYPES:BEGIN OF</description>
    </item>
    
    <item>
      <title>递归遍历成本中心组</title>
      <link>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</guid>
      <description>成本中心组下嵌套成本中心组 成本中心后台数据表是 CSKS，描述表是 CSKT。在表 CSKS 中，主键是 MANDT（客户端）、KOKRS（控制范围）、KO</description>
    </item>
    
    <item>
      <title> ABAP 动态内表 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicTable/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicTable/</guid>
      <description>ABAP动态内表操作 动态内表的列是可以跟随数据的变化而变化，可以使报表显示更简洁漂亮。 REPORT zdyn_test. DATA: dyn_table TYPE REF TO data, dyn_line TYPE REF TO data, FIELD-SYMBOLS: &amp;lt;dyn_table&amp;gt; TYPE STANDARD TABLE. FIELD-SYMBOLS: &amp;lt;dyn_wa&amp;gt; TYPE ANY. FIELD-SYMBOLS: &amp;lt;dyn_field&amp;gt; TYPE ANY. DATA:</description>
    </item>
    
    <item>
      <title> 维护成本控制凭证的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</guid>
      <description>介绍 此项配置是在后台为指定的成本控制范围（Controlling Area）维护编号范围，用于成本控制中的各类凭证。这是一种组织机构分组类的编</description>
    </item>
    
    <item>
      <title> 维护会计凭证号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</guid>
      <description>简介 在一个公司代码（Company Code）生成一张会计凭证（Accounting Document）之前，必须在对凭证类型设置一个号码范围。</description>
    </item>
    
    <item>
      <title> 维护物料主数据的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</guid>
      <description>简介 此项操作是在 SAP 系统后台，为需要使用的物料类型设定编号范围。它的操作是针对整个 Client 的。首先维护不重复的号码组，每组可包含内部段和外部段（两者</description>
    </item>
    
    <item>
      <title> 维护客户号码范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</guid>
      <description>简介 定义并分配客户主数据的号码范围，分为两个步骤，两步操作的对象都针对整个 Client。 定义号码范围（Define Number Ranges for Customer Master） 分配</description>
    </item>
    
    <item>
      <title> SAP Number Range Object </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRange/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRange/</guid>
      <description>操作说明 在 SAP 系统中，各类主数据及单据都需要使用编号进行唯一性标识，以此形成后台有着大量编号范围维护的配置操作，种类繁多。 编号范围维护分为两部</description>
    </item>
    
    <item>
      <title>SAP 异常处理</title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_TryCatch/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_TryCatch/</guid>
      <description>SAP 异常处理 异常是在程序执行期间出现的问题。 当异常发生时，程序的正常流程中断，程序应用程序异常终止，这是不推荐的，因此这些异常将被处理。 异常处</description>
    </item>
    
    <item>
      <title>BADI 维护</title>
      <link>https://coldinfire.github.io/2019/ABAP_BADI/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BADI/</guid>
      <description>BADI 基于类的增强 BADI 维护是通过 SE18、SE19 事务来来维护的。 SE18：用于创建及维护 BADI 对象，定义接口功能，查看 BADI 的相关属性 SE19：用于维护</description>
    </item>
    
    <item>
      <title>ABAP Object Oriented 语法</title>
      <link>https://coldinfire.github.io/2019/ABAP_ObjectOriented_Basic/</link>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ObjectOriented_Basic/</guid>
      <description>类声明和实现 类具有属性和方法；对象是类的实例；对象是通过指针变量来访问的；对象有独立的 interface。 &amp;#34;Class Declarations&amp;#34; CLASS application DEFINITION. PUBLIC SECTION. &amp;#34;公有属性定</description>
    </item>
    
    <item>
      <title>ABAP Object Oriented 概述</title>
      <link>https://coldinfire.github.io/2019/ABAP_ObjectOriented_Overview/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ObjectOriented_Overview/</guid>
      <description>ABAP Object Oriented 通过使用面向对象技术可以减少错误发生的隐患以及增强代码的可维护性。 ABAP Object Oriented 的年代史： SAP Basis Release 4.5 发布了 ABAP OO 的一个版本，引入了类接口的概念，并</description>
    </item>
    
    <item>
      <title> ALV Tree 使用 </title>
      <link>https://coldinfire.github.io/2019/ABAP_ALV_TreeDemo/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALV_TreeDemo/</guid>
      <description></description>
    </item>
    
    <item>
      <title> ALV Tree 标准Demo </title>
      <link>https://coldinfire.github.io/2019/ABAP_ALV_Tree/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALV_Tree/</guid>
      <description>Demo列表 BCALV_TREE_01 ALV 树控制：构建层次树 BCALV_TREE_02 ALV 树控制：事件处理 BCALV_TREE_03 ALV 树控制：使用自己的上下文菜单 BCALV_TREE_04 ALV 树控制：添加按钮到工具栏 BCALV_TREE_05 ALV 树控制：添加菜单到工具</description>
    </item>
    
    <item>
      <title>BAPI 使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_BAPI_Basic/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BAPI_Basic/</guid>
      <description>BAPI 简介 BAPI：Business Application Process Interface(业务应用编辑接口)，它实质上就是一种特殊的 RFC 函数。 BAPI 函数及函数参数参考的结构类型名，</description>
    </item>
    
    <item>
      <title> ABAP 学习网站记录 </title>
      <link>https://coldinfire.github.io/2019/ABAP_WebSiteCollect/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_WebSiteCollect/</guid>
      <description>http://www.saptechnical.com/index.htm：需要检索关键信息 https://sapcodes.com/：包含</description>
    </item>
    
    <item>
      <title> SALV CheckBox 设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_CheckBox/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_CheckBox/</guid>
      <description>添加复选框功能 要获得可选（可编辑）复选框，我们需要从 column 对象中获取特定的列。此后，我们需要使用方法 SET_CELL_TYPE 将单元格类型设置为 IF_SALV_C_CELL_TYPE =&amp;gt; CHECKBOX_H</description>
    </item>
    
    <item>
      <title> SALV Color 设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Color/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Color/</guid>
      <description>ALV颜色设置 整行：在记录中在需要设置COLOR的数据中添加详细信息 整列：从COLUMNS获得对应的列，设置特定列的颜色 单元格：在每条记录的</description>
    </item>
    
    <item>
      <title> SALV Display 设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_DisplaySet/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_DisplaySet/</guid>
      <description>Display设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_display_setting CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_display_setting CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_display_setting. DATA: lo_display TYPE REF TO cl_salv_display_settings. *Get display object lo_display = co_alv-&amp;gt;get_display_settings( ). *Set ZEBRA pattern lo_display-&amp;gt;set_striped_pattern( &amp;#39;X&amp;#39; ). *Title to ALV lo_display-&amp;gt;set_list_header( &amp;#39;ALV Test for Display</description>
    </item>
    
    <item>
      <title> SALV Layout 设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Layout/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Layout/</guid>
      <description>Layout设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_layout CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_layout CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_layout. DATA: lo_layout TYPE REF TO cl_salv_layout, lf_variant TYPE slis_vari, ls_key TYPE salv_s_layout_key. *Get layout object lo_layout = co_alv-&amp;gt;get_layout( ). *Set Layout save restriction * 1. Set Layout Key</description>
    </item>
    
    <item>
      <title> SALV Status 设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Status/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Status/</guid>
      <description>设置Status *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_pf_status CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_pf_status CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_pf_status. DATA: lo_functions TYPE REF TO cl_salv_functions_list. lo_functions = co_alv-&amp;gt;get_functions( ). lo_functions-&amp;gt;set_default( abap_true ). &amp;#34;lo_functions-&amp;gt;set_all( abap_true ).&amp;#34; ENDMETHOD. &amp;#34;set_pf_status&amp;#34; *$*$*.....CODE_ADD_3 - End....................................3..*$*$* 自定义Stat</description>
    </item>
    
    <item>
      <title> SALV 事件处理 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Event/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Event/</guid>
      <description>Event 处理 CLASS lcl_event_handler DEFINITION. PUBLIC SECTION. METHODS: on_link_click FOR EVENT link_click OF cl_salv_events_table IMPORTING row column. ENDCLASS. &amp;#34;lcl_event_handler DEFINITION&amp;#34; *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD generate_output. DATA: lx_msg TYPE REF TO cx_salv_msg. TRY. cl_salv_table=&amp;gt;factory( IMPORTING r_salv_table = o_alv CHANGING t_table = t_vbak ). CATCH cx_salv_msg INTO lx_msg. ENDTRY. *Get the event object DATA: lo_events TYPE REF TO cl_salv_events_table. lo_events = o_alv-&amp;gt;get_event( ). *Instantiate the event handler object DATA: lo_event_handler TYPE</description>
    </item>
    
    <item>
      <title> SALV 创建ALV </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Create/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Create/</guid>
      <description>创建和显示 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; This code snippet will show how to use the CL_SALV_TABLE to *&amp;amp; generate the ALV *&amp;amp;---------------------------------------------------------------------* REPORT ztest_oo_alv_main. *----------------------------------------------------------------------* * CLASS lcl_report DEFINITION *----------------------------------------------------------------------* CLASS lcl_report DEFINITION. PUBLIC SECTION. * Final output table TYPES: BEGIN OF ty_vbak, vbeln TYPE vbak-vbeln, erdat TYPE erdat, auart TYPE auart, kunnr TYPE kunnr, netwr TYPE netwr, check TYPE flag, &amp;#34;复选框</description>
    </item>
    
    <item>
      <title> SALV 图标设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_IConsTooltips/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_IConsTooltips/</guid>
      <description>图标设置 为了能够在 SALV 上添加 ICON 和工具提示，需要： 列值作为 ICON 值– 在输出表中，需要添加 ICON 作为值。这样就可以将 ICON_GREEN_LIGHT 用作交通绿灯 将 SALV 的 ICON 列设置为 ICON – 从 SALV</description>
    </item>
    
    <item>
      <title> SALV 字段目录设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_ColumnSet/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_ColumnSet/</guid>
      <description>Fieldcat设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. *Set the various column properties METHODS: set_columns CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Setting up the Columns CALL METHOD me-&amp;gt;set_columns CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_columns. *Get all the Columns DATA: lo_cols TYPE REF TO cl_salv_columns. lo_cols = o_alv-&amp;gt;get_columns( ). *set the Column</description>
    </item>
    
    <item>
      <title> SALV 排序设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Sorts/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Sorts/</guid>
      <description>Sorts设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_sorts CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* * Set SORT CALL METHOD set_sorts CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_sorts. DATA: lo_sort TYPE REF TO cl_salv_sorts. *Get Sort object lo_sort = co_alv-&amp;gt;get_sorts( ). *Set the SORT on the AUART with Subtotal TRY. CALL METHOD lo_sort-&amp;gt;add_sort EXPORTING</description>
    </item>
    
    <item>
      <title> SALV 汇总设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_ColumnSum/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_ColumnSum/</guid>
      <description>Apply Aggregations *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_aggregations CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_aggregations CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_aggregations. DATA: lo_aggrs TYPE REF TO cl_salv_aggregations. lo_aggrs = co_alv-&amp;gt;get_aggregations( ). *Add TOTAL for COLUMN NETWR TRY. CALL METHOD lo_aggrs-&amp;gt;add_aggregation EXPORTING columnname = &amp;#39;NETWR&amp;#39; aggregation = if_salv_c_aggregation=&amp;gt;total. CATCH cx_salv_data_error . &amp;#34;#EC NO_HANDLER&amp;#34; CATCH cx_salv_not_found .</description>
    </item>
    
    <item>
      <title> SALV 过滤设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Filter/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Filter/</guid>
      <description>过滤设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_filters CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Set Filters CALL METHOD set_filters CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_filters. DATA: lo_filters TYPE REF TO cl_salv_filters. lo_filters = co_alv-&amp;gt;get_filters( ). *Set the filter for the column ERDAT the filter criteria works exactly same as any *RANGE or SELECT-OPTIONS works. TRY.</description>
    </item>
    
    <item>
      <title> SALV 页头和页尾设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_PageTopEnd/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_PageTopEnd/</guid>
      <description>添加页头(Top of page)和页脚(End of page) *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. *Set Top of page METHODS: set_top_of_page CHANGING co_alv TYPE REF TO cl_salv_table. *Set End of page METHODS: set_end_of_page CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Calling the top of page method CALL METHOD me-&amp;gt;set_top_of_page CHANGING co_alv =</description>
    </item>
    
    <item>
      <title> 使用SALV功能创建ALV </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV_Basic/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV_Basic/</guid>
      <description>引用自：https://www.cnblogs.com/jiangzhengjun/p/4291387.html 简介 SALV 可以像使用函数方式生成</description>
    </item>
    
    <item>
      <title>SAP 进销存难点分析及对策</title>
      <link>https://coldinfire.github.io/2019/MM_Invoicing/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Invoicing/</guid>
      <description>引用链接：https://blog.csdn.net/wbin9752/article/details/8608765#comments_2</description>
    </item>
    
    <item>
      <title>BOM了解</title>
      <link>https://coldinfire.github.io/2019/MM_BOM/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_BOM/</guid>
      <description>BOM定义 ​ BOM:物料清单，是部件完整、正式的结构化清单，组成一个产品或装配。包括每个部件的项目号、损耗、数量和计量单位。</description>
    </item>
    
    <item>
      <title> 发送带文本的 Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailText/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailText/</guid>
      <description>转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html 程序实例 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z14841_TEST010 *&amp;amp;---------------------------------------------------------------------* REPORT z14841_test010. TYPES: BEGIN OF stru_master, kunnr TYPE kunnr, &amp;#34; 客户编号 1&amp;#34; bukrs TYPE bukrs, &amp;#34; 公司代码&amp;#34; pro_mill TYPE werks_d, &amp;#34; 工厂&amp;#34; *quota TYPE zcdfquota, &amp;#34; 额度&amp;#34; *account TYPE char10, &amp;#34; 帐期&amp;#</description>
    </item>
    
    <item>
      <title> 发送带附件(Excel)的 Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailExcel/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailExcel/</guid>
      <description>转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html 程序实例 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZTEST_EMAIL_EXCEL *&amp;amp;---------------------------------------------------------------------* REPORT ztest_email_excel. TABLES: ekko. PARAMETERS: p_email TYPE somlreci1-receiver DEFAULT &amp;#39;coldfire@163.com&amp;#39;. TYPES: BEGIN OF t_ekpo, ebeln TYPE ekpo-ebeln, ebelp TYPE ekpo-ebelp, aedat TYPE ekpo-aedat, matnr TYPE ekpo-matnr, END OF t_ekpo. DATA: it_ekpo TYPE STANDARD TABLE OF t_ekpo INITIAL SIZE 0, wa_ekpo TYPE t_ekpo. TYPES: BEGIN OF t_charekpo, ebeln(10) TYPE c, ebelp(5) TYPE c, aedat(8) TYPE c, matnr(18) TYPE c,</description>
    </item>
    
    <item>
      <title> SAP开发文档撰写 </title>
      <link>https://coldinfire.github.io/2019/SAP_TechWord/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_TechWord/</guid>
      <description>开发文档的目的 开发文档不是蓝图，不是设计文档，它的重点是关于技术的、关于实现的，但也不仅仅是一些伪代码。应当包含 “程序为什么设计”、“主要功</description>
    </item>
    
    <item>
      <title>移库产生的报错</title>
      <link>https://coldinfire.github.io/2019/WM_Q1/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/WM_Q1/</guid>
      <description>Q：当进行移库操作时，同一个程序中执行多次移库动作会产生Error Message:No status object is available for HU XXXXXX(Error BS001 when posting goods movment)? A：需要每次进行移库前刷新数据： 调用BAPI进行</description>
    </item>
    
    <item>
      <title> SAP 下载程序源码工具 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</guid>
      <description>转自 http://blog.sina.com.cn/s/blog_4d1570de0100pvhd.html 程序实例 *@---------------------------------------------------------------------* *@ Report ZZXUE01 下载程序代码 *@ T-code *@---------------------------------------------------------------------* *@ Created by Xavery Hsueh on 2011-03-01 *@ Lasted Edited date: *@---------------------------------------------------------------------* &amp;#34;REPORT XXX NO STANDARD PAGE HEADING.&amp;#34; *********************************************************************** ** 声明数据库表 *********************************************************************** TABLES:rs38m, trdir. *********************************************************************** ** 内表结构类型的定义 *********************************************************************** DATA BEGIN OF dynpfields OCCURS 1. INCLUDE STRUCTURE dynpread.</description>
    </item>
    
    <item>
      <title> SAP 通过程序收发邮件 </title>
      <link>https://coldinfire.github.io/2019/ABAP_Email_FM/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Email_FM/</guid>
      <description>程序所需 CLASS 和 FM CLASS CL_BCS：发送邮件的主要功能类，创建发送请求，添加发送内容，添加发送人等，最后发送指令的发出 CL_DOCUMENT_BC</description>
    </item>
    
    <item>
      <title> SAP 发送 Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_Email/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Email/</guid>
      <description>SAP 的邮件功能可以使用系统标准的邮件工作台收发邮件，也可以调用邮件 API 接口函数进行收发邮件。 标准邮件工作台收发邮件 RZ10：设置 Profile 参数 1、运行事</description>
    </item>
    
    <item>
      <title>SAP 后台JOB</title>
      <link>https://coldinfire.github.io/2019/SAP_JOB/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_JOB/</guid>
      <description>定义后台 job 第一种：SE38执行可执行程序 菜单栏‘program’&amp;mdash;&amp;gt;&amp;lsquo;Execute in Background&amp;rsquo; 输入输出设备 选择开始时</description>
    </item>
    
    <item>
      <title>SAP Memory 使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_Memory/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Memory/</guid>
      <description>SAP Memory 和 ABAP Memory 使用的语句不同 SAP memory使用SET/GET parameters SET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD var_matnr. GET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD var_matnr. ABAP Memory使用EXPORT 和IMPORT EXPORT p_matnr = var_matnr TO MEMORY ID</description>
    </item>
    
    <item>
      <title>ABAP DOI 使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_EXCEL_DOI/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EXCEL_DOI/</guid>
      <description>概述 DOI（Desktop office Integration）采用 OO 的思想实现与 Office 的结合使用，通过 DOI 对文档进行操作和处理。SAP 标准DEMO： SAPR</description>
    </item>
    
    <item>
      <title>SAP Webservice 使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_Webservice/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Webservice/</guid>
      <description>ABAP 调用外部 Webservice 创建代理类 Step1：SE80 选择 package，点击创建 Enterprise Service / Web service-proxy client Step2：参数填写，没有错误的话，会根据指定的 wsdl 文件，产</description>
    </item>
    
    <item>
      <title>STVARV 使用详情</title>
      <link>https://coldinfire.github.io/2019/ABAP_Utils_Stvarv/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Utils_Stvarv/</guid>
      <description>STVARV 使用 该配置不能跨 Client 因此需要在每个 Client 单独配置；使用事物码STVARV进入配置界面，可以新建、修改、删除记录。 程序内使用 程序内只是取出配置的值</description>
    </item>
    
    <item>
      <title>ABAP Submit 实现程序间互相调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_Submit/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Submit/</guid>
      <description>ABAP 代码中通过 Submit 实现程序的调用以及调用时数据参数的传递。 程序准备 将要被调用的 Report: ZTEST_SUBMIT1 REPORT ZTEST_SUBMIT1. DATA: lv_matnr TYPE matnr. DATA: lv_charg TYPE charg. SELECT-OPTIONS: s1_matnr FOR matnr, s1_lgort FOR lgort. START-OF-SELECTION. DATA: lv_line TYPE i. lv_line = LINES( s1_matnr ). WRITE: / &amp;#39;S1_MATNR&amp;#39;,lv_line. lv_line</description>
    </item>
    
    <item>
      <title> 将Smartforms转换成PDF发送到FTP服务器 </title>
      <link>https://coldinfire.github.io/2018/ABAP_SmartformsToFTP/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SmartformsToFTP/</guid>
      <description>Send pdf file to ftp server REPORT zpdfsendtoftp. DATA : BEGIN OF t_vbak OCCURS 0, vbeln TYPE vbrk-vbeln, vkorg TYPE vbak-vkorg, vkbur TYPE vbak-vkbur, END OF t_vbak. DATA: function_name TYPE rs38l_fnam, form_name TYPE tdsfname VALUE &amp;#39;ZTEST1&amp;#39;. DATA: carr_id TYPE sbook-carrid, ctrlop TYPE ssfctrlop, compop TYPE ssfcompop, tab_otf_data TYPE ssfcrescl. DATA: pdf_tab LIKE tline OCCURS 0 WITH HEADER LINE, tab_otf_final TYPE itcoo OCCURS 0 WITH HEADER LINE, bin_filesize TYPE i, pdf_xstring</description>
    </item>
    
    <item>
      <title> 日期操作 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_Date/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_Date/</guid>
      <description>日期格式转换 系统标准Function CONVERSION_EXIT_IDATE_OUTPUT INPUT: 20080203 OUTPUT: 03FEB2008 CONVERT_DATE_TO_EXTERNAL INPUT: 20080203 OUTPUT: 02/03/2008 &amp;#34;According to user&amp;#39;s default setting. CONVERT_DATE_TO_INTERNAL INPUT: 02/03/2008 &amp;#34;Should be same as the user&amp;#39;s default setting OUPUT: 20080203 自定义工具 FUNCTION ZCONVERT_DATE_FORMAT. *&amp;#34;---------------------------------------------------------------------- *&amp;#34;*&amp;#34;Local interface: *&amp;#34; IMPORTING *&amp;#34; REFERENCE(ZNAME) LIKE USR01-BNAME *&amp;#34; CHANGING *&amp;#34; REFERENCE(ZDATE) TYPE C *&amp;#34;---------------------------------------------------------------------- DATA:</description>
    </item>
    
    <item>
      <title>时间戳操作</title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_Timestamp/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_Timestamp/</guid>
      <description>SAP 时间戳 获取时间戳方法 GET TIME STAMP FIELD time_stamp. DATA time_stamp TYPE tzntstmps. &amp;#34;UTC Time Stamp in Short Form (YYYYMMDDhhmmss)&amp;#34; GET TIME STAMP FIELD time_stamp. BAPI：IB_CONVERT_INTO_TIMESTAMP CALL FUNCTION &amp;#39;IB_CONVERT_INTO_TIMESTAMP&amp;#39; EXPORTING i_datlo = sy-datum i_timlo</description>
    </item>
    
    <item>
      <title>Smartforms打印成PDF</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartfomrs_PDF/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartfomrs_PDF/</guid>
      <description>1.程序中使用 Smartform 模板 &amp;#34;SMARTFORMS变量定义&amp;#34; DATA: form_name TYPE tdsfname VALUE &amp;#39;ZZ_TEST&amp;#39;, &amp;#34;Smartforms Name&amp;#34; function_name type rs38l_fnam, &amp;#34;Function Name&amp;#34; control type ssfctrlop, &amp;#34;Control structure&amp;#34; option type ssfcompop, &amp;#34;Smart Composer (transfer) options&amp;#34; result type ssfcrescl. &amp;#34;Return value at end of form printing&amp;#34; &amp;</description>
    </item>
    
    <item>
      <title>SAP Excel 操作实例(CLASS)</title>
      <link>https://coldinfire.github.io/2018/ABAP_EXCEL_CLASS/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EXCEL_CLASS/</guid>
      <description>SAP Excel 操作实现 (CLASS) *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZEXCEL_CLASS_DEMO *&amp;amp;---------------------------------------------------------------------* REPORT zexcel_class_demo. TABLES: sscrfields,rlgrap. TYPE-POOLS: slis. &amp;#34; TEXT-000 : Select file to upload &amp;#34; &amp;#34; TEXT-001 : Select file &amp;#34; SELECTION-SCREEN BEGIN OF BLOCK file_name WITH FRAME TITLE text-000. SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_file. PARAMETERS: p_file LIKE rlgrap-filename . SELECTION-SCREEN END OF LINE. SELECTION-SCREEN END OF BLOCK file_name. SELECTION-SCREEN FUNCTION KEY 1.</description>
    </item>
    
    <item>
      <title>SAP Excel 操作实例(BAPI)</title>
      <link>https://coldinfire.github.io/2018/ABAP_EXCEL_BAPI/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EXCEL_BAPI/</guid>
      <description>SAP Excel 操作实现 (BAPI) *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZEXCEL_BAPI *&amp;amp;---------------------------------------------------------------------* REPORT zexcel_bapi. TABLES: sscrfields,rlgrap. TYPE-POOLS: slis. &amp;#34; TEXT-000 : Select file to upload &amp;#34; &amp;#34; TEXT-001 : Select file &amp;#34; SELECTION-SCREEN BEGIN OF BLOCK file_name WITH FRAME TITLE text-000. SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_file. PARAMETERS: p_file LIKE rlgrap-filename . SELECTION-SCREEN END OF LINE. SELECTION-SCREEN END OF BLOCK file_name. SELECTION-SCREEN FUNCTION KEY 1.</description>
    </item>
    
    <item>
      <title>BOM 展开</title>
      <link>https://coldinfire.github.io/2018/ABAP_BOM_USE/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BOM_USE/</guid>
      <description>SAP BOM读取逻辑 相关表 MAST：Material BOM STKO : BOM Header STPO : BOM Positions (detail) MAPL : Assignment fo Task Lists to Materials PLKO : Routing Group Header PLSO : Routing Group Sequence PLPO : Routing Group Operations AFKO : Production Order Header AFPO : Production Order Position (details) 可用</description>
    </item>
    
    <item>
      <title>ABAP 工作流</title>
      <link>https://coldinfire.github.io/2018/ABAP_WorkFlow/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_WorkFlow/</guid>
      <description>SAP工作流介绍 工作流是一个基于某组程序规则所采用的路径。是自动运作的任务的进程中，参与的人、文件、信息或任务，以及各个要素间的传递按照规程</description>
    </item>
    
    <item>
      <title>SAP 锁机制</title>
      <link>https://coldinfire.github.io/2018/SAP_Lock/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_Lock/</guid>
      <description>SAP 为什么要设置锁 1.保持数据的一致性 同时多个用户操作同一数据，防止数据出现不一致性而采用了锁机制。一般 sap 会在操作数据前设置锁，防止第二个用户</description>
    </item>
    
    <item>
      <title>SAP 上传和下载Excel</title>
      <link>https://coldinfire.github.io/2018/ABAP_Excel/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Excel/</guid>
      <description>SAP Excel模板操作 上传模板：文档是通过SMW0上传的。 选择模板类型 根据Package和Name查找模板 编辑模板 创建模板，维护名称和描述后从</description>
    </item>
    
    <item>
      <title> ALV tree 显示BOM结构 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_BOMTree/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_BOMTree/</guid>
      <description>实例代码 REPORT z_barry_alv_tree1_bom MESSAGE-ID oo. TABLES: stpox. INCLUDE &amp;lt;icon&amp;gt;. CLASS: cl_gui_column_tree DEFINITION LOAD, cl_gui_cfw DEFINITION LOAD . DATA: tree1 TYPE REF TO cl_gui_alv_tree , mr_toolbar TYPE REF TO cl_gui_toolbar . DATA: gs_stpox TYPE stpox, gt_stpox TYPE stpox OCCURS 0, gt_fieldcatalog TYPE lvc_t_fcat, gt_item_layout TYPE lvc_t_laci, gs_item_layout TYPE lvc_s_laci, okcode LIKE sy-ucomm . TYPES: BEGIN OF gs_f. INCLUDE STRUCTURE stpox. TYPES: node_key TYPE lvc_nkey, END OF gs_f. DATA:</description>
    </item>
    
    <item>
      <title> Web Dynpro在Portal上传输 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_ClintTransfer/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_ClintTransfer/</guid>
      <description>当在Portal测试环境测试通过后，需要将其从测试环境搬到正式环境. Download from QAS system Open Transport package export Editor 选择System Administration,然后选择</description>
    </item>
    
    <item>
      <title> 将开发好的Web Dynpro 挂载到Portal上 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_PortalConfig/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_PortalConfig/</guid>
      <description>Web dynpro create role 在浏览器中登陆Portal，选择Content Administration页签，然后选择Portal Content 下面需要使用的文件夹。 选择文件</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - OVS搜索帮助 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_SearchOVS/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_SearchOVS/</guid>
      <description>普通字段 普通字段，表字段的搜索帮助（在创建节点的时候指定搜索帮助OVS，或者后面加上去） Step1 ：创建WDA程序，双击程序组件，在Used Comp</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - Trigger ALV Events </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_TriggerEvents/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_TriggerEvents/</guid>
      <description>Question 由于需要一个可编辑的 ALV 表，因此必须使用 ALV 事件，例如 on_cell_action事件和 on_click 事件。 尽管我已经注册了 ALV 事件，但是在调试过程中，无法</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:ALV_VIEW-Function </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P4/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P4/</guid>
      <description>ALV_VIEW Action Function:程序实例 METHOD ONACTIONPRINT . DATA lo_api_controller TYPE REF TO if_wd_controller. DATA lo_message_manager TYPE REF TO if_wd_message_manager. DATA: LT_EKPO TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO TYPE ZEKPO_asn, LT_EKPO_SUM TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO_SUM TYPE ZEKPO_asn, LT_EKPO_SUM_TMP TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO_SUM_TMP TYPE ZEKPO_asn. DATA lo_lips TYPE REF TO if_wd_context_node. data: lt_lips TYPE TABLE OF ZSLIPSASN,</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:ALV_VIEW-WDDOINIT </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P1/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P1/</guid>
      <description>ALV_VIEW: WDDOINIT METHOD WDDOINIT . *1.数据定义 *========================================================= DATA: alv_usage TYPE REF TO if_wd_component_usage, &amp;#34;①&amp;#34; alv_controller TYPE REF TO iwci_salv_wd_table, &amp;#34;②&amp;#34; alv_config TYPE REF TO cl_salv_wd_config_ta</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:DATA_LOAD </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P2/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P2/</guid>
      <description>Component Controller: DATA_LOAD METHOD DATA_LOAD . &amp;#34; ALV 输出的结构定义 &amp;#34; DATA: lt_ZALV_ZPEFF_TOTAL TYPE TABLE OF ZALV_ZPEFF_TOTAL, ls_ZALV_ZPEFF_TOTAL TYPE ZALV_ZPEFF_TOTAL, lt_ZALV_PROD_EFF TYPE TABLE OF ZALV_PROD_EFF, ls_ZALV_PROD_EFF TYPE ZALV_PROD_EFF, lo_node TYPE REF TO if_wd_context_node. &amp;#34; 选择屏幕数据的单属性定义 &amp;#34; DATA: lo_nd_zoption TYPE REF TO if_wd_context_node, lo_el_zoption TYPE REF TO if_wd_context_element, ls_zoption TYPE wd_this-&amp;gt;element_zoption, lv_p_total TYPE wd_this-&amp;gt;element_zoption-p_total, lv_p_detail</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:WDDOINIT </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P3/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P3/</guid>
      <description>Component Controller/INPUT_VIEW: WDDOINIT METHOD WDDOINIT. TYPES:BEGIN OF soption, typename TYPE string, &amp;#34; Selection screen field ref type element &amp;#34; id TYPE string, &amp;#34; selection screen field name &amp;#34; END OF soption. DATA: it_soption TYPE TABLE OF soption, wa_soption TYPE soption. DATA it_range_table TYPE REF TO data. &amp;#34; ALV Object Setting &amp;#34; DATA: alv_cmp_usage TYPE REF TO if_wd_component_usage, alv_controller TYPE REF TO iwci_salv_wd_table, alv_config TYPE REF TO cl_salv_wd_config_table. DATA: column_settings TYPE</description>
    </item>
    
    <item>
      <title> 创建一个Web Dynpro ABAP程序实例 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_Demo/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_Demo/</guid>
      <description>准备数据 SAP Web Dynpro 一般都是采用调用 ERP 接口方式获取业务数据，因此输入，输出参数等结构都需要和 ERP 系统中接口的内容保持一致。在 ERP 系统中找到 Report 对应的程序</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - View Details </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_View/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_View/</guid>
      <description>视图的整体介绍 Properties ：VIEW的属性，一般引入一些系统控件如alv，select-option等 Layout ：视图布局，显示的样式，选择字段的排版 Inbound Plugs ：转</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - Structure </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_Structure/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_Structure/</guid>
      <description>一般的程序框架 Component Controller 组件控制器是定义全局的组建，与视图相似，组件控制器是一个程序对外的部分，是整个程序最开始执行的环节 ，也是控制多个视图间数据</description>
    </item>
    
    <item>
      <title> WebDynpro for JAVA </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproJAVA/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproJAVA/</guid>
      <description>简介 Web Dynpro 在业务应用程序的主要结构和视觉设计部分的方式，在很大程度上是独立于实现语言. 一个Web Dynpro 组件不是一个JAVA类，而是一系列类集合所有</description>
    </item>
    
    <item>
      <title>BAPI 总结列表</title>
      <link>https://coldinfire.github.io/2018/ABAP_BAPI_SUM/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BAPI_SUM/</guid>
      <description>本文主要记录一些收集来的BAPI 在SE38环境下的程序名输入栏 输入 DEMO 后按 F4，你可以查到 SAP 所有的 DEMO 示例程序，会学到很多 ABAP 功能的实现方法 输入 BCALV</description>
    </item>
    
    <item>
      <title> RFC 介绍 </title>
      <link>https://coldinfire.github.io/2018/ABAP_RFC/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_RFC/</guid>
      <description>RFC : SAP Hlep Portal 链接 什么是 RFC RFC 是 SAP 系统和其他（SAP 或非 SAP）系统间的一个重要而常用的双向接口技术，也被视为 SAP 与外部通信的基本协议。简单地说，R</description>
    </item>
    
    <item>
      <title> SM30 表维护 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Table_Maintenance/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table_Maintenance/</guid>
      <description>表维护创建 创建自定义表 需要设置为 Display/Maintenance Allowed.允许修改，才可以在SM30中进行数据维护。否则会产生以下异常： 创建表维护 权限组：控制访问权</description>
    </item>
    
    <item>
      <title> SAP Field Symbols </title>
      <link>https://coldinfire.github.io/2018/ABAP_FieldSymbol/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_FieldSymbol/</guid>
      <description>字段符号 定义 FIELD-SYMBOLS: &amp;lt;fs_tb&amp;gt; TYPE ANY TABLE. FIELD-SYMBOLS: &amp;lt;fs_wa&amp;gt; TYPE ANY. FIELD-SYMBOLS: &amp;lt;fs_struc&amp;gt; LIKE LINE OF &amp;lt;table&amp;gt;. FIELD-SYMBOLS: &amp;lt;fs_struc&amp;gt; LIKE &amp;lt;structure&amp;gt;. 使用 FIELD-SYMBOLS 必须和某个变量，结构或者内表绑定后才能使用，在使用字段符号前必须分配给某个变量，不然</description>
    </item>
    
    <item>
      <title>BDC 屏幕录制</title>
      <link>https://coldinfire.github.io/2018/ABAP_BDC/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BDC/</guid>
      <description>定义BDC (Batch Data Communication) BDC：SAP常用的一种数据传输方法。用于一些数据量大，但对速度要求不高的数据传输. 基本流程 Step1 获取源数据 一般情况下，在进行传</description>
    </item>
    
    <item>
      <title>SAP ABAP中自定义权限对象</title>
      <link>https://coldinfire.github.io/2018/SAPAuthorization_details/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPAuthorization_details/</guid>
      <description>自定义权限对象流程 SAP 扩展中用户往往都需要使用自己的权限对象，为了达到目的，请按下列流程建立和维护权限对象。一旦有账号需要赋予权限，直接用 SAP 系</description>
    </item>
    
    <item>
      <title>SAP Authorization</title>
      <link>https://coldinfire.github.io/2018/SAPAuthorization/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPAuthorization/</guid>
      <description>TCode简介 SU01：查看和编辑Role SU10：实现对用户组的批量维护 SU20：权限字段清单，可以增、删、改权限字段，可以浏览字段具体被</description>
    </item>
    
    <item>
      <title>查找增强程序3</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance3/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance3/</guid>
      <description>一个功能非常全面的增强出口查找工具 *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; Report: zdamon_004 (V9) &amp;amp;* *&amp;amp; PJA Consultancy Services (www.pjas.com) &amp;amp;* *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; This report attmpts to find Enhancements, Program-Exits, BADIs &amp;amp;* *&amp;amp; and Business Transaction Events in a particular program/tcode. &amp;amp;* *&amp;amp; Last updated: 09 May 2007 &amp;amp;* *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; Selection Texts: *&amp;amp; P_ALV ALV format *&amp;amp; P_AUTH Include authority-check search</description>
    </item>
    
    <item>
      <title>查找增强程序2</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance2/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance2/</guid>
      <description>查找增强出口和BADI *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z_FIND_EXIT_AND_BADI *&amp;amp; *&amp;amp;---------------------------------------------------------------------* *&amp;amp; *&amp;amp; *&amp;amp;---------------------------------------------------------------------* report z_find_exit_and_badi no standard page heading. *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Enter the transaction code that you want to search through in order *&amp;amp; to find which Standard SAP User Exits and BADIs *&amp;amp; *&amp;amp;---------------------------------------------------------------------* *&amp;amp; For field &amp;#39;SUBC&amp;#39; of table &amp;#39;TRDIR&amp;#39;: *&amp;amp; M Module Pool *&amp;amp; F Function group *&amp;amp; S Subroutine</description>
    </item>
    
    <item>
      <title>查找增强程序1</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance1/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance1/</guid>
      <description>利用t-code查找增强出口的程序工具 REPORT zdamon_005 NO STANDARD PAGE HEADING. TABLES : tstc, tadir, modsapt, modact, trdir, tfdir, enlfdir. TABLES : tstct. DATA : jtab LIKE tadir OCCURS 0 WITH HEADER LINE. DATA : field1(30). DATA : v_devclass LIKE tadir-devclass. PARAMETERS : p_tcode LIKE tstc-tcode OBLIGATORY. SELECT SINGLE * FROM tstc WHERE tcode EQ p_tcode.</description>
    </item>
    
    <item>
      <title>SAP 增强</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance/</guid>
      <description>基本概念 SAP 增强已经发展过几代了，可参考 SAP 标准教材 BC425 和 BC427。 SAP 增强从用途方面分类：数据元素增强、菜单增强、屏幕增强、功能增强。 SAP 增强从实</description>
    </item>
    
    <item>
      <title>复制其他的内表/结构到当前表/结构</title>
      <link>https://coldinfire.github.io/2018/ABAP_Table_CopyFields/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table_CopyFields/</guid>
      <description>有时需要创建一个结构，但是字段和其他表或则结构类似，就可以采用复制的方式快速创建，而不用一个一个字段去输入。 1.SE11选择需要添加字段的表</description>
    </item>
    
    <item>
      <title>Dialog 程序实例</title>
      <link>https://coldinfire.github.io/2018/ABAP_Dialog_Temp/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Dialog_Temp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dialog 程序知识汇总</title>
      <link>https://coldinfire.github.io/2018/ABAP_Dialog_Detail/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Dialog_Detail/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dialog 程序简介</title>
      <link>https://coldinfire.github.io/2018/ABAP_Dialog_Basic/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Dialog_Basic/</guid>
      <description>TCode SE51：屏幕操作器 SE41：菜单编辑器 ABAP与Dialog交互方式 ABAP程序与Dialog屏幕进行数据交换的方式，通过在程序中定义一</description>
    </item>
    
    <item>
      <title> VOFM使用 (例程开发) </title>
      <link>https://coldinfire.github.io/2018/SAP_VOFM/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_VOFM/</guid>
      <description>例程介绍 SAP ERP 实施中，经常会用到例程开发 (TCODE:VOFM)。这个开发目前我用到的是影响 SD 和 MM 的定价过程。创建例程需要 ACCESS KEY，这个可以通</description>
    </item>
    
    <item>
      <title> ABAP 定义Range </title>
      <link>https://coldinfire.github.io/2018/ABAP_Range/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Range/</guid>
      <description>Range使用 Range Table为SAP R/3系统标准内表的一种，结构与Selection Table一致，由SIGN,OPTION,LOW,HIG</description>
    </item>
    
    <item>
      <title>Smartforms Barcode</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_Barcode/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_Barcode/</guid>
      <description>Smartforms 打印条码 传统的：将数据发送到打印机上，由打印机将数据转换成 条码图案，然后进行打印。 在 SAP Smartforms 里实现条码打印。在客户机里安装 www.tec-it.com 里的插件 1.定义输</description>
    </item>
    
    <item>
      <title>负号前置</title>
      <link>https://coldinfire.github.io/2018/ABAP_Negative_sign_front/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Negative_sign_front/</guid>
      <description>负号前置 SAP 系统中，很多种情况下负号都是在数字后面，如果在显示或计算数据时需要将负号放到数字前面。 调用系统BAPI 可以使用 function module：CL</description>
    </item>
    
    <item>
      <title>ABAP 弹出框设置</title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_PopUpBox/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_PopUpBox/</guid>
      <description>可输入弹出框：POPUP_GET_VALUES_USER_HELP &amp;#34;输入表格，SVAL相应的字段信息决定显示的效果：&amp;#34; tabname = &amp;#39;AFKO&amp;#39;.</description>
    </item>
    
    <item>
      <title>物料单位转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_CONVERT_MATERIAL_UNIT/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_CONVERT_MATERIAL_UNIT/</guid>
      <description>MARM物料单位转换 CALL function &amp;#39;MD_CONVERT_MATERIAL_UNIT&amp;#39; exporting i_matnr = matnr i_in_me = in_me i_out_me = out_me i_menge = in_menge importing e_menge = out_menge exceptions error_in_application = 1 error = 2 others = 3. IF sy-subrc &amp;lt;&amp;gt; 0. MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4. ENDIF. 物料单位比例获取 DATA: h_denominator(100) TYPE n, h_numerator(100)</description>
    </item>
    
    <item>
      <title>开发常用Tcode汇总</title>
      <link>https://coldinfire.github.io/2018/ABAP_Tcode/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Tcode/</guid>
      <description>ABAP 常用 TCode TCode Description TCode Description SPRO 显示后勤 SE18 BADI Builder ST05/SE30 系统跟踪/系统性能详细跟踪 SE19 BADI Implement ST22 查看日志信息 SE24 创建、修改、查询类对象 SM12 编辑锁定解除 SE21 创建、修改、查询包的</description>
    </item>
    
    <item>
      <title>ALV 控制单元格不可编辑</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_EditControl/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_EditControl/</guid>
      <description>实现 ALV 单元格不可编辑 如果已经把ALV中的整列设为可编辑，而只想让这个列中的某些单元格不可编辑，可以使用以下这种方法。 具体单元格可编辑状态设置</description>
    </item>
    
    <item>
      <title> 修改文件所属 Package </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_PackageChange/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_PackageChange/</guid>
      <description>创建 ABAP 程序的时候都要选择一个 Package，当后续需要修改程序所属的Package时可以使用以下方法： 通过SE38或则SE80打开对应的程序</description>
    </item>
    
    <item>
      <title>Smartforms 强制分页打印</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_page2/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_page2/</guid>
      <description>强制分页注意事项： 如果是模板，强制分页命令要放在循环中 如果是表格，强制分页命令要放在表的主要区域循环中(main) 强制分页可以控制 Form 每页固定</description>
    </item>
    
    <item>
      <title>Smartform 循环打印，页码统计</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_LoopPrint/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_LoopPrint/</guid>
      <description>Smartforms 循环打印数据 在 smartform 的使用中，偶尔会遇到用户要求按某一条件进行数据的分组打印，并进行页码的统计和区分，这里记录下自己使用的方法。 FORM sub_data_print . SORT itab_total BY matkl</description>
    </item>
    
    <item>
      <title>Smartforms 分页打印</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_page1/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_page1/</guid>
      <description>Smartform 中的 table 节点插入分页 Command Node 在 smartforms 的 Loop 节点中可以插入一个 command node 用来强制分页，那么如何在 table 节点中插入分页的 command node 呢？这要利用到table节点的 sort event. 在 table 节</description>
    </item>
    
    <item>
      <title>Smartforms调用模板</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartfomrs_Demo/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartfomrs_Demo/</guid>
      <description>程序中使用 Smartform 模板 &amp;#34;SMARTFORMS变量定义&amp;#34; DATA: form_name TYPE tdsfname VALUE &amp;#39;ZZ_TEST&amp;#39;, &amp;#34;Smartforms Name&amp;#34; fm_name type rs38l_fnam, &amp;#34;Function Name&amp;#34; control type ssfctrlop, &amp;#34;Control structure&amp;#34; option type ssfcompop, &amp;#34;Smart Composer (transfer) options&amp;#34; ssfcrescl type ssfcrescl. &amp;#34;Return value at end of form printing&amp;#34; &amp;#3</description>
    </item>
    
    <item>
      <title>Smartforms 连续打印</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_Print/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_Print/</guid>
      <description>Smartforms 设置参数实现连续打印 调用 smartforms 时直接调用打印机打印，不出现打印预览窗口 DATA: fm_name TYPE rs38l_fnam. DATA: control_param TYPE ssfctrlop . DATA: composer_param TYPE ssfcompop . control_param-langu = sy-langu. control_param-no_open = &amp;#39;X&amp;#39;. control_param-no_close = &amp;#39;X&amp;#39;. control_param-no_dialog = &amp;#39;X&amp;#39;. &amp;#34; Not show dialog &amp;#34; composer_param-tddest = &amp;#39;LP01&amp;#39;. &amp;#34; Printer</description>
    </item>
    
    <item>
      <title>Smart forms统计打印次数</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_PrintTimes/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_PrintTimes/</guid>
      <description>打印次数的记录 通过参数控制和对调用 Smart forms 完成后返回的参数值，判断用户是否完成Form打印。 DATA: fm_name TYPE rs38l_fnam. DATA: control_param TYPE ssfctrlop . DATA: composer_param TYPE ssfcompop . DATA: output_info TYPE ssfcrescl. composer_param-tdiexit = &amp;#39;X&amp;#39;. &amp;#34; 预览打印</description>
    </item>
    
    <item>
      <title>Smartforms常见问题</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartforms_Utils/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartforms_Utils/</guid>
      <description>中文乱码问题 如果预览时中文正常，打印出来是乱码的情况，可以尝试在中文环境下重新维护并激活。再次打印应该可以解决。如果还有问题，则检查语言包是</description>
    </item>
    
    <item>
      <title>Smartforms</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartforms/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartforms/</guid>
      <description>Smartforms 使用 在 SAP 的 ABAP 编程中，一般开发过程都是在 Report 程序中取出所有需要的数据，将数据进行相应的处理以后保存到输出内表中，再打印内表中的数据。 但是 SmartForms 是一</description>
    </item>
    
    <item>
      <title>OO ALV 工具</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV_Util/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV_Util/</guid>
      <description>显示后，修改字段目录和布局 在运行期间，可以在首次显示列表后设置新的布局或新字段目录。 这些组件具有 get/set 方法来完成此操作。 Field Catalog GET_FRONTEND_FIELDCATALOG SET_FRONTEND_FIELDCATALOG Layout GET_FRONTEND_LAYOUT SET_FRONTEND_LAYOUT 代码示例 DATA</description>
    </item>
    
    <item>
      <title>OO ALV 事件管理</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV_Event/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV_Event/</guid>
      <description>ALV 对象注册事件 如果我们想处理 ALV Grid 实例触发的事件，我们应该定义并实现一个事件处理程序类。 创建 ALV Grid 实例后，我们必须注册此事件处理程序类的实例来处</description>
    </item>
    
    <item>
      <title>OO ALV 事件类工具</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV_EventUtils/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV_EventUtils/</guid>
      <description>为了更加方便的使用 cl_gui_alv_grid 的事件功能，将一些基本事件的定义和实现放到一个 inclue 中，Report 程序中包含就可以使用。 事件的方法实际功能需要定义对应的 F</description>
    </item>
    
    <item>
      <title> OOALV 不同Container </title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV_DiffContainers/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV_DiffContainers/</guid>
      <description>1.Custom container 自定义容器可以使用类 CL_GUI_CUSTOM_CONTAINER 创建，但它需要一个可以放置它的父容器，或者需要在自定义 Screen 中创建一个自定义控制区域。 这个解决方案是我现在开发的应用程</description>
    </item>
    
    <item>
      <title>OO ALV Demo</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV_Demo/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV_Demo/</guid>
      <description>OO ALV 简单实例 其中屏幕的创建， 和对应PAI、PBO 以及 Status title 等可以自定调整。 REPORT zoo_alv_demo. TYPE-POOLS: slis. *-- Global data Decleration. TYPES:BEGIN OF ty_output, ebeln TYPE ebeln, aedat TYPE erdat, ernam TYPE ernam, ebelp TYPE ebelp, matnr TYPE matnr, werks TYPE werks_d, menge TYPE bstmg, meins TYPE</description>
    </item>
    
    <item>
      <title>OO ALV 使用</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV_Basic/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV_Basic/</guid>
      <description>OO ALV ALV GRID CONTROL 使用了控制器技术以实现屏幕显示，和所有的控制器一样，ALV GRID CONTROL 通过系统中的一个全局的类提供了方法，以响应它的动作。 使用了 ABAP 的对象以</description>
    </item>
    
    <item>
      <title>报表开发&lt;常用工具&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Utils/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Utils/</guid>
      <description>单元格中的数据被修改后，将ALV单元格中的数据立即刷新到ABAP对应的内表中 方法一：通过对 REUSE_ALV_GRID_DISPLAY 函数参数 i_grid_settings-edt_cll_cb 进行设置 i_grid_settings-edt_cll_cb = &amp;#39;X&amp;#39; . CALL FUNCTION &amp;#39;REUSE_ALV_GRID_DISPLAY&amp;#39; EXPORTING i_grid_settings = i_grid_settings 方法二：</description>
    </item>
    
    <item>
      <title>ALV 屏幕其它功能设置</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Screen_Util/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Screen_Util/</guid>
      <description>屏幕内创建按钮 SELECTION-SCREEN: PUSHBUTTON [/n] &amp;lt;pos(len)&amp;gt; &amp;lt;name&amp;gt; USER-COMMAND &amp;lt;ucom&amp;gt; [MODIF ID &amp;lt;key&amp;gt;]. /n :按钮初始时距离屏幕左边的位置 &amp;lt;pos(len)&amp;gt;：PUSHBUTTON按钮在屏幕生成的位置</description>
    </item>
    
    <item>
      <title>Field Catalog 字段排坑</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Display_util/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Display_util/</guid>
      <description>原文链接：https://blog.csdn.net/zhongguomao/article/details/77774206 对于初写 ALV 的 A</description>
    </item>
    
    <item>
      <title> List ALV Demo </title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_LVCGridDemo/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_LVCGridDemo/</guid>
      <description>List ALV 程序实例 *&amp;amp;--------------------------------------- *&amp;amp; Report ZWR_PI_LOG *&amp;amp;--------------------------------------- REPORT zwr_pi_log. TABLES: lqua ,zpidoc. TYPE-POOLS: slis. DATA: lt_pidoc TYPE STANDARD TABLE OF zpidoc, ls_pidoc TYPE zpidoc . &amp;#34;ALV Data&amp;#34; DATA: gt_fieldcat TYPE lvc_t_fcat, gs_fieldcat TYPE lvc_s_fcat, gs_layout TYPE lvc_s_layo. &amp;#34;Select screen&amp;#34; SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN POSITION 1. PARAMETERS: p_chk1 RADIOBUTTON GROUP zr01 DEFAULT &amp;#39;X&amp;#39; USER-COMMAND zchg. SELECTION-SCREEN COMMENT 3(8) text-002 FOR FIELD p_chk1. SELECTION-SCREEN POSITION 12. PARAMETERS:</description>
    </item>
    
    <item>
      <title>报表开发&lt;ALV 显示设置&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Display/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Display/</guid>
      <description>ALV Display ALV 显示相关的 FM REUSE_ALV_LIST_DISPLAY：List 格式的 ALV 模式为固定格式，应用于较严格的标准报表。 REUSE_ALV_</description>
    </item>
    
    <item>
      <title>报表开发&lt;内表操作&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_InnerTable/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_InnerTable/</guid>
      <description>内表操作 SQL 语句的执行顺序 书写顺序：SELECT [DISTINCT]&amp;ndash;&amp;gt;FROM&amp;ndash;&amp;gt;WHERE&amp;ndash;&amp;gt;GROUP BY&amp;ndash;&amp;gt;HAVING&amp;ndash;&amp;gt;UNION&amp;ndash;&amp;gt;ORDER BY 其执行顺序为：FROM&amp;ndash;&amp;gt;WHERE&amp;ndash;&amp;gt;GROUP BY&amp;ndash;&amp;gt;HAVING&amp;ndash;&amp;gt;SELECT&amp;ndash;&amp;gt;DISTINCT&amp;ndash;&amp;gt;UNION-&amp;gt;ORDER</description>
    </item>
    
    <item>
      <title>报表开发&lt;屏幕设置&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Screen/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Screen/</guid>
      <description>选择屏幕 引用链接 屏幕触发事件 选择屏幕触发的是：AT SELECTION-SCREEN 对话屏幕触发的是：PAI 列表屏幕触发的是：AT USER-COMMAND SELECT-SCREEN SELECT-SCREEN 语句用于创建屏幕的框架结构，主要包括</description>
    </item>
    
    <item>
      <title>报表开发&lt;概述&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Basic/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Basic/</guid>
      <description>ALV (SAP List Viewer) 是 SAP 常用的屏幕显示列表控件对象，通过传递数据内表方式显示数据； ALV 显示格式分为 Grid 和 List 两种模式。 Grid 模式有栏位选择按钮功能，允许用户直接输</description>
    </item>
    
    <item>
      <title> ABAP 截取中文字符串 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_StrCNChina/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_StrCNChina/</guid>
      <description>截取包含中文字符串 strlen() 只能计算包含英文字符串的长度，不能计算中文字符串的长度。 可以通过cl_abap_list_utilities=&amp;gt;d</description>
    </item>
    
    <item>
      <title> ABAP 通过字段找表程序 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_FieldFindProgram/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_FieldFindProgram/</guid>
      <description>获取数据保存在哪个表 前台对指定栏位 使用 F1 帮助找表 ST05 跟踪业务操作过程，检索需要的数据表.（此方法找表很高效） 对于文本字段找表，可以找到前台维护</description>
    </item>
    
    <item>
      <title>ALV 显示红绿灯</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_TrafficLight/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_TrafficLight/</guid>
      <description>定义 TYPE-POOLS:icon,sym,slis,col. DATA: l_alv_filed TYPE slis_fieldcat_alv, l_alv_filedcat TYPE slis_t_fieldcat_alv. TYPES:BEGIN OF str_alv, id TYPE char25, xxx TYPE xxx, xxx TYPE xxx, xxx TYPE xxx, xxx TYPE string, END OF str_alv. DATA:it_alv TYPE STANDARD TABLE OF str_alv WITH HEADER LINE. CONSTANTS: c_green TYPE icon-id VALUE &amp;#39;@08@&amp;#39;, c_yellow TYPE icon-id VALUE &amp;#39;@09@&amp;#39;, c_red TYPE icon-id VALUE &amp;#39;@0A@&amp;#39;. 赋值 IF it_return-type = &amp;#39;E&amp;#39;. it_alv-id = c_red. CALL FUNCTION &amp;#39;BAPI_TRANSACTION_ROLLBACK&amp;#39;. ELSE. it_alv-id</description>
    </item>
    
    <item>
      <title>ALV添加复选框，并添加全选，不全选功能</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_CheckBox/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_CheckBox/</guid>
      <description>定义结构中定义该字段 DATA: BEGIN OF gt_print OCCURS 10, CHECKBOX TYPE flag, ...... DATA: END OF gt_print. FIELDCAT添加并定义CheckBox &amp;#34;$. Region ALV_Data&amp;#34; TYPE-POOLS:slis. DATA: alv_fieldcat TYPE STANDARD TABLE OF slis_fieldcat_alv WITH HEADER LINE, alv_layout TYPE slis_layout_alv. alv_fieldcat-fieldname = &amp;#39;CHECKBOX&amp;#39;. alv_fieldcat-scrtext_m = &amp;#39;Choose&amp;#39;. alv_fieldcat-checkbox =</description>
    </item>
    
    <item>
      <title>小数后面去除后缀0</title>
      <link>https://coldinfire.github.io/2018/ABAP_EndZero/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EndZero/</guid>
      <description>小数后面去除后缀 0 FORM DATA_DELETE_ZERO using p_field z_result. DATA: var1 TYPE p DECIMALS 3, var2 TYPE p DECIMALS 2, var3 TYPE p DECIMALS 1, var4 TYPE i. move p_field to var1. move p_field to var2. move p_field to var3. move p_field to var4. IF var2 = var1. IF var3 = var1. IF var4 = var1. z_result = var4. ELSE. z_result = var3. ENDIF. ELSE.</description>
    </item>
    
    <item>
      <title> 表维护添加修改人信息 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Table_MaintenanceAddUser/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table_MaintenanceAddUser/</guid>
      <description>添加修改人信息 可以根据TCode进行相应的判断： 创建人信息: l_wa_head-ernam = sy-uname. l_wa_head-erdat = sy-datum. l_wa_head-erzet = sy-uzeit. call function &amp;#39;TERMINAL_ID_GET&amp;#39; exporting username = sy-uname importing terminal = l_wa_head-eterminal exceptions multiple_terminal_id = 1 no_terminal_found = 2 others = 3. 修改人信息： l_wa_head-urnam = sy-uname. l_wa_head-urdat</description>
    </item>
    
    <item>
      <title>数据输入输出转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_Utils_DataConversion/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Utils_DataConversion/</guid>
      <description>输入输出转换 如果某个变量参照的数据所对应的Domain具有转换规则，在(Write,ALV,文本框显示)，最后结果会自动转换。 通过转换规则输</description>
    </item>
    
    <item>
      <title>ABAP 程序间调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_ProgramCall/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ProgramCall/</guid>
      <description>同步调用 同步调用的实质：程序进行单线程执行。 中断执行 调用程序被打断，当被调用程序执行完毕之后，调用程序继续执行。 CALL FUNCTION [function]. SUBMIT [program] AND RETURN. CALL TRANSACTION [TCode]. CALL FUNCTION [function] 使</description>
    </item>
    
    <item>
      <title>ABAP 性能优化(程序逻辑)</title>
      <link>https://coldinfire.github.io/2018/ABAP_ProgramOpt/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ProgramOpt/</guid>
      <description>性能分析工具 ​ SE30(旧)；SAT(新)：运行时间分析工具 ​ ST12：Single transaction analysis 程序优化 READ TABLE &amp;hellip;WITH [TABLE] KEY&amp;hellip;BINARY SEARCH读取标准内表使用二分查</description>
    </item>
    
    <item>
      <title>ABAP 性能优化(数据操作)</title>
      <link>https://coldinfire.github.io/2018/ABAP_SQL_DBOpt/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SQL_DBOpt/</guid>
      <description>性能分析工具 ST05：性能分析，追踪 SQL，分析哪条 SQL Statement 语句，最耗时间 STAD：得到某个程序或事务运行时的总体分析数据，系统时间，CPU 时间</description>
    </item>
    
    <item>
      <title>ABAP Message 处理</title>
      <link>https://coldinfire.github.io/2018/ABAP_Message/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Message/</guid>
      <description>MESSAGE ：SE91 消息存储的内表：T100/T100C/T100S/T100U/T160M T100：该表包括所有的消息 T100C：通常包括修改后的</description>
    </item>
    
    <item>
      <title>ABAP Native SQL</title>
      <link>https://coldinfire.github.io/2018/ABAP_SQL_NativeSQL/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SQL_NativeSQL/</guid>
      <description>EXEC SQL 和 ADBC 是所谓的 Native SQL，这种方式直接进入指定数据库，不涉及到 DBI，这样就没有 Table buffer。相对 EXEC SQL 来说，更推荐 ADBC 的方式执行 native sql，这</description>
    </item>
    
    <item>
      <title>ABAP Open SQL</title>
      <link>https://coldinfire.github.io/2018/ABAP_SQL_OpenSQL/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SQL_OpenSQL/</guid>
      <description>Open SQL ABAP可以通过两种方式与数据库交互 Native SQL：数据库自身的 SQL，可以直接访问数据库，不够安全。 Open SQL：集成到 ABAP 中的标准 SQL 子集，通过 SAP</description>
    </item>
    
    <item>
      <title>ABAP Form和Function</title>
      <link>https://coldinfire.github.io/2018/ABAP_SubRoutines/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SubRoutines/</guid>
      <description>全局变量，局部变量 局部变量：报表程序中选择屏幕事件块(AT SELECTION-SCREEN)、逻辑数据库事件块，以及methods、subr</description>
    </item>
    
    <item>
      <title>ABAP 内表使用</title>
      <link>https://coldinfire.github.io/2018/ABAP_InnerTable/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_InnerTable/</guid>
      <description>内表定义 工作区域 工作区域可以存放多个变量数据，相当于一维数组。 间接定义：通过 Type 定义结构类型，然后通过DATA赋值 TYPES: BEGIN OF str_order. aufnr TYPE afko-aufnr, dauat TYPE afpo-dauat, END OF str_order. &amp;#34;</description>
    </item>
    
    <item>
      <title>ABAP 数据表</title>
      <link>https://coldinfire.github.io/2018/ABAP_Table_Basic/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table_Basic/</guid>
      <description>SAP 数据表类型 透明表(Transparent table)： 和数据库具有相同结构的表存储结构，数据库中有一个相应得物理表。 簇表(Cluster t</description>
    </item>
    
    <item>
      <title>ABAP 数据类型</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis/</guid>
      <description>ABAP基本数据类型 基本数据类型 Type Description Type Description C Character text D Date(YYYYMMDD) N Numeric text(不能进行计算) T Time(HHMMSS) I Integer F Floating point P Packed(包类型:1-16) X 十六进制 常用</description>
    </item>
    
    <item>
      <title> ABAP 技能树 </title>
      <link>https://coldinfire.github.io/2018/ABAP_Goal_Setting/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Goal_Setting/</guid>
      <description>ABAP 学习 ABAP语法详解 全面掌握 SAP 的开发环境，ABAP 语法等基础知识。 报表开发全面总结 全面总结 SAP 系统中各种类型报表的实现方案和技术细节，开发者</description>
    </item>
    
  </channel>
</rss>
