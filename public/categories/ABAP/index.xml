<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ABAP on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/categories/ABAP/</link>
    <description>Recent content in ABAP on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://coldinfire.github.io/categories/ABAP/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LSMW操作步骤详解</title>
      <link>https://coldinfire.github.io/2020/SAP_LSMW_Details/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_LSMW_Details/</guid>
      <description>Step1:数据准备 数据准备一般使用 Excel 整理数据，并转换成标准文本。我们以创建物料主数据（事物代码 MM01）的基本视图为例。 物料主数据的基本视</description>
    </item>
    
    <item>
      <title>LSMW批处理使用方法</title>
      <link>https://coldinfire.github.io/2020/SAP_LSMW/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_LSMW/</guid>
      <description>参考链接：https://fenginfo.com/1821.html 总述 在 SAP 系统中，批处理操作有多种方法。如果是对一个事物码（TCODE）</description>
    </item>
    
    <item>
      <title> WebDynpro configuring Runtime Enviroment </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproRuntimeEnv/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproRuntimeEnv/</guid>
      <description>Remove User settings option ABAP Enviroment Method 1 Modify the WebDynpro Application and add the Parameter: ​ WDDISABLEUSERPERSONALIZATION = X. Method 2 Alternatively you can call the webdynpro application WD_GLOBAL_SETTING in SE80 and globally disable all user personalization for all applications. This avoids endusers from calling helpdesk because &amp;ldquo;fields are gone&amp;rdquo; etc. pretty well. JAVA Enviroment Procedure A number of settings allow you to influence the behavior of the Web</description>
    </item>
    
    <item>
      <title>ABAP 7.40 Quick Reference</title>
      <link>https://coldinfire.github.io/2020/ABAP_7.40_QuickReference/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_7.40_QuickReference/</guid>
      <description>Inline Declarations 注意@DATA(ITAB)语句的强大，有了它，我们在访问数据库的时候，直接写SELECT就好了，不需要构建各式各样的內表和表类型了。注意</description>
    </item>
    
    <item>
      <title>SAP DBCO连接测试</title>
      <link>https://coldinfire.github.io/2020/SAPDBCO_Connect/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPDBCO_Connect/</guid>
      <description>TCode: DBCO查看数据库连接信息 测试连通性 使用程序：ADBC_TEST_CONNECTION / 参考 ADBC* 输入Database connection name,进行连接测试</description>
    </item>
    
    <item>
      <title> SAP Adobe Form Demo </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP_Demo/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP_Demo/</guid>
      <description>Adobe Form调用 画好了对应的Form格式与数据绑定，就可以在Report程序中通过具体代码进行调用了。 SFPOUTPUTPARAMS 参数介绍 nodialog: 是否弹出打印对话框 noprint: 不打印，</description>
    </item>
    
    <item>
      <title> SAP Adobe Form </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP/</guid>
      <description>Adobe Form 介绍 SAP中关于Form的设计有三种工具：Script Form，Smart Form和Adobe Form. 要在SAP系统中展示Adobe Form需</description>
    </item>
    
    <item>
      <title> 透明表删除Key值后激活 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</guid>
      <description>​ 当业务场景发生变化，或则其它原因需要变更透明表的Key值时，保存和激活时会报错，需要使用SE14进行处理。 勾选Direct,Save Dat</description>
    </item>
    
    <item>
      <title>SAP Cost Center</title>
      <link>https://coldinfire.github.io/2020/SAPCostCenter/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPCostCenter/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OLE下载数据到EXCEL模板及速度优化</title>
      <link>https://coldinfire.github.io/2020/ABAP_OLEtoExcel/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_OLEtoExcel/</guid>
      <description>引用链接：OLE 下载数据到EXCEL模板及速度优化 问题描述: 当项目中对导出数据EXCEL模板有要求时，ALV标准导出功能不能满足需要开发人员</description>
    </item>
    
    <item>
      <title>SAP Authorization table</title>
      <link>https://coldinfire.github.io/2020/SAPAuthorizationTable/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPAuthorizationTable/</guid>
      <description>相关权限分配的Table Table Desc Table Decs AGR_1016 活动组参数文件名称 AGR_FLAGS 角色属性 AGR_1016B 活动组参数文件名称 AGR_FLAGSB 角色属性 AGR_1250 活动组的权限数据 AGR_HIER 菜单结构信息表 AGR_1251 活动组的权限</description>
    </item>
    
    <item>
      <title>移动平均价和标准价</title>
      <link>https://coldinfire.github.io/2020/MM_StandardPrice/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_StandardPrice/</guid>
      <description>引用链接：移动平均价和标准价 移动平均价和标准价的概念 标准价： ​ 以一个标准的价格表示一个物料在一段时间内的价值，简称S。来源于实际成本估算。用</description>
    </item>
    
    <item>
      <title>ALV复制内容到剪贴板</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_COPYPASE/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_COPYPASE/</guid>
      <description>引用链接：ALV复制内容到剪贴板 用在ALV的USER_COMMAND里面 复制ALV内容到剪贴板，已经考虑了ALV的列隐藏、筛选，负号已经提前</description>
    </item>
    
    <item>
      <title>ALV添加执行进度功能</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALVProgress/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALVProgress/</guid>
      <description>为了更加清晰的了解到程序执行进度，可以在程序中添加显示进度条功能。 DATA:BEGIN OF gt_result OCCURS 0, sel(1), matnr TYPE mara-matnr, zz_edi_grp TYPE mara-zz_edi_grp, werks TYPE mseg-werks, eknam TYPE eknam, maktx TYPE maktx, num TYPE sy-tabix, row TYPE sy-tabix, icon TYPE icon-id, mess TYPE string, flag(1), END OF gt_result.</description>
    </item>
    
    <item>
      <title>ABAP BTE增强使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_BTE/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BTE/</guid>
      <description>BTE概念 BTE(Business Transaction Events)：BTE是SAP中可用的增强技术之一，通常使用在财务会计模块,可由 SAP，第三方供应商（合作伙伴）和客户使用。S</description>
    </item>
    
    <item>
      <title> CS12 ALV的增强 </title>
      <link>https://coldinfire.github.io/2019/ABAP_BOM_Enhance/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BOM_Enhance/</guid>
      <description>Tcode：CS12的执行程序查看 可以看到，最终执行的程序是RCS12001，因此可以在该程序中查找增强。 执行的程序： RCS11001 Display BOM Level by Level RCS12001 Display Multilevel BOM RCS13001</description>
    </item>
    
    <item>
      <title>SAP JCO连接</title>
      <link>https://coldinfire.github.io/2019/SAP_JCO/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_JCO/</guid>
      <description>SAP JCO简介 ​ 为了在R/3系统和JAVA平台之间进行实时的交换数据。SAP提供了一套高效的基于RFC的ABAP和JAVA进程间通讯组件：SA</description>
    </item>
    
    <item>
      <title>ABAP 科学计数法问题</title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberQAS/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberQAS/</guid>
      <description>科学计数法转换数字 ​ ABAP 函数 QSS0_FLTP_TO_CHAR_CONVERSION，能将 SAP 系统内的科学计数法显示的数字转换成一般数字。 DATA: l_result TYPE</description>
    </item>
    
    <item>
      <title>SO10创建标准文本</title>
      <link>https://coldinfire.github.io/2019/ABAP_SO10/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SO10/</guid>
      <description>通过 Tcode SO10 可以创建标准文本： 通过占位符替换长文本： DATA lv_name TYPE thead-tdname. DATA lv_langu LIKE sy-langu VALUE &amp;#39;EN&amp;#39;. DATA lt_line TYPE STANDARD TABLE OF tline WITH HEADER LINE. DATA lv_count TYPE i. lv_name = &amp;#39;Z_TEST&amp;#39;. &amp;#34; Read text from SO10 &amp;#34; CALL FUNCTION &amp;#39;READ_TEXT&amp;#39; EXPORTING client = sy-mandt id = &amp;#39;ST&amp;#39; language = lv_langu</description>
    </item>
    
    <item>
      <title> ABAP 搜索帮助 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SearchHelp/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SearchHelp/</guid>
      <description>使用搜索帮助对象 1、在命令字段中输入事务代码作为 SE11。 2、选择搜索帮助单选按钮，然后输入自定义搜索帮助的名称。然后点击创建按钮。 3、在下</description>
    </item>
    
    <item>
      <title> ABAP Dynnamic Programer</title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</guid>
      <description>利用Field Symbols和数据参考的实例： *&amp;amp;-------------------------------------------------------------------- *&amp;amp; Report ZZSM_TEST_DYN *&amp;amp;-------------------------------------------------------------------- REPORT zzsm_test_dyn. DATA: tab_reference TYPE REF TO data, struc_reference TYPE REF TO data. DATA: descr TYPE REF TO cl_abap_structdescr. FIELD-SYMBOLS: &amp;lt;struc&amp;gt; TYPE ANY, &amp;lt;field&amp;gt; TYPE ANY, &amp;lt;itab&amp;gt; TYPE ANY TABLE. PARAMETERS: p_table(20) DEFAULT &amp;#39;LFA1&amp;#39; OBLIGATORY, p_rows TYPE i OBLIGATORY. TRY . &amp;#34;Dynamic</description>
    </item>
    
    <item>
      <title>IDoc操作</title>
      <link>https://coldinfire.github.io/2019/ABAP_IDoc/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_IDoc/</guid>
      <description>参考链接 IDoc 1.IDoc简介 IDoc:是基于文档，用作异步传输数据的载体，类似于XML;使用功能场景：假设 1040 和 1020 是同一个集团下两个不同子公司的</description>
    </item>
    
    <item>
      <title>ABAP字符串处理</title>
      <link>https://coldinfire.github.io/2019/ABAP_String/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_String/</guid>
      <description>​ 字符串的处理在程序中的使用十分常见，在这里结合自己日常的使用对ABAP的字符串常用操作进行总结，以便后续使用。 1.获取字符串长度 var1 = str</description>
    </item>
    
    <item>
      <title>Long Texts</title>
      <link>https://coldinfire.github.io/2019/ABAP_LongTexts/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_LongTexts/</guid>
      <description>介绍 长文本是用于在 SAP 系统中包含长文本的容器，通常将它们附加到业务对象上，用户可以输入自由注释。 长文本只能通过与其相连的业务对象的维护事务来维</description>
    </item>
    
    <item>
      <title>SQVI-创建一张简易的报表</title>
      <link>https://coldinfire.github.io/2019/ABAP_ALV_SQVI/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALV_SQVI/</guid>
      <description>SAP提供的SQVI功能，用以快速自定义一个自己需要的报表。 创建，并选择数据源为：表连接 插入需要查数的表 接着将表的主键进行连接 点击返回按钮，</description>
    </item>
    
    <item>
      <title>ABAP混合算术运算</title>
      <link>https://coldinfire.github.io/2019/ABAP_MixedCalculate/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_MixedCalculate/</guid>
      <description>使用 ​ 在ABAP程序中将数值与表达式分别存放，通过表达式计算对应的结果。 一、调用BAPI：EVAL_FORMULA TYPES:BEGIN OF TY_VAL, OPERAND TYPE C, VALUE TYPE STRING, END OF TY_VAL. TYPES:BEGIN</description>
    </item>
    
    <item>
      <title>递归遍历成本中心组</title>
      <link>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</guid>
      <description>成本中心组下嵌套成本中心组 ​ 成本中心后台数据表是 CSKS，描述表是 CSKT。在表 CSKS 中，主键是 MANDT（客户端）、KOKRS（控制范围）、K</description>
    </item>
    
    <item>
      <title> 维护成本控制凭证的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</guid>
      <description>介绍 此项配置是在后台为指定的成本控制范围（Controlling Area）维护编号范围，用于成本控制中的各类凭证。这是一种组织机构分组类的编</description>
    </item>
    
    <item>
      <title> 维护会计凭证号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</guid>
      <description>简介 在一个公司代码（Company Code）生成一张会计凭证（Accounting Document）之前，必须在对凭证类型设置一个号码范围。</description>
    </item>
    
    <item>
      <title> 维护物料主数据的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</guid>
      <description>简介 此项操作是在 SAP 系统后台，为需要使用的物料类型设定编号范围。它的操作是针对整个 Client 的。首先维护不重复的号码组，每组可包含内部段和外部段（两者</description>
    </item>
    
    <item>
      <title> 维护客户号码范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</guid>
      <description>简介 定义并分配客户主数据的号码范围，分为两个步骤，两步操作的对象都针对整个 Client。 定义号码范围（Define Number Ranges for Customer Master） 分配</description>
    </item>
    
    <item>
      <title> SAP Number Range Object </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRange/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRange/</guid>
      <description>操作说明 在 SAP 系统中，各类主数据及单据都需要使用编号进行唯一性标识，以此形成后台有着大量编号范围维护的配置操作，种类繁多。 编号范围维护分为两部</description>
    </item>
    
    <item>
      <title>SAP 异常处理</title>
      <link>https://coldinfire.github.io/2019/ABAP_TryCatch/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_TryCatch/</guid>
      <description>SAP 异常处理 异常是在程序执行期间出现的问题。 当异常发生时，程序的正常流程中断，程序应用程序异常终止，这是不推荐的，因此这些异常将被处理。 异常处</description>
    </item>
    
    <item>
      <title> ALV Tree标准Demo </title>
      <link>https://coldinfire.github.io/2019/ABAP_ALVTree/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALVTree/</guid>
      <description>Demo列表 BCALV_TREE_01 ALV 树控制：构建层次树 BCALV_TREE_02 ALV 树控制：事件处理 BCALV_TREE_03 ALV 树控制：使用自己的上下文菜单 BCALV_TREE_04 ALV 树控制：添加按钮到工具栏 BCALV_TREE_05 ALV 树控制：添加菜单到工具</description>
    </item>
    
    <item>
      <title>BAPI使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_BAPI/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BAPI/</guid>
      <description>BAPI：Business Application Process Interface(业务应用编辑接口)，它实质上就是一种特殊的RFC函数。 BAPI函数及函数参数参考的结构类型</description>
    </item>
    
    <item>
      <title> ABAP学习网站记录 </title>
      <link>https://coldinfire.github.io/2019/ABAP_WebSiteCollect/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_WebSiteCollect/</guid>
      <description>http://www.saptechnical.com/index.htm：需要检索关键信息 https://sapcodes.com/：包含</description>
    </item>
    
    <item>
      <title> SALV CheckBox设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVCheckBox/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVCheckBox/</guid>
      <description>添加复选框功能 ​ 要获得可选（可编辑）复选框，我们需要从 column 对象中获取特定的列。此后，我们需要使用方法 SET_CELL_TYPE 将单元格类型设置为 IF_SALV_C_CELL_TYPE =&amp;gt; CHECKBOX_</description>
    </item>
    
    <item>
      <title> SALV Color设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVColor/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVColor/</guid>
      <description>ALV颜色设置 整行：在记录中在需要设置COLOR的数据中添加详细信息 整列：从COLUMNS获得对应的列，设置特定列的颜色 单元格：在每条记录的</description>
    </item>
    
    <item>
      <title> SALV Display设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVDisplaySet/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVDisplaySet/</guid>
      <description>Display设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_display_setting CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_display_setting CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_display_setting. DATA: lo_display TYPE REF TO cl_salv_display_settings. *Get display object lo_display = co_alv-&amp;gt;get_display_settings( ). *Set ZEBRA pattern lo_display-&amp;gt;set_striped_pattern( &amp;#39;X&amp;#39; ). *Title to ALV lo_display-&amp;gt;set_list_header( &amp;#39;ALV Test for Display</description>
    </item>
    
    <item>
      <title> SALV Event处理 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVEvent/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVEvent/</guid>
      <description>Event 处理 CLASS lcl_event_handler DEFINITION. PUBLIC SECTION. METHODS: on_link_click FOR EVENT link_click OF cl_salv_events_table IMPORTING row column. ENDCLASS. &amp;#34;lcl_event_handler DEFINITION&amp;#34; *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD generate_output. DATA: lx_msg TYPE REF TO cx_salv_msg. TRY. cl_salv_table=&amp;gt;factory( IMPORTING r_salv_table = o_alv CHANGING t_table = t_vbak ). CATCH cx_salv_msg INTO lx_msg. ENDTRY. *Get the event object DATA: lo_events TYPE REF TO cl_salv_events_table. lo_events = o_alv-&amp;gt;get_event( ). *Instantiate the event handler object DATA: lo_event_handler TYPE</description>
    </item>
    
    <item>
      <title> SALV Fieldcat设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVColumnSet/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVColumnSet/</guid>
      <description>Fieldcat设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. *Set the various column properties METHODS: set_columns CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Setting up the Columns CALL METHOD me-&amp;gt;set_columns CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_columns. *Get all the Columns DATA: lo_cols TYPE REF TO cl_salv_columns. lo_cols = o_alv-&amp;gt;get_columns( ). *set the Column</description>
    </item>
    
    <item>
      <title> SALV Filter设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVFilter/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVFilter/</guid>
      <description>过滤设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_filters CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Set Filters CALL METHOD set_filters CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_filters. DATA: lo_filters TYPE REF TO cl_salv_filters. lo_filters = co_alv-&amp;gt;get_filters( ). *Set the filter for the column ERDAT the filter criteria works exactly same as any *RANGE or SELECT-OPTIONS works. TRY.</description>
    </item>
    
    <item>
      <title> SALV Layout设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVLayout/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVLayout/</guid>
      <description>Layout设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_layout CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_layout CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_layout. DATA: lo_layout TYPE REF TO cl_salv_layout, lf_variant TYPE slis_vari, ls_key TYPE salv_s_layout_key. *Get layout object lo_layout = co_alv-&amp;gt;get_layout( ). *Set Layout save restriction * 1. Set Layout Key</description>
    </item>
    
    <item>
      <title> SALV Sorts设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVSorts/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVSorts/</guid>
      <description>Sorts设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_sorts CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* * Set SORT CALL METHOD set_sorts CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_sorts. DATA: lo_sort TYPE REF TO cl_salv_sorts. *Get Sort object lo_sort = co_alv-&amp;gt;get_sorts( ). *Set the SORT on the AUART with Subtotal TRY. CALL METHOD lo_sort-&amp;gt;add_sort EXPORTING</description>
    </item>
    
    <item>
      <title> SALV Status设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVStatus/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVStatus/</guid>
      <description>设置Status *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_pf_status CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_pf_status CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_pf_status. DATA: lo_functions TYPE REF TO cl_salv_functions_list. lo_functions = co_alv-&amp;gt;get_functions( ). lo_functions-&amp;gt;set_default( abap_true ). &amp;#34;lo_functions-&amp;gt;set_all( abap_true ).&amp;#34; ENDMETHOD. &amp;#34;set_pf_status&amp;#34; *$*$*.....CODE_ADD_3 - End....................................3..*$*$* 自定义Stat</description>
    </item>
    
    <item>
      <title> SALV 图标设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVIConsTooltips/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVIConsTooltips/</guid>
      <description>图标设置 为了能够在 SALV 上添加 ICON 和工具提示，需要： 列值作为 ICON 值– 在输出表中，需要添加 ICON 作为值。这样就可以将 ICON_GREEN_LIGHT 用作交通绿灯 将 SALV 的 ICON 列设置为 ICON – 从 SALV</description>
    </item>
    
    <item>
      <title> SALV 汇总设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVColumnSum/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVColumnSum/</guid>
      <description>Apply Aggregations *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_aggregations CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_aggregations CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_aggregations. DATA: lo_aggrs TYPE REF TO cl_salv_aggregations. lo_aggrs = co_alv-&amp;gt;get_aggregations( ). *Add TOTAL for COLUMN NETWR TRY. CALL METHOD lo_aggrs-&amp;gt;add_aggregation EXPORTING columnname = &amp;#39;NETWR&amp;#39; aggregation = if_salv_c_aggregation=&amp;gt;total. CATCH cx_salv_data_error . &amp;#34;#EC NO_HANDLER&amp;#34; CATCH cx_salv_not_found .</description>
    </item>
    
    <item>
      <title> SALV 页头和页尾设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVPageTopEnd/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVPageTopEnd/</guid>
      <description>添加页头(Top of page)和页脚(End of page) *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. *Set Top of page METHODS: set_top_of_page CHANGING co_alv TYPE REF TO cl_salv_table. *Set End of page METHODS: set_end_of_page CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Calling the top of page method CALL METHOD me-&amp;gt;set_top_of_page CHANGING co_alv =</description>
    </item>
    
    <item>
      <title> SALV创建ALV </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVCreate/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVCreate/</guid>
      <description>创建和显示 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; This code snippet will show how to use the CL_SALV_TABLE to *&amp;amp; generate the ALV *&amp;amp;---------------------------------------------------------------------* REPORT ztest_oo_alv_main. *----------------------------------------------------------------------* * CLASS lcl_report DEFINITION *----------------------------------------------------------------------* CLASS lcl_report DEFINITION. PUBLIC SECTION. * Final output table TYPES: BEGIN OF ty_vbak, vbeln TYPE vbak-vbeln, erdat TYPE erdat, auart TYPE auart, kunnr TYPE kunnr, netwr TYPE netwr, check TYPE flag, &amp;#34;复选框</description>
    </item>
    
    <item>
      <title> 使用SALV功能创建ALV </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV/</guid>
      <description>引用自：https://www.cnblogs.com/jiangzhengjun/p/4291387.html 简介 SALV 可以像使用函数方式生成</description>
    </item>
    
    <item>
      <title>SAP 进销存难点分析及对策</title>
      <link>https://coldinfire.github.io/2019/MM_Invoicing/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Invoicing/</guid>
      <description>引用链接：https://blog.csdn.net/wbin9752/article/details/8608765#comments_2</description>
    </item>
    
    <item>
      <title>BOM了解</title>
      <link>https://coldinfire.github.io/2019/SAP_BOM/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_BOM/</guid>
      <description>BOM定义 ​ BOM:物料清单，是部件完整、正式的结构化清单，组成一个产品或装配。包括每个部件的项目号、损耗、数量和计量单位。</description>
    </item>
    
    <item>
      <title> 发送带文本的Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailText/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailText/</guid>
      <description>程序：转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z14841_TEST010 *&amp;amp;---------------------------------------------------------------------* REPORT z14841_test010. TYPES: BEGIN OF stru_master, kunnr TYPE kunnr, &amp;#34; 客户编号 1&amp;#34; bukrs TYPE bukrs, &amp;#34; 公司代码&amp;#34; pro_mill TYPE werks_d, &amp;#34; 工厂&amp;#34; *quota TYPE zcdfquota, &amp;#34; 额度&amp;#34; *account TYPE char10, &amp;#34; 帐期&amp;#3</description>
    </item>
    
    <item>
      <title> 发送带附件(Excel)的Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailExcel/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailExcel/</guid>
      <description>程序：转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z7258_MAIL_EXCEL * *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Example of sending external email via SAPCONNECT * *&amp;amp;---------------------------------------------------------------------* REPORT z7258_mail_excel . TABLES: ekko. PARAMETERS: p_email TYPE somlreci1-receiverDEFAULT &amp;#39;jszjghw@163.com&amp;#39;. TYPES: BEGIN OF t_ekpo, ebeln TYPE ekpo-ebeln, ebelp TYPE ekpo-ebelp, aedat TYPE ekpo-aedat, matnr TYPE ekpo-matnr, END OF t_ekpo. DATA: it_ekpo TYPE STANDARD TABLE OF t_ekpo INITIAL SIZE 0, wa_ekpo TYPE t_ekpo. TYPES: BEGIN OF t_charekpo, ebeln(10) TYPE</description>
    </item>
    
    <item>
      <title>移库产生的报错</title>
      <link>https://coldinfire.github.io/2019/WM_Q1/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/WM_Q1/</guid>
      <description>Q：当进行移库操作时，同一个程序中执行多次移库动作会产生Error Message:No status object is available for HU XXXXXX(Error BS001 when posting goods movment)? A：需要每次进行移库前刷新数据： 调用BAPI进行</description>
    </item>
    
    <item>
      <title> SAP下载程序源码工具 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</guid>
      <description>程序：转自 http://blog.sina.com.cn/s/blog_4d1570de0100pvhd.html *@---------------------------------------------------------------------* *@ Report ZZXUE01 下载程序代码 *@ T-code *@---------------------------------------------------------------------* *@ Created by Xavery Hsueh on 2011-03-01 *@ Lasted Edited date: *@---------------------------------------------------------------------* &amp;#34;REPORT XXX NO STANDARD PAGE HEADING.&amp;#34; *********************************************************************** ** 声明数据库表 *********************************************************************** TABLES:rs38m, trdir. *********************************************************************** ** 内表结构类型的定义 *********************************************************************** DATA BEGIN OF dynpfields OCCURS 1. INCLUDE STRUCTURE dynpread. DATA</description>
    </item>
    
    <item>
      <title> SAP发送邮件 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SendEmail/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SendEmail/</guid>
      <description>SAP 发送邮件程序代码 TRY. &amp;#34; 创建发送请求 &amp;#34; l_send_request = cl_bcs=&amp;gt;create_persistent( ). &amp;#34; 设定发送内容 &amp;#34; l_document = cl_document_bcs=&amp;gt;create_document( i_type = &amp;#39;RAW&amp;#39; i_text = i_content[] I_IMPORTANCE = &amp;#39;1&amp;#39; i_subject = l_subject ). &amp;#34; 增加发送内容到发送请求 &amp;#34; CALL METHOD l_send_request-&amp;gt;set_document( l_document ). &amp;#34; 取得发送者</description>
    </item>
    
    <item>
      <title>SAP后台JOB</title>
      <link>https://coldinfire.github.io/2019/ABAP_JOB/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_JOB/</guid>
      <description>定义后台 job 第一种：SE38执行可执行程序 菜单栏‘program’&amp;mdash;&amp;gt;&#39;Execute in Background&amp;rsquo; 输入输出设备 选择开始时间（立刻执行</description>
    </item>
    
    <item>
      <title>SAP memory使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_Memory/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Memory/</guid>
      <description>SAP memory和ABAP memory 使用的语句不同 SAP memory使用SET/GET parameters SPA：SET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD p_matnr. GPA：GET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD p_matnr. ABAP Memory使用</description>
    </item>
    
    <item>
      <title>ABAP DOI使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_DOI/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DOI/</guid>
      <description>概述 DOI（Desktop office Integration）采用OO的思想实现与Office的结合使用。 可以先上传模板到服务器(OAOR)，然后对模</description>
    </item>
    
    <item>
      <title>STVARV使用详情</title>
      <link>https://coldinfire.github.io/2019/ABAP_Variant/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Variant/</guid>
      <description>STVARV使用 ​ 该配置不能跨Client因此需要在每个Client单独配置；使用TCode：stvarv进入配置界面，可以新建、修改、删除</description>
    </item>
    
    <item>
      <title>ABAP Submit 实现程序间互相调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_Submit/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Submit/</guid>
      <description>ABAP 代码中通过Submit实现程序的调用以及调用时数据参数的传递. 将要被调用的Report: ZTEST_SUBMIT1 REPORT ZTEST_SUBMIT1. DATA: lv_matnr TYPE matnr. DATA: lv_charg TYPE charg. SELECT-OPTIONS: s1_matnr FOR matnr, s1_lgort FOR lgort. START-OF-SELECTION. DATA: lv_line TYPE i. lv_line =</description>
    </item>
    
    <item>
      <title>Smartforms打印成PDF</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartfomrs_PDF/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartfomrs_PDF/</guid>
      <description>1.程序中使用Smartform模板 &amp;#34;SMARTFORMS变量定义&amp;#34; DATA: lv_form_name TYPE tdsfname VALUE &amp;#39;ZZ_TEST&amp;#39;, &amp;#34;Smartforms Name&amp;#34; lv_fm_name type rs38l_fnam, &amp;#34;Function Name&amp;#34; ls_control type ssfctrlop, &amp;#34;Control structure&amp;#34; ls_option type ssfcompop, &amp;#34;Smart Composer (transfer) options&amp;#34; ls_ssfcrescl type ssfcrescl.</description>
    </item>
    
    <item>
      <title>BOM展开</title>
      <link>https://coldinfire.github.io/2018/ABAP_BOM_USE/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BOM_USE/</guid>
      <description>SAP BOM读取逻辑 相关表 MAST：Material BOM STKO : BOM Header STPO : BOM Positions (detail) MAPL : Assignment fo Task Lists to Materials PLKO : Routing Group Header PLSO : Routing Group Sequence PLPO : Routing Group Operations AFKO : Production Order Header AFPO : Production Order Position (details) 可用</description>
    </item>
    
    <item>
      <title>ABAP 工作流</title>
      <link>https://coldinfire.github.io/2018/ABAP_WorkFlow/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_WorkFlow/</guid>
      <description>SAP工作流介绍 工作流是一个基于某组程序规则所采用的路径。是自动运作的任务的进程中，参与的人、文件、信息或任务，以及各个要素间的传递按照规程</description>
    </item>
    
    <item>
      <title>Excel操作</title>
      <link>https://coldinfire.github.io/2018/ABAP_Excel/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Excel/</guid>
      <description>SAP Excel模板操作 上传模板：文档是通过SMW0上传的。 选择模板类型 根据Package和Name查找模板 编辑模板 创建模板，维护名称和描述后从</description>
    </item>
    
    <item>
      <title> ALV tree显示BOM结构 </title>
      <link>https://coldinfire.github.io/2018/SAP_BOM_Tree/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_BOM_Tree/</guid>
      <description>实例代码 REPORT z_barry_alv_tree1_bom MESSAGE-ID oo. TABLES: stpox. INCLUDE &amp;lt;icon&amp;gt;. CLASS: cl_gui_column_tree DEFINITION LOAD, cl_gui_cfw DEFINITION LOAD . DATA: tree1 TYPE REF TO cl_gui_alv_tree , mr_toolbar TYPE REF TO cl_gui_toolbar . DATA: gs_stpox TYPE stpox, gt_stpox TYPE stpox OCCURS 0, gt_fieldcatalog TYPE lvc_t_fcat, gt_item_layout TYPE lvc_t_laci, gs_item_layout TYPE lvc_s_laci, okcode LIKE sy-ucomm . TYPES: BEGIN OF gs_f. INCLUDE STRUCTURE stpox. TYPES: node_key TYPE lvc_nkey, END OF gs_f. DATA:</description>
    </item>
    
    <item>
      <title> Web Dynpro在Portal上传输 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_Transfer/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_Transfer/</guid>
      <description>当在Portal测试环境测试通过后，需要将其从测试环境搬到正式环境. Download from QAS system Open Transport package export Editor 选择System Administration,然后选择</description>
    </item>
    
    <item>
      <title> 将开发好的Web Dynpro 挂载到Portal上 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_PortalConfig/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_PortalConfig/</guid>
      <description>Web dynpro create role 在浏览器中登陆Portal，选择Content Administration页签，然后选择Portal Content 下面需要使用的文件夹。 选择文件</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:ALV_VIEW-Function </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P4/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P4/</guid>
      <description>程序实例 METHOD ONACTIONPRINT . DATA lo_api_controller TYPE REF TO if_wd_controller. DATA lo_message_manager TYPE REF TO if_wd_message_manager. DATA: LT_EKPO TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO TYPE ZEKPO_asn, LT_EKPO_SUM TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO_SUM TYPE ZEKPO_asn, LT_EKPO_SUM_TMP TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO_SUM_TMP TYPE ZEKPO_asn. DATA lo_lips TYPE REF TO if_wd_context_node. data: lt_lips TYPE TABLE OF ZSLIPSASN, ls_lips TYPE ZSLIPSASN, lt_lips_tmp TYPE TABLE OF ZSLIPSASN, ls_lips_tmp TYPE ZSLIPSASN.</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:ALV_VIEW-WDDOINIT </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P1/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P1/</guid>
      <description>ALV_VIEW: WDDOINIT method WDDOINIT . *1.数据定义 *========================================================= DATA: lo_alv_usage TYPE REF TO if_wd_component_usage, &amp;#34;①重要的下面要用&amp;#34; lo_if_controller TYPE REF TO iwci_salv_wd_table, &amp;#34;②重要的下面要用&amp;#34; lo_config TYPE REF TO cl_sal</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:DATA_LOAD </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P2/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P2/</guid>
      <description>Component Controller: DATA_LOAD method DATA_LOAD . &amp;#34; ALV 输出的结构定义 &amp;#34; DATA: lt_ZALV_ZPEFF_TOTAL TYPE TABLE OF ZALV_ZPEFF_TOTAL, ls_ZALV_ZPEFF_TOTAL TYPE ZALV_ZPEFF_TOTAL, lt_ZALV_PROD_EFF TYPE TABLE OF ZALV_PROD_EFF, ls_ZALV_PROD_EFF TYPE ZALV_PROD_EFF, lo_node TYPE REF TO if_wd_context_node. &amp;#34; 选择屏幕数据的单属性定义 &amp;#34; DATA: lo_nd_zoption TYPE REF TO if_wd_context_node, lo_el_zoption TYPE REF TO if_wd_context_element, ls_zoption TYPE wd_this-&amp;gt;element_zoption, lv_p_total TYPE wd_this-&amp;gt;element_zoption-p_total, lv_p_detail</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:WDDOINIT </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P3/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P3/</guid>
      <description>Component Controller: WDDOINIT method WDDOINIT . TYPES:BEGIN OF soption, typename TYPE string, &amp;#34; Selection screen field ref type element &amp;#34; id TYPE string, &amp;#34; selection screen field name &amp;#34; END OF soption. DATA: l_alv_cmp_usage TYPE REF TO if_wd_component_usage, l_alvctrl TYPE REF TO iwci_salv_wd_table, l_alvmodel TYPE REF TO cl_salv_wd_config_table, l_it_range_table TYPE REF TO data, l_read_only TYPE abap_bool, l_soption_cmp_usage TYPE REF TO if_wd_component_usage, l_alvcolset TYPE REF TO if_salv_wd_column_settings, l_column TYPE REF TO</description>
    </item>
    
    <item>
      <title> 创建一个Web Dynpro ABAP程序实例 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP/</guid>
      <description>准备数据 ​ SAP Web Dynpro 一般都是采用调用ERP接口方式获取业务数据，因此输入，输出参数等结构都需要和ERP系统中接口的内容保持一致。在ERP系统中找</description>
    </item>
    
    <item>
      <title> WebDynpro for JAVA </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproJAVA/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproJAVA/</guid>
      <description>简介 Web Dynpro 在业务应用程序的主要结构和视觉设计部分的方式，在很大程度上是独立于实现语言. 一个Web Dynpro 组件不是一个JAVA类，而是一系列类集合所有</description>
    </item>
    
    <item>
      <title>BAPI总结列表</title>
      <link>https://coldinfire.github.io/2018/ABAP_BAPI_SUM/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BAPI_SUM/</guid>
      <description>本文主要记录一些收集来的BAPI,在SE38环境下的程序名输入栏输入&amp;rsquo;DEMO*&amp;lsquo;后按F4，你可以查到SAP所有的D</description>
    </item>
    
    <item>
      <title>RFC外部调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_RFC/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_RFC/</guid>
      <description>RFC 什么是 RFC ​ RFC 是 SAP 系统和其他（SAP 或非 SAP）系统间的一个重要而常用的双向接口技术，也被视为 SAP 与外部通信的基本协议。简单地说，RFC 过程就</description>
    </item>
    
    <item>
      <title> SM30表维护 </title>
      <link>https://coldinfire.github.io/2018/ABAP_SM30/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SM30/</guid>
      <description>表维护创建 创建自定义表 需要设置为 Display/Maintenance Allowed.允许修改，才可以在SM30中进行数据维护。否则会产生以下异常： 创建表维护 权限组：控制访问权</description>
    </item>
    
    <item>
      <title>BDC屏幕录制</title>
      <link>https://coldinfire.github.io/2018/ABAP_BDC/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BDC/</guid>
      <description>定义BDC (Batch Data Communication) BDC：SAP常用的一种数据传输方法。用于一些数据量大，但对速度要求不高的数据传输. 使用步骤： 把外部的数据源(Txt,Exc</description>
    </item>
    
    <item>
      <title>SAP ABAP中自定义权限对象</title>
      <link>https://coldinfire.github.io/2018/SAPAuthorization_details/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPAuthorization_details/</guid>
      <description>​ SAP 扩展中用户往往都需要使用自己的权限对象，为了达到目的，请按下列流程建立和维护权限对象。一旦有账号需要赋予权限，直接用 SAP 系统标准的角色权限</description>
    </item>
    
    <item>
      <title>SAP Authorization</title>
      <link>https://coldinfire.github.io/2018/SAPAuthorization/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPAuthorization/</guid>
      <description>TCode简介 ​ SU01：查看和编辑Role ​ SU10：实现对用户组的批量维护 ​ SU20：权限字段清单，可以增、删、改权限字段，可以浏览字段</description>
    </item>
    
    <item>
      <title>查找增强程序3</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance3/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance3/</guid>
      <description>一个功能非常全面的增强出口查找工具 *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; Report: zdamon_004 (V9) &amp;amp;* *&amp;amp; PJA Consultancy Services (www.pjas.com) &amp;amp;* *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; This report attmpts to find Enhancements, Program-Exits, BADIs &amp;amp;* *&amp;amp; and Business Transaction Events in a particular program/tcode. &amp;amp;* *&amp;amp; Last updated: 09 May 2007 &amp;amp;* *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; Selection Texts: *&amp;amp; P_ALV ALV format *&amp;amp; P_AUTH Include authority-check search</description>
    </item>
    
    <item>
      <title>查找增强程序2</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance2/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance2/</guid>
      <description>查找增强出口和BADI *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z_FIND_EXIT_AND_BADI *&amp;amp; *&amp;amp;---------------------------------------------------------------------* *&amp;amp; *&amp;amp; *&amp;amp;---------------------------------------------------------------------* report z_find_exit_and_badi no standard page heading. *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Enter the transaction code that you want to search through in order *&amp;amp; to find which Standard SAP User Exits and BADIs *&amp;amp; *&amp;amp;---------------------------------------------------------------------* *&amp;amp; For field &amp;#39;SUBC&amp;#39; of table &amp;#39;TRDIR&amp;#39;: *&amp;amp; M Module Pool *&amp;amp; F Function group *&amp;amp; S Subroutine</description>
    </item>
    
    <item>
      <title>查找增强程序1</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance1/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance1/</guid>
      <description>利用t-code查找增强出口的程序工具 REPORT zdamon_005 NO STANDARD PAGE HEADING. TABLES : tstc, tadir, modsapt, modact, trdir, tfdir, enlfdir. TABLES : tstct. DATA : jtab LIKE tadir OCCURS 0 WITH HEADER LINE. DATA : field1(30). DATA : v_devclass LIKE tadir-devclass. PARAMETERS : p_tcode LIKE tstc-tcode OBLIGATORY. SELECT SINGLE * FROM tstc WHERE tcode EQ p_tcode.</description>
    </item>
    
    <item>
      <title>增强</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance/</guid>
      <description>基本概念 SAP 增强已经发展过几代了，可参考 SAP 标准教材 BC425 和 BC427。 SAP 增强从用途来说分 数据元素增强 菜单增强 屏幕增强 功能增强 SAP 增强从实现方式来说分</description>
    </item>
    
    <item>
      <title>复制其他的内表/结构到当前表/结构</title>
      <link>https://coldinfire.github.io/2018/ABAP_TableCopyFields/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TableCopyFields/</guid>
      <description>​ 有时需要创建一个结构，但是字段和其他表或则结构类似，就可以采用复制的方式快速创建，而不用一个一个字段去输入。 1.SE11选择需要添加字段的</description>
    </item>
    
    <item>
      <title> Field Symbols </title>
      <link>https://coldinfire.github.io/2018/ABAP_FieldSymbol/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_FieldSymbol/</guid>
      <description>字段符号 定义: FIELD-SYMBOLS: &amp;lt;fs&amp;gt; TYPE ANY TABLE. FIELD-SYMBOLS: &amp;lt;fs&amp;gt; LIKE LINE OF &amp;lt;t_TABLE&amp;gt; FIELD-SYMBOLS: &amp;lt;fs&amp;gt; type any. ​ &amp;lt;1&amp;gt; FS必须和某个变量，结构或者内表绑定后才能使用，在使用FS前必须分配给某个变量，不然会发生F</description>
    </item>
    
    <item>
      <title>Dialog程序实例</title>
      <link>https://coldinfire.github.io/2018/ABAP_DialogTmp/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DialogTmp/</guid>
      <description>TCode ​ SE51：屏幕操作器 ​ SE41：菜单编辑器 ABAP与Dialog交互方式 ​ ABAP程序与Dialog屏幕进行数据交换的方式，通过在程序中</description>
    </item>
    
    <item>
      <title>Dialog程序知识汇总</title>
      <link>https://coldinfire.github.io/2018/ABAP_DialogDetail/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DialogDetail/</guid>
      <description>TCode ​ SE51：屏幕操作器 ​ SE41：菜单编辑器 ABAP与Dialog交互方式 ​ ABAP程序与Dialog屏幕进行数据交换的方式，通过在程序中</description>
    </item>
    
    <item>
      <title>Dialog程序简介</title>
      <link>https://coldinfire.github.io/2018/ABAP_Dialog/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Dialog/</guid>
      <description>TCode ​ SE51：屏幕操作器 ​ SE41：菜单编辑器 ABAP与Dialog交互方式 ​ ABAP程序与Dialog屏幕进行数据交换的方式，通过在程序中</description>
    </item>
    
    <item>
      <title> List ALV Demo </title>
      <link>https://coldinfire.github.io/2018/ABAP_LISTALV_DEMO/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_LISTALV_DEMO/</guid>
      <description>程序实例 *&amp;amp;--------------------------------------- *&amp;amp; Report ZWR_PI_LOG *&amp;amp;---------------------------------------- REPORT zwr_pi_log. TABLES: lqua ,zpidoc. TYPE-POOLS: slis. DATA: lt_pidoc TYPE STANDARD TABLE OF zpidoc, ls_pidoc TYPE zpidoc . &amp;#34;ALV Data&amp;#34; DATA: gt_fieldcat TYPE lvc_t_fcat, gs_fieldcat TYPE lvc_s_fcat, lw_layout TYPE lvc_s_layo. &amp;#34;Select screen&amp;#34; SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN POSITION 1. PARAMETERS: p_chk1 RADIOBUTTON GROUP zr01 DEFAULT &amp;#39;X&amp;#39; USER-COMMAND zchg. SELECTION-SCREEN COMMENT 3(8) text-002 FOR FIELD p_chk1. SELECTION-SCREEN POSITION 12. PARAMETERS: p_chk2 RADIOBUTTON</description>
    </item>
    
    <item>
      <title> VOFM使用 (例程开发) </title>
      <link>https://coldinfire.github.io/2018/SAP_VOFM/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_VOFM/</guid>
      <description>​ SAP ERP 实施中，经常会用到例程开发 (TCODE:VOFM)。这个开发目前我用到的是影响 SD 和 MM 的定价过程。创建例程需要 ACCESS KEY，这个可以通过Ba</description>
    </item>
    
    <item>
      <title> ABAP定义Range </title>
      <link>https://coldinfire.github.io/2018/ABAP_Range/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Range/</guid>
      <description>Range使用 ​ Range Table为SAP R/3系统标准内表的一种，结构与Selection Table一致，由SIGN,OPTION,LOW,HI</description>
    </item>
    
    <item>
      <title>Smartforms Barcode</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_Barcode/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_Barcode/</guid>
      <description>Smartforms 打印条码 传统的：将数据发送到打印机上，由打印机将数据转换成 条码图案，然后进行打印。 ​ 在 SAP Smartforms 里实现条码打印。在客户机里安装 www.tec-it.com 里的插件 1.定义</description>
    </item>
    
    <item>
      <title>负号前置</title>
      <link>https://coldinfire.github.io/2018/ABAP_Negative_sign_front/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Negative_sign_front/</guid>
      <description>负号前置 SAP 系统中，很多种情况下负号都是在数字后面，如果在显示或计算数据时需要将负号放到数字前面。 调用系统BAPI 可以使用 function module：CL</description>
    </item>
    
    <item>
      <title>可输入弹出框</title>
      <link>https://coldinfire.github.io/2018/ABAP_PopUpBox/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_PopUpBox/</guid>
      <description>POPUP_GET_VALUES_USER_HELP 输入表格，SVAL相应的字段信息决定显示的效果： tabname = &amp;#39;AFKO&amp;#39;. fieldname = &amp;#39;AUFNR&amp;#39;. fieldtext = &amp;#39;生产订单号&amp;#39;. field_attr = &amp;#39;02&amp;#39;. //是否可输入和显示 value = &amp;#39;val&amp;#39;. CALL FUNCTION &amp;#39;POPUP_GET_VALUES_USER_HELP&amp;#39; EXPORTING *</description>
    </item>
    
    <item>
      <title>物料单位转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_CONVERT_MATERIAL_UNIT/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_CONVERT_MATERIAL_UNIT/</guid>
      <description>MARM物料单位转换 call function &amp;#39;MD_CONVERT_MATERIAL_UNIT&amp;#39; exporting i_matnr = matnr i_in_me = in_me i_out_me = out_me i_menge = in_menge importing e_menge = out_menge exceptions error_in_application = 1 error = 2 others = 3 . if sy-subrc &amp;lt;&amp;gt; 0. MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4. endif. 取字段简短描述 DATA inttab LIKE STANDARD TABLE</description>
    </item>
    
    <item>
      <title>开发 常用Tcode汇总</title>
      <link>https://coldinfire.github.io/2018/ABAP_Tcode/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Tcode/</guid>
      <description>ABAP 常用 TCode TCode Description TCode Description SPRO 显示后勤 SE18 BADI Builder ST05/SE30 系统跟踪/系统性能详细跟踪 SE19 BADI Implement ST22 查看日志信息 SE24 创建、修改、查询类对象 SM12 编辑锁定解除 SE21 创建、修改、查询包的</description>
    </item>
    
    <item>
      <title>ALV控制单元格不可编辑</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALVEditContro/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALVEditContro/</guid>
      <description>如果已经把ALV中的整列设为可编辑，而只想让这个列中的某些单元格不可编辑，可以使用以下这种方法。 具体单元格可编辑状态设置的主要思想：首先通过</description>
    </item>
    
    <item>
      <title> 修改文件所属 Package </title>
      <link>https://coldinfire.github.io/2018/ABAP_Package/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Package/</guid>
      <description>​ 创建 ABAP 程序的时候都要选择一个 Package，当后续需要修改程序所属的Package时可以使用以下方法： 通过SE38或则SE80打开对应的程</description>
    </item>
    
    <item>
      <title>Smartforms循环打印，页码统计</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_LoopPrint/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_LoopPrint/</guid>
      <description>Smartforms循环打印数据 ​ 在smartforms的使用中，偶尔会遇到客户要求按某一条件进行数据的分组打印，并进行页码的统计和区分，这</description>
    </item>
    
    <item>
      <title>Smartforms 分页打印</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_page/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_page/</guid>
      <description>Smartform中的table节点插入分页 Command Node 在smartforms的loop节点中可以插入一个command node用来强制分页，那么如</description>
    </item>
    
    <item>
      <title>Smartforms调用模板</title>
      <link>https://coldinfire.github.io/2018/ABAP_SmartfomrsDemo/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SmartfomrsDemo/</guid>
      <description>程序中使用Smartform模板 &amp;#34;SMARTFORMS变量定义&amp;#34; DATA: lv_form_name TYPE tdsfname VALUE &amp;#39;ZZ_TEST&amp;#39;, &amp;#34;Smartforms Name&amp;#34; lv_fm_name type rs38l_fnam, &amp;#34;Function Name&amp;#34; ls_control type ssfctrlop, &amp;#34;Control structure&amp;#34; ls_option type ssfcompop, &amp;#34;Smart Composer (transfer) options&amp;#34; ls_ssfcrescl type ssfcrescl. &amp;#34;Return value</description>
    </item>
    
    <item>
      <title>Smartforms常用工具</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartforms_Utils/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartforms_Utils/</guid>
      <description>中文乱码问题 如果预览时中文正常，打印出来是乱码的情况，可以尝试在中文环境下重新维护并激活。再次打印应该可以解决。如果还有问题，则检查语言包是</description>
    </item>
    
    <item>
      <title>Smartforms</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartforms/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartforms/</guid>
      <description>查找Smartforms TCode： NACE 可以查找 (例如。采购订单，销售订单等) NACE 是用于链接应用程序类型，输出类型及其处理例程（如驱动程序和附加</description>
    </item>
    
    <item>
      <title>ALV添加复选框，并添加全选，不全选功能</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_CHECKBOX/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_CHECKBOX/</guid>
      <description>定义结构中定义该字段 DATA: BEGIN OF gt_print OCCURS 10, CHECKBOX TYPE flag, ...... DATA: END OF gt_print. FIELDCAT添加并定义CheckBox &amp;#34;$. Region ALV_Data&amp;#34; TYPE-POOLS:slis. DATA: alv_fieldcat TYPE STANDARD TABLE OF slis_fieldcat_alv WITH HEADER LINE, alv_layout TYPE slis_layout_alv. alv_fieldcat-fieldname = &amp;#39;CHECKBOX&amp;#39;. alv_fieldcat-scrtext_m = &amp;#39;Choose&amp;#39;. alv_fieldcat-checkbox =</description>
    </item>
    
    <item>
      <title>报表开发&lt;OO ALV工具&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV4/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV4/</guid>
      <description>显示后，修改字段目录和布局 ​ 通过方法在第一次显示之后，设置一个新的布局或则字段目录。 方法 字段目录：GET_FRONTEND_FIELDCAT</description>
    </item>
    
    <item>
      <title>SAP锁机制</title>
      <link>https://coldinfire.github.io/2018/ABAP_Lock/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Lock/</guid>
      <description>一、SAP 为什么要设置锁： 1，保持数据的一致性 ​ 同时多个用户操作同一数据，防止数据出现不一致性而采用了锁机制。一般 sap 会在操作数据前设置锁，防</description>
    </item>
    
    <item>
      <title>OO语法</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV2/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV2/</guid>
      <description>类声明和实现 l 类具有属性和方法 l 对象是类的实例 l 对象是通过指针变量来访问的 l 对象有独立的 interface *Class Declarations CLASS application DEFINITION. PUBLIC SECTION. METHODS: show_text. PRIVATE SECTION. DATA text(100) TYPE c VALUE &amp;#39;This is my first ABAP Object.&amp;#39;. ENDCLASS. *Class Implementation</description>
    </item>
    
    <item>
      <title>OO ALV实例程序</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV3/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV3/</guid>
      <description>OO ALV简单实例：其中屏幕的创建， 和对应PAI,PBO以及Status title等可以自定调整。 REPORT zoo_alv. TYPE-POOLS: slis. *-- Global data Decleration. TYPES:BEGIN OF ty_output, ebeln TYPE ebeln, aedat TYPE erdat, ernam TYPE ernam, ebelp TYPE</description>
    </item>
    
    <item>
      <title>报表开发&lt;OO ALV&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV1/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV1/</guid>
      <description>OO ALV ​ ALV GRID CONTROL 使用了控制器技术以实现屏幕显示，和所有的控制器一样，ALV GRID CONTROL 通过系统中的一个全局的类提供了方法，以响应它的动作. ​ 使用了 ABAP 的对</description>
    </item>
    
    <item>
      <title>报表开发&lt;常用工具&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV5/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV5/</guid>
      <description>单元格中的数据被修改后，将ALV单元格中的数据立即刷新到ABAP对应的内表中 方法一：通过对REUSE_ALV_GRID_DISPLAY函数参</description>
    </item>
    
    <item>
      <title>Field Catalog 字段排坑</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV4.1/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV4.1/</guid>
      <description>原文链接：https://blog.csdn.net/zhongguomao/article/details/77774206 对于初写 ALV 的 A</description>
    </item>
    
    <item>
      <title>报表开发&lt;ALV显示设置&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV4/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV4/</guid>
      <description>ALV常使用的FM &amp;lt;1&amp;gt; LVC_FIELDCATALOG_MERGE：根据内表结构返回FIELDCAT字段结构信息. &amp;lt;2&amp;gt; REUSE_ALV_GRI</description>
    </item>
    
    <item>
      <title>报表开发&lt;内表操作&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV3/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV3/</guid>
      <description>内表操作 SQL 语句的执行顺序 书写顺序：SELECT [DISTINCT]&amp;ndash;&amp;gt;FROM&amp;ndash;&amp;gt;WHERE&amp;ndash;&amp;gt;GROUP BY&amp;ndash;&amp;gt;HAVING&amp;ndash;&amp;gt;UNION&amp;ndash;&amp;gt;ORDER BY 其执行顺序为：FROM&amp;ndash;&amp;gt;WHERE&amp;ndash;&amp;gt;GROUP BY&amp;ndash;&amp;gt;HAVING&amp;ndash;&amp;gt;SELECT&amp;ndash;&amp;gt;DISTINCT&amp;ndash;&amp;gt;UNION-&amp;gt;ORDER</description>
    </item>
    
    <item>
      <title>报表开发&lt;屏幕设置&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV2/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV2/</guid>
      <description>选择屏幕 引用链接 触发 ​ 选择屏幕触发的是：AT SELECTION-SCREEN ​ 对话屏幕触发的是：PAI ​ 列表屏幕触发的是：AT USER-COMMAND SELECT-SCREEN SELECT-SCREEN语句用于创建屏</description>
    </item>
    
    <item>
      <title>报表开发&lt;概述&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV1/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV1/</guid>
      <description>报表格式 程序说明：包括程序名称，实现的业务功能等信息 数据定义 Include内容 定义选择屏幕 执行程序业务代码 创建TCode：SE93 执行程序的</description>
    </item>
    
    <item>
      <title> ABAP截取中文字符串 </title>
      <link>https://coldinfire.github.io/2018/ABAP_StrCNChina/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_StrCNChina/</guid>
      <description>截取包含中文字符串 strlen()只能计算包含英文字符串的长度，不能计算中文字符串的长度。 可以通过cl_abap_list_utilitie</description>
    </item>
    
    <item>
      <title> ABAP通过字段找表程序 </title>
      <link>https://coldinfire.github.io/2018/ABAP_FieldFindProgram/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_FieldFindProgram/</guid>
      <description>获取数据保存在哪个表 前台对指定栏位 使用 F1 帮助找表 ST05 跟踪业务操作过程，检索需要的数据表.（此方法找表很高效） 对于文本字段找表，可以找到前台维护</description>
    </item>
    
    <item>
      <title>红绿灯</title>
      <link>https://coldinfire.github.io/2018/ABAP_TrafficLight/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TrafficLight/</guid>
      <description>定义 TYPE-POOLS:icon,sym,slis,col. DATA: l_alv_filed TYPE slis_fieldcat_alv, l_alv_filedcat TYPE slis_t_fieldcat_alv. TYPES:BEGIN OF str_alv, id TYPE char25, xxx TYPE xxx, xxx TYPE xxx, xxx TYPE xxx, xxx TYPE string, END OF str_alv. DATA:it_alv TYPE STANDARD TABLE OF str_alv WITH HEADER LINE. CONSTANTS: c_green TYPE icon-id VALUE &amp;#39;@08@&amp;#39;, c_yellow TYPE icon-id VALUE &amp;#39;@09@&amp;#39;, c_red TYPE icon-id VALUE &amp;#39;@0A@&amp;#39;. 赋值 IF it_return-type = &amp;#39;E&amp;#39;. it_alv-id = c_red. CALL FUNCTION &amp;#39;BAPI_TRANSACTION_ROLLBACK&amp;#39;. ELSE. it_alv-id</description>
    </item>
    
    <item>
      <title>小数后面去除后缀0</title>
      <link>https://coldinfire.github.io/2018/ABAP_EndZero/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EndZero/</guid>
      <description>小数后面去除后缀0 form DATA_DELETE_ZERO using p_field z_result. DATA:var1 TYPE p DECIMALS 3, var2 TYPE p DECIMALS 2, var3 TYPE p DECIMALS 1, var4 TYPE i. move p_field to var1. move p_field to var2. move p_field to var3. move p_field to var4. IF var2 = var1. IF var3 = var1. IF var4 = var1. z_result = var4. ELSE. z_result = var3. ENDIF. ELSE. z_result</description>
    </item>
    
    <item>
      <title>表维护添加修改人信息</title>
      <link>https://coldinfire.github.io/2018/ABAP_TableMaintainAddUser/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TableMaintainAddUser/</guid>
      <description>添加修改人信息 可以根据TCode进行相应的判断： 创建人信息: l_wa_head-ernam = sy-uname. l_wa_head-erdat = sy-datum. l_wa_head-erzet = sy-uzeit. call function &amp;#39;TERMINAL_ID_GET&amp;#39; exporting username = sy-uname importing terminal = l_wa_head-eterminal exceptions multiple_terminal_id = 1 no_terminal_found = 2 others = 3. 修改人信息： l_wa_head-urnam = sy-uname. l_wa_head-urdat</description>
    </item>
    
    <item>
      <title>数据输入输出转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_DataConversion/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DataConversion/</guid>
      <description>输入输出转换 ​ 如果某个变量参照的数据所对应的Domain具有转换规则，在(Write,ALV,文本框显示)，最后结果会自动转换。 ​ 通过转换规</description>
    </item>
    
    <item>
      <title>ABAP程序间调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis9/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis9/</guid>
      <description>同步调用 在一个程序中调用其他ABAP程序。有两种方式 中断执行 调用程序被打断，当被调用程序执行完毕之后，调用程序继续执行。 CALL FUNCTION [function]. SUBMIT [program] AND RETURN. CALL TRANSACTION [TCode].</description>
    </item>
    
    <item>
      <title>ABAP 性能优化(程序逻辑)</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis8/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis8/</guid>
      <description>性能分析工具 ​ SE30(旧)；SAT(新)：运行时间分析工具 ​ ST12: 程序优化 READ TABLE &amp;hellip;WITH [TABLE] KEY&amp;hellip;BINARY SEARCH读取标准内表使用二分查找 在循环（LOOP AT &amp;h</description>
    </item>
    
    <item>
      <title>ABAP 性能优化(数据操作)</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis7/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis7/</guid>
      <description>性能分析工具 ST05：性能分析，追踪 SQL，分析哪条 SQL Statement 语句，最耗时间 STAD：得到某个程序或事务运行时的总体分析数据，系统时间，CPU 时间</description>
    </item>
    
    <item>
      <title>ABAP Message 处理</title>
      <link>https://coldinfire.github.io/2018/ABAP_Message/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Message/</guid>
      <description>MESSAGE ：SE91 消息类的操作 ​ 使用T-CODE:SE91对Message定义，还能够对Message进行创建，修改及删除等维护操作。Messag</description>
    </item>
    
    <item>
      <title>ABAP Native SQL</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis6/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis6/</guid>
      <description>Native SQL ​ EXEC SQL 和 ADBC 是所谓的 Native SQL，这种方式直接进入指定数据库，不涉及到 DBI，这样就没有 Table buffer。相对 EXEC SQL 来说，更推荐 ADBC 的方式执行 native sq</description>
    </item>
    
    <item>
      <title>ABAP Open SQL</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis5/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis5/</guid>
      <description>Open SQL ABAP可以通过两种方式与数据库交互 Native SQL:数据库自身的SQL，可以直接访问数据库，不够安全。 Open SQL:集成到ABAP中的标准SQL子</description>
    </item>
    
    <item>
      <title>ABAP Form和Function</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis4/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis4/</guid>
      <description>全局变量，局部变量 ​ 报表程序中：选择屏幕事件块(AT SELECTION-SCREEN),逻辑数据库事件块，及methods，subrouti</description>
    </item>
    
    <item>
      <title>ABAP 内表</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis3/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis3/</guid>
      <description>内表定义和使用 内表定义 工作区域:工作区域可以存放多个变量数据,相当于一维数组。 通过Type声明自定义工作区：需要使用Data进行赋值 TYPES: BEGIN OF str_name.</description>
    </item>
    
    <item>
      <title>ABAP 数据表</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis2/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis2/</guid>
      <description>Table:透明表(Transparent table)、簇表 (Cluster table)、 池表(Pool table) ​ 透明表： 和数据库具有相同结构的表存储结构。数据</description>
    </item>
    
    <item>
      <title>ABAP 数据类型</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis1/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis1/</guid>
      <description>ABAP基本数据类型 基本数据类型 C : Character text D : Date(YYYYMMDD) P : Packed(包类型:1-16) N : Numeric text(不能进行计算) T : Time(HHMMSS) X : 十六进制 I : Interger F :</description>
    </item>
    
  </channel>
</rss>