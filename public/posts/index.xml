<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/posts/</link>
    <description>Recent content in Posts on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://coldinfire.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ECMAScript 6 知识了解</title>
      <link>https://coldinfire.github.io/2021/WEB_ECS6/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/WEB_ECS6/</guid>
      <description>新增变量声明 let 命令 let命令，用来声明变量。它的用法类似于 var，但是所声明的变量，只在 let 命令所在的代码块内有效。 var arr = [1,&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;]; for (let i = 0; i &amp;lt; arr.length; i++)</description>
    </item>
    
    <item>
      <title>ABAP Json 转换</title>
      <link>https://coldinfire.github.io/2021/ABAP_JSON/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_JSON/</guid>
      <description>ABAP 对象和 JSON 格式的转换工具 创建工具类 SE24：创建类,输入描述并选择类型 点击保存 定义属性值 需要创建的方法 方法详细代码列表 定义Types Section 定义 Public</description>
    </item>
    
    <item>
      <title>ABAP&amp;Json转换Methods</title>
      <link>https://coldinfire.github.io/2021/ABAP_JSON_Methods/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ABAP_JSON_Methods/</guid>
      <description>方法列表 DATA_TO_JSON METHOD DATA_TO_JSON. DATA:LO_DESCR TYPE REF TO CL_ABAP_TYPEDESCR. LO_DESCR = CL_ABAP_TYPEDESCR=&amp;gt;DESCRIBE_BY_DATA( IA_DATA ). RV_JSON = DATA_TO_JSON_INTERNAL( IA_DATA = IA_DATA IO_DESCR = LO_DESCR ). &amp;#34;Test if root is an single element, if yes root object { ... } needed&amp;#34; IF LO_DESCR-&amp;gt;KIND EQ CL_ABAP_TYPEDESCR=&amp;gt;KIND_ELEM. CONCATENATE &amp;#39;{&amp;#34;$ROOT&amp;#34;:&amp;#39; RV_JSON &amp;#39;}&amp;#39; INTO RV_JSON. ENDIF. ENDMETHOD. JSON_TO_DATA METHOD JSON_TO_DATA. DATA:LV_JSON TYPE STRING. LV_JSON = IV_JSON. JSON_TO_DATA_INTERNAL( CHANGING CV_JSON = LV_JSON CA_DATA =</description>
    </item>
    
    <item>
      <title>Ext.js 组件</title>
      <link>https://coldinfire.github.io/2021/ExtJS_Component/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ExtJS_Component/</guid>
      <description>Ext.js 的常用组件 ExtJS UI 由一个或多个名为 Components.Ext 的 widget 组成。 虽然 Ext 组件拥有几乎完美的对象继承模型，但是这毕竟属于底层架构的一部分，我们日常开发时候接触最多的</description>
    </item>
    
    <item>
      <title>Ext.js 基础知识</title>
      <link>https://coldinfire.github.io/2021/ExtJS_Basic1/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2021/ExtJS_Basic1/</guid>
      <description>Ext.js简介 Ext JS是一个JavaScript框架，它具有面向对象编程的功能。它为使用跨浏览器功能构建Web应用程序提供了丰富的UI。 Ext J</description>
    </item>
    
    <item>
      <title>Text Enhancements</title>
      <link>https://coldinfire.github.io/2020/ABAP_Enhance_Text/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Enhance_Text/</guid>
      <description>文本增强 用文本增强修改SAP标准屏幕中的字段名称，如修改Internal Order 的 End of Work。 Step 1 : 找到对应的Data Element 事务 KO03 进入 Internal Order 主数据显示</description>
    </item>
    
    <item>
      <title>SAP获取库存函数</title>
      <link>https://coldinfire.github.io/2020/MM_GetStock/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_GetStock/</guid>
      <description>SAP的库存种类有很多中取数逻辑，这里整理下，汇总成的一个接口函数。 程序代码 FUNCTION zwi_get_stock. *&amp;#34;---------------------------------------------------------------------- *&amp;#34;*&amp;#34;Local Interface: *&amp;#34; IMPORTING *&amp;#34; VALUE(PLANT) TYPE WERKS_D *&amp;#34; VALUE(MATERIAL) TYPE MATNR *&amp;#34; VALUE(UNIT) TYPE MEINH *&amp;#34; VALUE(STGE_LOC) TYPE LGORT_D *&amp;#34; VALUE(BATCH) TYPE CHARG_D OPTIONAL *&amp;#34; VALUE(VBELN) TYPE VBELN</description>
    </item>
    
    <item>
      <title> SAP Domain增强 </title>
      <link>https://coldinfire.github.io/2020/ABAP_DomainEnhancement/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_DomainEnhancement/</guid>
      <description>Domain 值范围增加固定值 Step1 : Fixed Value Append se11 进入domain 显示界面，选择 Goto -&amp;gt; Fixed Value Append 弹出下面对话框，输入自定义的 Fixed Value Append 名称： Step2: 维护添加值 保存并激活。 Ste</description>
    </item>
    
    <item>
      <title> SAP系统间数据表的Copy </title>
      <link>https://coldinfire.github.io/2020/ABAP_ClientTableCopy/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ClientTableCopy/</guid>
      <description>需求场景 在功能开发完成后，需要使用一些测试数据来进行测试，有时可能需要将一些比较新的生产数据复制到测试系统，为了完成数据表的复制，需要使用一</description>
    </item>
    
    <item>
      <title> SAP Report 选择和显示栏位配置 </title>
      <link>https://coldinfire.github.io/2020/SAP_Report_config/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_Report_config/</guid>
      <description>SAP 的一些 Report 的选择和显示栏位是可配置的。 MB51 是比较常见的查询物料凭证的报表，在该报表中，如下图所示，默认可以根据物料号码、工厂、移动类型等信息进</description>
    </item>
    
    <item>
      <title>函数创建用户并分配权限</title>
      <link>https://coldinfire.github.io/2020/ABAP_CreateUser/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_CreateUser/</guid>
      <description>函数创建用户并分配权限 REPORT ZCREATE_USER. DATA:LS_DATA TYPE BAPILOGOND, LS_ADDR TYPE BAPIADDR3, LS_DEFU TYPE BAPIDEFAUL, LS_PWD TYPE BAPIPWD, GT_RETURN TYPE TABLE OF BAPIRET2, GW_RETURN LIKE LINE OF GT_RETURN, GV_DEST TYPE RFCDEST, GT_FILE TYPE TABLE OF BAPIPROF, GW_FILE LIKE LINE OF GT_FILE. CALL FUNCTION &amp;#39;CRM_OFI_GET_RFCDEST&amp;#39; IMPORTING EV_RFCDEST = GV_DEST EXCEPTIONS NO_RFCDEST = 1 MULTIPLE_RFCDEST = 2 OTHERS = 3. IF SY-SUBRC &amp;lt;&amp;gt; 0. ENDIF.</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - ALV Image Light </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproABAP_Light/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproABAP_Light/</guid>
      <description>Context Component Controller WDDOINIT METHOD INIT_DATA_NODE . *... Create an instance of ALV component data: l_ref_cmp_usage type ref to if_wd_component_usage. l_ref_cmp_usage = wd_this-&amp;gt;wd_cpuse_my_alv( ). if l_ref_cmp_usage-&amp;gt;has_active_component( ) is initial. l_ref_cmp_usage-&amp;gt;create_component( ). endif. *... Get data node data: lr_node type ref to if_wd_context_node. lr_node = wd_context-&amp;gt;get_child_node( &amp;#39;TEST_DATA&amp;#39; ). *... Invoke a method of the ALV Interfacecontroller data: l_ref_interfacecontroller type ref to iwci_salv_wd_table. l_ref_interfacecontroller = wd_this-&amp;gt;wd_cpifc_my_alv( ). *... Set the data l_ref_interfacecontroller-&amp;gt;set_data(</description>
    </item>
    
    <item>
      <title>LSMW操作步骤详解</title>
      <link>https://coldinfire.github.io/2020/SAP_LSMW_Details/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_LSMW_Details/</guid>
      <description>Step1:数据准备 数据准备一般使用 Excel 整理数据，并转换成标准文本。我们以创建物料主数据（事物代码 MM01）的基本视图为例。 物料主数据的基本视</description>
    </item>
    
    <item>
      <title>LSMW批处理使用方法</title>
      <link>https://coldinfire.github.io/2020/SAP_LSMW/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_LSMW/</guid>
      <description>参考链接：https://fenginfo.com/1821.html 总述 在 SAP 系统中，批处理操作有多种方法。如果是对一个事物码（TCODE）</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - ALV dropdown </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproABAP_DropList/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproABAP_DropList/</guid>
      <description>ALV Dropdown Step1:给ALV结构添加VALUE SET字段。 Attribute Name : TYPE_SET Type : WDR_CONTEXT_ATTR_VALUE_LIST Step2:将TYPE_SET字段设置为值范围 METHOD wddoinit . DATA: lo_node TYPE REF TO if_wd_context_node, lo_elem TYPE REF TO</description>
    </item>
    
    <item>
      <title> User Exit for CO11N </title>
      <link>https://coldinfire.github.io/2020/PP_CO11N_Exit/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/PP_CO11N_Exit/</guid>
      <description>User Exits for CO11N Exit Name Description CONF0001 Enhancements in order confirmation CONFPI01 Process order conf.: Calculate cust.specific default values CONFPI02 Process order confirmation: Customer spec. input checks 1 CONFPI03 Process order conf.: Cust. spec. check after op. selection CONFPI04 Process order conf.: Customer specific input checks 2 CONFPI05 Process order conf.: Cust. spec. enhancements when saving CONFPI06 Process order confirmation: Actual data transfer CONFPM01 PM/SM order conf.: Determine cust.</description>
    </item>
    
    <item>
      <title> WebDynpro configuring Runtime Enviroment </title>
      <link>https://coldinfire.github.io/2020/SAPWebDynproRuntimeEnv/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPWebDynproRuntimeEnv/</guid>
      <description>Remove User settings option ABAP Enviroment Method 1 Modify the WebDynpro Application and add the Parameter: ​ WDDISABLEUSERPERSONALIZATION = X. Method 2 Alternatively you can call the webdynpro application WD_GLOBAL_SETTING in SE80 and globally disable all user personalization for all applications. This avoids endusers from calling helpdesk because &amp;ldquo;fields are gone&amp;rdquo; etc. pretty well. JAVA Enviroment Procedure A number of settings allow you to influence the behavior of the Web</description>
    </item>
    
    <item>
      <title> User Exit for MIGO </title>
      <link>https://coldinfire.github.io/2020/MM_MIGO_Exits/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_MIGO_Exits/</guid>
      <description>MIGO 简介 内向交货的收货流程是供应链的重要组成部分。此过程包括创建采购订单后的步骤：通知，收货，随后的货物下达以及所订购货物的收货过帐。 根据未清</description>
    </item>
    
    <item>
      <title>批量创建/修改物料主数据</title>
      <link>https://coldinfire.github.io/2020/MM_Material_Savedata/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_Material_Savedata/</guid>
      <description>程序实例 REPORT ZUPDATE_MATNR. data: headdata type bapimathead, &amp;quot; 表头数据 &amp;quot; clientdata type bapi_mara, &amp;quot; 基本数据 &amp;quot; clientdatax type bapi_marax. &amp;quot; 变更数据标识 &amp;quot; data: materialdescription type table of bapi_makt with header line. data: unitsofmeasure type table of bapi_marm with header line. data: unitsofmeasurex type table of bapi_marmx with header line. data: pr_unit type meins, &amp;quot; 基本</description>
    </item>
    
    <item>
      <title> SAP FI 会计凭证过账 </title>
      <link>https://coldinfire.github.io/2020/FI_DocumentPost/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/FI_DocumentPost/</guid>
      <description>BAPI_ACC_DOCUMENT_POST 该过账 BAPI 需要和模拟过账的 BAPI BAPI_ACC_DOCUMENT_CHECK 搭配使用，这样先执行模拟过账，成功了再执行真正的过账，这样就不会因为执行失败产生废弃的凭证，还要再进行冲销，造</description>
    </item>
    
    <item>
      <title> SAP配置RFC连接-SM59 </title>
      <link>https://coldinfire.github.io/2020/SAP_RFC_Connect/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_RFC_Connect/</guid>
      <description>原文链接 SAP配置RFC连接-SM59 SAP配置的RFC Connection都保存在表RFCDES中 Step1:Procedure to steup an RFC connection 使用Tcode:SM59配置</description>
    </item>
    
    <item>
      <title> MM BAPI List </title>
      <link>https://coldinfire.github.io/2020/MM_BAPI_LIST/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_BAPI_LIST/</guid>
      <description>MM BAPI LIST 整理 BAPI Desc BAPI_MATERIAL_SAVEDATA 创建及更改物料主数据 BAPI_OBJCL_CREATE 分类视图的创建 BAPI_OBJCL_GETCLASSES 分类视图得到详细信息 BAPI_MATERIAL_SAVEREPLICA 物料视图的扩充 BAPI_GOODSMVT_CREATE 创建物料凭证 注意表T158G可以决定goodsm</description>
    </item>
    
    <item>
      <title>ABAP 7.40 Quick Reference</title>
      <link>https://coldinfire.github.io/2020/ABAP_7.40_QuickReference/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_7.40_QuickReference/</guid>
      <description>Inline Declarations 注意@DATA(ITAB)语句的强大，有了它，我们在访问数据库的时候，直接写SELECT就好了，不需要构建各式各样的內表和表类型了。注意</description>
    </item>
    
    <item>
      <title> Output Determination in Inventory Management (IM) </title>
      <link>https://coldinfire.github.io/2020/MM_IM_Print/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_IM_Print/</guid>
      <description>引用链接：Output Determination in Inventory Management (IM) 1. About this document This document describes the output determination in Inventory Management. Chapter 3 deals with the program logic and is intended to developers. Chapters 4 to 23 describe the single elements of output determination. Some are purely MM-IM, others are general output determination concepts. The chapters may be used as reference when</description>
    </item>
    
    <item>
      <title>SAP FI tables</title>
      <link>https://coldinfire.github.io/2020/FI_Tables/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/FI_Tables/</guid>
      <description>SAP FI 表：主数据 总帐科目的 SAP 表 总账科目主记录包含总账确定科目功能所需的数据。 总帐科目主记录控制会计交易到总帐科目的过帐以及过帐数据的处理。 G/L ACCOUNTS</description>
    </item>
    
    <item>
      <title>G/L Account 主要Tcode和tables</title>
      <link>https://coldinfire.github.io/2020/FI_GLAccount/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/FI_GLAccount/</guid>
      <description>什么是G/L Account 首先，总账科目代表总账。 总帐会计的中心任务是提供外部会计和科目的全面情况。 在与公司所有其他业务领域完全集成的软件系统中记录所有</description>
    </item>
    
    <item>
      <title>SAP Query Tutorial</title>
      <link>https://coldinfire.github.io/2020/SAP_Query/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_Query/</guid>
      <description>SAP Query Tutorial in SAP: SQ01, SQ02, SQ03 ABAP Query用于创建 SAP 系统中尚不存在的Report。 它是为几乎不了解 ABAP 编程的用户而设计的。 ABAP Query 为用户提供了广泛的方式来定义报</description>
    </item>
    
    <item>
      <title>SAP DBCO连接测试</title>
      <link>https://coldinfire.github.io/2020/SAPDBCO_Connect/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPDBCO_Connect/</guid>
      <description>TCode: DBCO查看数据库连接信息 测试连通性 使用程序：ADBC_TEST_CONNECTION / 参考 ADBC* 输入Database connection name,进行连接测试</description>
    </item>
    
    <item>
      <title>使用BAPI创建Purchase Order</title>
      <link>https://coldinfire.github.io/2020/MM_PurchaseOrder_BAPI/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_PurchaseOrder_BAPI/</guid>
      <description>通过BAPI创建PO FUNCTION zcreate_po. *&amp;#34;---------------------------------------------------------------------- *&amp;#34;*&amp;#34;Local interface: *&amp;#34; IMPORTING *&amp;#34; VALUE(CALLNO) TYPE ZCALLNO *&amp;#34; VALUE(DOC_TYPE) LIKE BAPIMEPOHEADER-DOC_TYPE DEFAULT &amp;#39;ZIPR&amp;#39; *&amp;#34; VALUE(PURCH_ORG) LIKE BAPIMEPOHEADER-PURCH_ORG DEFAULT &amp;#39;POIC&amp;#39; *&amp;#34; VALUE(PUR_GROUP) LIKE BAPIMEPOHEADER-PUR_GROUP *&amp;#34; VALUE(VENDOR) LIKE BAPIMEPOHEADER-VENDOR *&amp;#34; VALUE(COMP_CODE) LIKE BAPIMEPOHEADER-COMP_CODE DEFAULT &amp;#39;GF50&amp;#39; *&amp;#34; VALUE(DZTERM) TYPE DZTERM DEFAULT &amp;#39;0001&amp;#39; *&amp;#34; EXPORTING *&amp;#34; VALUE(PO_NUMBER) LIKE BAPIMEPOHEADER-PO_NUMBER *&amp;#34; VALUE(FLAG) LIKE BAPIRET2-TYPE *&amp;#34; VALUE(MESSAGE) LIKE BAPIRET2-MESSAGE *&amp;#34; TABLES *&amp;#34;</description>
    </item>
    
    <item>
      <title>使用BAPI创建Purchase Request</title>
      <link>https://coldinfire.github.io/2020/MM_PurchaseRequest_BAPI/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_PurchaseRequest_BAPI/</guid>
      <description>Purchase Request 内容： PR Header : 采购订单编号、供应商、货币、付款期限、采购订单日期 PR Item : 物料编号、短文本、发货日期、采购订单数量、采购订单价格、分类 BAPI: BAP</description>
    </item>
    
    <item>
      <title>SAP WM 常用表</title>
      <link>https://coldinfire.github.io/2020/WM_Table/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/WM_Table/</guid>
      <description>WM 常用Table的功能划分： Transfer requirement Transfer order Inventory Documents Storage Locations Storage Stocks SAP WM Tables for Transfer requirement 主要用于使用仓库管理系统（WMS）计划货物移动。 通过区分货物移动的计划和执行，您</description>
    </item>
    
    <item>
      <title>SAP 库存查看</title>
      <link>https://coldinfire.github.io/2020/MM_Stock/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_Stock/</guid>
      <description>显示物料的库存 MMBE:查看物料的所有库存信息。 Stock Tcodes Desc 中文描述 MB51 Material Doc. List 物料凭证清单 MB52 List of Warehouse Stocks on Hand 现有仓库库存清单 MB53 Display Plant Stock Availability 显示工厂库存可用性</description>
    </item>
    
    <item>
      <title>SAP 移动类型详解</title>
      <link>https://coldinfire.github.io/2020/MM_GoodMovementTypes/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_GoodMovementTypes/</guid>
      <description>SAP Good Movement Types:是3个数字，用于标识 SAP Good Movement 的类型。 移动类型参考字段MSEG-BWART，移动类型参考表T156，文本表是T156T. SAP MM</description>
    </item>
    
    <item>
      <title>MIGO 收货后自动打印功能</title>
      <link>https://coldinfire.github.io/2020/MM_MIGO_Print/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_MIGO_Print/</guid>
      <description>MIGO 简介 内向交货的收货流程是供应链的重要组成部分。此过程包括创建采购订单后的步骤：通知，收货，随后的货物下达以及所订购货物的收货过帐。 根据未清</description>
    </item>
    
    <item>
      <title>Transfer Order(L_TO_CREATE_SINGLE)</title>
      <link>https://coldinfire.github.io/2020/WM_TransferOrder_BAPI/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/WM_TransferOrder_BAPI/</guid>
      <description>L_TO_CREATE_SINGLE Create a transfer order with one item. You can call this FM more than once if you want to transfer more items. CALL FUNCTION &amp;#39;L_TO_CREATE_SINGLE&amp;#39; exporting i_lgnum = wh_number &amp;#34;Warehouse number&amp;#34; i_bwlvs = &amp;#39;999&amp;#39; &amp;#34;MvT999&amp;#34; i_matnr = lqua-matnr &amp;#34;Material no.&amp;#34; i_werks = lqua-werks &amp;#34;Plant&amp;#34; i_lgort = lqua-lgort &amp;#34;Storage location&amp;#34; i_anfme = lqua-verme &amp;#34;Requested Qty&amp;#34; i_altme = lqua-meins &amp;#34;Unit of measure&amp;#34; i_letyp = ltap-letyp &amp;#34;SU Type&amp;#34; i_vlpla = lqua-lgpla &amp;#34;Source</description>
    </item>
    
    <item>
      <title>Transfer Order(TO)</title>
      <link>https://coldinfire.github.io/2020/WM_TransferOrder/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/WM_TransferOrder/</guid>
      <description>Transfer Order 启用WM管理后，在BIN位间进行转移，通过Transfer Order 方式进行。 LT01:Create Transfer Order LT03:Create Transfer Order for Delivery Note LT06:Create Transfer Order for Material Document LT1A:Change Transfer Order LT11:Confirm Transfer Order Item LT12:Confirm Transfer Order LT15:Cancelling transfer order LT21:Display Transfer Order BAPI&amp;rsquo;s List</description>
    </item>
    
    <item>
      <title>ME2N/ME2M报表增加显示字段</title>
      <link>https://coldinfire.github.io/2020/MM_ME2N_ME2M/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_ME2N_ME2M/</guid>
      <description>原文地址：http://blog.csdn.net/zhongguomao/article/details/52514197 在 ME2N/ME2M/ME2W/ME3M 里加 EKKO/EKPO 中没显</description>
    </item>
    
    <item>
      <title> SAP Adobe Form Demo </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP_Demo/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP_Demo/</guid>
      <description>Adobe Form调用 画好了对应的Form格式与数据绑定，就可以在Report程序中通过具体代码进行调用了。 SFPOUTPUTPARAMS 参数介绍 nodialog: 是否弹出打印对话框 noprint: 不打印，</description>
    </item>
    
    <item>
      <title> SAP Adobe Form </title>
      <link>https://coldinfire.github.io/2020/ABAP_SFP/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_SFP/</guid>
      <description>Adobe Form 介绍 SAP中关于Form的设计有三种工具：Script Form，Smart Form和Adobe Form. 要在SAP系统中展示Adobe Form需</description>
    </item>
    
    <item>
      <title> 透明表删除Key值后激活 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Table_Adjust/</guid>
      <description>当业务场景发生变化，或则其它原因需要变更透明表的Key值时，保存和激活时会报错，需要使用SE14进行处理。 勾选Direct,Save Data</description>
    </item>
    
    <item>
      <title>SAP Cost Center</title>
      <link>https://coldinfire.github.io/2020/MM_CostCenter/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_CostCenter/</guid>
      <description></description>
    </item>
    
    <item>
      <title> SAP source scan ABAP Report 工具 </title>
      <link>https://coldinfire.github.io/2020/ABAP_Code_Search/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_Code_Search/</guid>
      <description>SAP提供两个代码扫描工具。 使用场景 如果您不知道某功能模块的名称，并且需要查找使用RFC的位置，则可以使用诸如CALL FUNCTION或DE</description>
    </item>
    
    <item>
      <title>OLE下载数据到EXCEL模板及速度优化</title>
      <link>https://coldinfire.github.io/2020/ABAP_OLEtoExcel/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_OLEtoExcel/</guid>
      <description>引用链接：OLE 下载数据到EXCEL模板及速度优化 问题描述: 当项目中对导出数据EXCEL模板有要求时，ALV标准导出功能不能满足需要开发人员</description>
    </item>
    
    <item>
      <title>SAP Authorization table</title>
      <link>https://coldinfire.github.io/2020/SAPAuthorizationTable/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAPAuthorizationTable/</guid>
      <description>相关权限分配的Table Table Desc Table Decs AGR_1016 活动组参数文件名称 AGR_FLAGS 角色属性 AGR_1016B 活动组参数文件名称 AGR_FLAGSB 角色属性 AGR_1250 活动组的权限数据 AGR_HIER 菜单结构信息表 AGR_1251 活动组的权限</description>
    </item>
    
    <item>
      <title>移动平均价和标准价</title>
      <link>https://coldinfire.github.io/2020/MM_StandardPrice/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_StandardPrice/</guid>
      <description>引用链接：移动平均价和标准价 移动平均价和标准价的概念 标准价： 以一个标准的价格表示一个物料在一段时间内的价值，简称S。来源于实际成本估算。用以</description>
    </item>
    
    <item>
      <title>ALV复制内容到剪贴板</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_COPYPASE/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_COPYPASE/</guid>
      <description>引用链接：ALV复制内容到剪贴板 使用场景 用在ALV的USER_COMMAND里面；复制ALV内容到剪贴板，已经考虑了ALV的列隐藏、筛选，负</description>
    </item>
    
    <item>
      <title>ALV添加执行进度功能</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALVProgress/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALVProgress/</guid>
      <description>添加进度条功能 为了更加清晰的了解到程序执行进度，可以在程序中添加显示进度条功能。 DATA:BEGIN OF gt_result OCCURS 0, sel(1), matnr TYPE mara-matnr, zz_edi_grp TYPE mara-zz_edi_grp, werks TYPE mseg-werks, eknam TYPE eknam, maktx TYPE maktx, num TYPE sy-tabix, row TYPE sy-tabix, icon TYPE icon-id,</description>
    </item>
    
    <item>
      <title>创建PR BAPI_REQUISITION_CREATE</title>
      <link>https://coldinfire.github.io/2020/MM_PurchaseRequest_BAPI2/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_PurchaseRequest_BAPI2/</guid>
      <description>引用链接：https://mp.weixin.qq.com/s/2nt_V5dpgxkspDQsldJJ3A 创建PR BAPI_REQUISITION_CREATE *&amp;amp;---------------------------------------------------------------------* *&amp;amp; BAPI_REQUISITION_CREATE 和 BAPI_PR_CREATE 相关问题查看</description>
    </item>
    
    <item>
      <title>凭证冲销 BAPI_ACC_DOCUMENT_REV_POST</title>
      <link>https://coldinfire.github.io/2020/SAP_ACC_DOCUMENT_REV/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_ACC_DOCUMENT_REV/</guid>
      <description>引用链接：https://mp.weixin.qq.com/s/0RoUY8nyWfONjKTItjTouA BAPI_ACC_DOCUMENT_REV_POST 凭证冲销 前台操作： FB08 直接点保存</description>
    </item>
    
    <item>
      <title>创建固定资产凭证 BAPI_ACC_DOCUMENT_POST</title>
      <link>https://coldinfire.github.io/2020/FI_ACC_DOCUMENT_POST/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/FI_ACC_DOCUMENT_POST/</guid>
      <description>引用链接： https://mp.weixin.qq.com/s/BJBjzFUluYm5xNp1Xmph0Q https://mp.weixin.qq.com/s/6Fa9RtRTZpBU-fXejoTCTA 固定资产 BAPI_ACC_DOCUMENT_POST 凭证创建 TCode : F-02 (固定资产) 增强创建 和其他常规标准增强一样：创建自定义结构 ZLM_ENHANCE_ACC_DOC (ACC_DOCUMENT) SE19创建增强实例:ACC_DOCUM</description>
    </item>
    
    <item>
      <title>MIRO根据退货PO创建贷项凭证:BAPI_INCOMINGINVOICE_CREATE</title>
      <link>https://coldinfire.github.io/2020/MM_MIRO_INCOMINGINVOICE_CREATE/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/MM_MIRO_INCOMINGINVOICE_CREATE/</guid>
      <description>引用链接：https://mp.weixin.qq.com/s/_6CL2fdz6WYCc4gMO8t3Zw MIRO根据退货PO创建贷项凭证</description>
    </item>
    
    <item>
      <title>MIRO根据物料创建贷项凭证:BAPI_INCOMINGINVOICE_CREATE</title>
      <link>https://coldinfire.github.io/2020/FI_MIRO_Matnr/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/FI_MIRO_Matnr/</guid>
      <description>引用链接：https://mp.weixin.qq.com/s/7Wvo452ZJN3MBemD-ehJlw MIRO根据物料创建贷项凭证: BAPI_INCOMINGINVOICE_CREATE</description>
    </item>
    
    <item>
      <title>ABAP BTE增强使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_BTE/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BTE/</guid>
      <description>BTE概念 BTE(Business Transaction Events)：BTE是SAP中可用的增强技术之一，通常使用在财务会计模块,可由 SAP，第三方供应商（合作伙伴）和客户使用。S</description>
    </item>
    
    <item>
      <title> CS12 ALV的增强 </title>
      <link>https://coldinfire.github.io/2019/ABAP_BOM_Enhance/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BOM_Enhance/</guid>
      <description>Tcode：CS12的执行程序查看 可以看到，最终执行的程序是RCS12001，因此可以在该程序中查找增强。 执行的程序： RCS11001 Display BOM Level by Level RCS12001 Display Multilevel BOM RCS13001</description>
    </item>
    
    <item>
      <title>SAP JCO连接</title>
      <link>https://coldinfire.github.io/2019/SAP_JCO/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_JCO/</guid>
      <description>SAP JCO简介 ​ 为了在R/3系统和JAVA平台之间进行实时的交换数据。SAP提供了一套高效的基于RFC的ABAP和JAVA进程间通讯组件：SA</description>
    </item>
    
    <item>
      <title>ABAP 科学计数法问题</title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberQAS/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberQAS/</guid>
      <description>科学计数法转换数字 ABAP 函数 QSS0_FLTP_TO_CHAR_CONVERSION，能将 SAP 系统内的科学计数法显示的数字转换成一般数字。 DATA: l_result TYPE qsollwerte,</description>
    </item>
    
    <item>
      <title> SO10创建标准文本 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SO10/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SO10/</guid>
      <description>创建标准文本 通过 Tcode SO10 可以创建标准文本： 在标准文本中输入文本内容，文本内容可以加入其他的文本，可以实现文本嵌套。 Smartforms中使用 St</description>
    </item>
    
    <item>
      <title> ABAP 搜索帮助 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SearchHelp/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SearchHelp/</guid>
      <description>使用搜索帮助对象 1、在命令字段中输入事务代码作为 SE11。 2、选择搜索帮助单选按钮，然后输入自定义搜索帮助的名称。然后点击创建按钮。 3、在下</description>
    </item>
    
    <item>
      <title> ABAP Dynnamic Programer</title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicProgram/</guid>
      <description>利用Field Symbols和数据参考的实例： *&amp;amp;-------------------------------------------------------------------- *&amp;amp; Report ZZSM_TEST_DYN *&amp;amp;-------------------------------------------------------------------- REPORT zzsm_test_dyn. DATA: tab_reference TYPE REF TO data, struc_reference TYPE REF TO data. DATA: descr TYPE REF TO cl_abap_structdescr. FIELD-SYMBOLS: &amp;lt;struc&amp;gt; TYPE ANY, &amp;lt;field&amp;gt; TYPE ANY, &amp;lt;itab&amp;gt; TYPE ANY TABLE. PARAMETERS: p_table(20) DEFAULT &amp;#39;LFA1&amp;#39; OBLIGATORY, p_rows TYPE i OBLIGATORY. TRY . &amp;#34;Dynamic</description>
    </item>
    
    <item>
      <title>IDoc操作</title>
      <link>https://coldinfire.github.io/2019/ABAP_IDoc/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_IDoc/</guid>
      <description>参考链接 IDoc 1.IDoc简介 IDoc:是基于文档，用作异步传输数据的载体，类似于XML;使用功能场景：假设 1040 和 1020 是同一个集团下两个不同子公司的</description>
    </item>
    
    <item>
      <title>ABAP字符串处理</title>
      <link>https://coldinfire.github.io/2019/ABAP_String/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_String/</guid>
      <description>字符串的处理在程序中的使用十分常见，在这里结合自己日常的使用对ABAP的字符串常用操作进行总结，以便后续使用。 1.获取字符串长度 var1 = strl</description>
    </item>
    
    <item>
      <title>MM 委外业务(外发加工)</title>
      <link>https://coldinfire.github.io/2019/MM_Outsourcing_Business/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Outsourcing_Business/</guid>
      <description>委外加工是指由本公司提供材料（可能是部分）给外包商进行加工，完工后收回成品并向委外加工商支付加工费的业务方式； 步骤： 1.创建为外加工订单： 订</description>
    </item>
    
    <item>
      <title>PO 增强</title>
      <link>https://coldinfire.github.io/2019/MM_PurchaseOrder_Enhance/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_PurchaseOrder_Enhance/</guid>
      <description>创建采购订单(Purchase Order)时可以通过增强做一些控制。 BADI:ME_PROCESS_PO_CUST PROCESS_HEADER： 对PO抬头数据进行检查 PROCESS_I</description>
    </item>
    
    <item>
      <title>生产订单标准BAPI</title>
      <link>https://coldinfire.github.io/2019/SAP_PRODORD_BAPI/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_PRODORD_BAPI/</guid>
      <description>创建PO *---------------------------------------------------------------------* * Form FRM_ORDER_CREATE *---------------------------------------------------------------------* *----------------------------------------------------------------------* * p1 text * p2 text *----------------------------------------------------------------------* FORM frm_order_create . DATA: ls_upload LIKE LINE OF gt_upload, ls_style TYPE lvc_s_styl, lv_index LIKE sy-tabix. DATA: ls_order TYPE bapi_pp_order_create, ls_return TYPE bapiret2, lv_ordnum TYPE bapi_order_key-order_number, lv_ordtyp TYPE bapi_order_copy-order_type. LOOP AT gt_upload INTO ls_upload WHERE ztype EQ space AND box EQ &#39;X&#39;. lv_index = sy-tabix. CLEAR: ls_order, ls_return, lv_ordnum, lv_ordtyp, ls_style. IF ls_upload-externind EQ</description>
    </item>
    
    <item>
      <title>Long Texts</title>
      <link>https://coldinfire.github.io/2019/ABAP_LongTexts/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_LongTexts/</guid>
      <description>介绍 长文本是用于在 SAP 系统中包含长文本的容器，通常将它们附加到业务对象上，用户可以输入自由注释。 长文本只能通过与其相连的业务对象的维护事务来维</description>
    </item>
    
    <item>
      <title>SQVI-创建一张简易的报表</title>
      <link>https://coldinfire.github.io/2019/ABAP_ALV_SQVI/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALV_SQVI/</guid>
      <description>SAP提供的SQVI功能，用以快速自定义一个自己需要的报表 通过该方式创建的报表，只能在SQVI下查，谁的用户创建的就只能谁看，其他用户无法共</description>
    </item>
    
    <item>
      <title>SAP Product Order status</title>
      <link>https://coldinfire.github.io/2019/PP_WorkOrderStatus/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/PP_WorkOrderStatus/</guid>
      <description>SAP生产订单状态 SAP 系统的常见订单状态如下 CRTD (创建)： 标识生产订单刚刚创建，此时禁止做后续发料和报工确认等操作； PREL (部分下达)： 当生产订单部</description>
    </item>
    
    <item>
      <title>ABAP混合算术运算</title>
      <link>https://coldinfire.github.io/2019/ABAP_MixedCalculate/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_MixedCalculate/</guid>
      <description>使用 在ABAP程序中将数值与表达式分别存放，通过表达式计算对应的结果。 一、调用BAPI：EVAL_FORMULA TYPES:BEGIN OF TY_VAL, OPERAND TYPE C, VALUE TYPE STRING, END OF TY_VAL. TYPES:BEGIN OF</description>
    </item>
    
    <item>
      <title> MM Enhance List </title>
      <link>https://coldinfire.github.io/2019/MM_Enhance_LIST/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Enhance_LIST/</guid>
      <description>采购申请增强 BADI ME_PROCESS_REQ_CUST 采购订单增强 BADI ME_GUI_PO_CUST ME_PROCESS_PO_CUST MM_PO_Enhance 物料凭证增强 BADI MB_DOCUMENT_BADI User Exit MBCF0002 ：实现功能 当参照预留过帐时，检查填入数量是否小于预留数量 移动类型是 *** 的时候，查看 RSNUM</description>
    </item>
    
    <item>
      <title>递归遍历成本中心组</title>
      <link>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_RecursiveCostCenter/</guid>
      <description>成本中心组下嵌套成本中心组 成本中心后台数据表是 CSKS，描述表是 CSKT。在表 CSKS 中，主键是 MANDT（客户端）、KOKRS（控制范围）、KO</description>
    </item>
    
    <item>
      <title> ABAP动态内表 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DynamicTable/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DynamicTable/</guid>
      <description>ABAP动态内表操作 动态内表的列是可以跟随数据的变化而变化，可以使报表显示更简洁漂亮。 REPORT zdyn_test. DATA: dyn_table TYPE REF TO data, dyn_line TYPE REF TO data, FIELD-SYMBOLS: &amp;lt;dyn_table&amp;gt; TYPE STANDARD TABLE. FIELD-SYMBOLS: &amp;lt;dyn_wa&amp;gt; TYPE ANY. FIELD-SYMBOLS: &amp;lt;dyn_field&amp;gt; TYPE ANY. DATA:</description>
    </item>
    
    <item>
      <title> 维护成本控制凭证的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType4/</guid>
      <description>介绍 此项配置是在后台为指定的成本控制范围（Controlling Area）维护编号范围，用于成本控制中的各类凭证。这是一种组织机构分组类的编</description>
    </item>
    
    <item>
      <title> 维护会计凭证号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType3/</guid>
      <description>简介 在一个公司代码（Company Code）生成一张会计凭证（Accounting Document）之前，必须在对凭证类型设置一个号码范围。</description>
    </item>
    
    <item>
      <title> 维护物料主数据的编号范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType2/</guid>
      <description>简介 此项操作是在 SAP 系统后台，为需要使用的物料类型设定编号范围。它的操作是针对整个 Client 的。首先维护不重复的号码组，每组可包含内部段和外部段（两者</description>
    </item>
    
    <item>
      <title> 维护客户号码范围 </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRangeType1/</guid>
      <description>简介 定义并分配客户主数据的号码范围，分为两个步骤，两步操作的对象都针对整个 Client。 定义号码范围（Define Number Ranges for Customer Master） 分配</description>
    </item>
    
    <item>
      <title> SAP Number Range Object </title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberRange/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberRange/</guid>
      <description>操作说明 在 SAP 系统中，各类主数据及单据都需要使用编号进行唯一性标识，以此形成后台有着大量编号范围维护的配置操作，种类繁多。 编号范围维护分为两部</description>
    </item>
    
    <item>
      <title>SAP 异常处理</title>
      <link>https://coldinfire.github.io/2019/ABAP_TryCatch/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_TryCatch/</guid>
      <description>SAP 异常处理 异常是在程序执行期间出现的问题。 当异常发生时，程序的正常流程中断，程序应用程序异常终止，这是不推荐的，因此这些异常将被处理。 异常处</description>
    </item>
    
    <item>
      <title> BAPI_GOODSMVT_CREATE Demo </title>
      <link>https://coldinfire.github.io/2019/MM_GoodsMVT_BAPI/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_GoodsMVT_BAPI/</guid>
      <description>Inventory Management使用的BAPI There are two BAPIs for posting Goods Movements: BAPI_GOODSMVT_CREATE (universal BAPI for posting Goods Movements) BAPI_GOODSMVT_CANCEL (only for reverting Goods Movements) And two in combination with for the transactional handling: BAPI_TRANSACTION_COMMIT (Commit the posting, general) BAPI_TRANSACTION_ROLLBACK (Rollback the posting, general) 参数 关于要创建的物料凭证</description>
    </item>
    
    <item>
      <title> ALV Tree标准Demo </title>
      <link>https://coldinfire.github.io/2019/ABAP_ALVTree/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_ALVTree/</guid>
      <description>Demo列表 BCALV_TREE_01 ALV 树控制：构建层次树 BCALV_TREE_02 ALV 树控制：事件处理 BCALV_TREE_03 ALV 树控制：使用自己的上下文菜单 BCALV_TREE_04 ALV 树控制：添加按钮到工具栏 BCALV_TREE_05 ALV 树控制：添加菜单到工具</description>
    </item>
    
    <item>
      <title>业务流程</title>
      <link>https://coldinfire.github.io/2019/SAP_BS_Workflow/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_BS_Workflow/</guid>
      <description>PP流程 MM01(Material)-&amp;gt;CS01(BOM)-&amp;gt;CR01(WORKCENTERY)-&amp;gt;CA01(ROUTING)-&amp;gt;MD11(PLANNED ORDER)-&amp;gt; COO1(PRODUCTION ORDERS)也可通过CO41/CO40转换计划单得来. COMAC:对生产订单进行可用性检查 COHVOMPRINT:打印订单 M</description>
    </item>
    
    <item>
      <title>BAPI使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_BAPI_Basic/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BAPI_Basic/</guid>
      <description>BAPI 简介 BAPI：Business Application Process Interface(业务应用编辑接口)，它实质上就是一种特殊的RFC函数。 BAPI函数及函数参数参考的结</description>
    </item>
    
    <item>
      <title> ABAP学习网站记录 </title>
      <link>https://coldinfire.github.io/2019/ABAP_WebSiteCollect/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_WebSiteCollect/</guid>
      <description>http://www.saptechnical.com/index.htm：需要检索关键信息 https://sapcodes.com/：包含</description>
    </item>
    
    <item>
      <title> SD Function module</title>
      <link>https://coldinfire.github.io/2019/SD_FunctionSum/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SD_FunctionSum/</guid>
      <description>Function Modules RV_ORDER_FLOW_INFORMATION - Reads sales document flow of sales document after delivery and billing Don&amp;rsquo;t forget also check direct reference documents for the both starting document # and preceding/following document types that you are searching for (For example, if you search delivery for the given SO, check also LIPS-VGBEL and LIPS-VGPOS, if it&amp;rsquo;s possible with regard to performance). SD_SALES_DOCUMENT_READ - Reads sales document header and business data: tables VBAK,</description>
    </item>
    
    <item>
      <title> SALV CheckBox设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVCheckBox/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVCheckBox/</guid>
      <description>添加复选框功能 要获得可选（可编辑）复选框，我们需要从 column 对象中获取特定的列。此后，我们需要使用方法 SET_CELL_TYPE 将单元格类型设置为 IF_SALV_C_CELL_TYPE =&amp;gt; CHECKBOX_H</description>
    </item>
    
    <item>
      <title> SALV Color设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVColor/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVColor/</guid>
      <description>ALV颜色设置 整行：在记录中在需要设置COLOR的数据中添加详细信息 整列：从COLUMNS获得对应的列，设置特定列的颜色 单元格：在每条记录的</description>
    </item>
    
    <item>
      <title> SALV Display设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVDisplaySet/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVDisplaySet/</guid>
      <description>Display设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_display_setting CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_display_setting CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_display_setting. DATA: lo_display TYPE REF TO cl_salv_display_settings. *Get display object lo_display = co_alv-&amp;gt;get_display_settings( ). *Set ZEBRA pattern lo_display-&amp;gt;set_striped_pattern( &amp;#39;X&amp;#39; ). *Title to ALV lo_display-&amp;gt;set_list_header( &amp;#39;ALV Test for Display</description>
    </item>
    
    <item>
      <title> SALV Event处理 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVEvent/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVEvent/</guid>
      <description>Event 处理 CLASS lcl_event_handler DEFINITION. PUBLIC SECTION. METHODS: on_link_click FOR EVENT link_click OF cl_salv_events_table IMPORTING row column. ENDCLASS. &amp;#34;lcl_event_handler DEFINITION&amp;#34; *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD generate_output. DATA: lx_msg TYPE REF TO cx_salv_msg. TRY. cl_salv_table=&amp;gt;factory( IMPORTING r_salv_table = o_alv CHANGING t_table = t_vbak ). CATCH cx_salv_msg INTO lx_msg. ENDTRY. *Get the event object DATA: lo_events TYPE REF TO cl_salv_events_table. lo_events = o_alv-&amp;gt;get_event( ). *Instantiate the event handler object DATA: lo_event_handler TYPE</description>
    </item>
    
    <item>
      <title> SALV Fieldcat设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVColumnSet/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVColumnSet/</guid>
      <description>Fieldcat设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. *Set the various column properties METHODS: set_columns CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Setting up the Columns CALL METHOD me-&amp;gt;set_columns CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_columns. *Get all the Columns DATA: lo_cols TYPE REF TO cl_salv_columns. lo_cols = o_alv-&amp;gt;get_columns( ). *set the Column</description>
    </item>
    
    <item>
      <title> SALV Filter设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVFilter/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVFilter/</guid>
      <description>过滤设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_filters CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Set Filters CALL METHOD set_filters CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_filters. DATA: lo_filters TYPE REF TO cl_salv_filters. lo_filters = co_alv-&amp;gt;get_filters( ). *Set the filter for the column ERDAT the filter criteria works exactly same as any *RANGE or SELECT-OPTIONS works. TRY.</description>
    </item>
    
    <item>
      <title> SALV Layout设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVLayout/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVLayout/</guid>
      <description>Layout设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_layout CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_layout CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_layout. DATA: lo_layout TYPE REF TO cl_salv_layout, lf_variant TYPE slis_vari, ls_key TYPE salv_s_layout_key. *Get layout object lo_layout = co_alv-&amp;gt;get_layout( ). *Set Layout save restriction * 1. Set Layout Key</description>
    </item>
    
    <item>
      <title> SALV Sorts设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVSorts/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVSorts/</guid>
      <description>Sorts设置 *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_sorts CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* * Set SORT CALL METHOD set_sorts CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_sorts. DATA: lo_sort TYPE REF TO cl_salv_sorts. *Get Sort object lo_sort = co_alv-&amp;gt;get_sorts( ). *Set the SORT on the AUART with Subtotal TRY. CALL METHOD lo_sort-&amp;gt;add_sort EXPORTING</description>
    </item>
    
    <item>
      <title> SALV Status设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVStatus/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVStatus/</guid>
      <description>设置Status *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_pf_status CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_pf_status CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_pf_status. DATA: lo_functions TYPE REF TO cl_salv_functions_list. lo_functions = co_alv-&amp;gt;get_functions( ). lo_functions-&amp;gt;set_default( abap_true ). &amp;#34;lo_functions-&amp;gt;set_all( abap_true ).&amp;#34; ENDMETHOD. &amp;#34;set_pf_status&amp;#34; *$*$*.....CODE_ADD_3 - End....................................3..*$*$* 自定义Stat</description>
    </item>
    
    <item>
      <title> SALV 图标设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVIConsTooltips/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVIConsTooltips/</guid>
      <description>图标设置 为了能够在 SALV 上添加 ICON 和工具提示，需要： 列值作为 ICON 值– 在输出表中，需要添加 ICON 作为值。这样就可以将 ICON_GREEN_LIGHT 用作交通绿灯 将 SALV 的 ICON 列设置为 ICON – 从 SALV</description>
    </item>
    
    <item>
      <title> SALV 汇总设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVColumnSum/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVColumnSum/</guid>
      <description>Apply Aggregations *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. METHODS: set_aggregations CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* CALL METHOD set_aggregations CHANGING co_alv = o_alv. *$*$*.....CODE_ADD_2 - End....................................2..*$*$* *$*$*.....CODE_ADD_3 - Begin..................................3..*$*$* METHOD set_aggregations. DATA: lo_aggrs TYPE REF TO cl_salv_aggregations. lo_aggrs = co_alv-&amp;gt;get_aggregations( ). *Add TOTAL for COLUMN NETWR TRY. CALL METHOD lo_aggrs-&amp;gt;add_aggregation EXPORTING columnname = &amp;#39;NETWR&amp;#39; aggregation = if_salv_c_aggregation=&amp;gt;total. CATCH cx_salv_data_error . &amp;#34;#EC NO_HANDLER&amp;#34; CATCH cx_salv_not_found .</description>
    </item>
    
    <item>
      <title> SALV 页头和页尾设置 </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVPageTopEnd/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVPageTopEnd/</guid>
      <description>添加页头(Top of page)和页脚(End of page) *$*$*.....CODE_ADD_1 - Begin..................................1..*$*$* PRIVATE SECTION. *Set Top of page METHODS: set_top_of_page CHANGING co_alv TYPE REF TO cl_salv_table. *Set End of page METHODS: set_end_of_page CHANGING co_alv TYPE REF TO cl_salv_table. *$*$*.....CODE_ADD_1 - End....................................1..*$*$* *$*$*.....CODE_ADD_2 - Begin..................................2..*$*$* *Calling the top of page method CALL METHOD me-&amp;gt;set_top_of_page CHANGING co_alv =</description>
    </item>
    
    <item>
      <title> SALV创建ALV </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALVCreate/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALVCreate/</guid>
      <description>创建和显示 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; This code snippet will show how to use the CL_SALV_TABLE to *&amp;amp; generate the ALV *&amp;amp;---------------------------------------------------------------------* REPORT ztest_oo_alv_main. *----------------------------------------------------------------------* * CLASS lcl_report DEFINITION *----------------------------------------------------------------------* CLASS lcl_report DEFINITION. PUBLIC SECTION. * Final output table TYPES: BEGIN OF ty_vbak, vbeln TYPE vbak-vbeln, erdat TYPE erdat, auart TYPE auart, kunnr TYPE kunnr, netwr TYPE netwr, check TYPE flag, &amp;#34;复选框</description>
    </item>
    
    <item>
      <title> 使用SALV功能创建ALV </title>
      <link>https://coldinfire.github.io/2019/ABAP_SALV/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SALV/</guid>
      <description>引用自：https://www.cnblogs.com/jiangzhengjun/p/4291387.html 简介 SALV 可以像使用函数方式生成</description>
    </item>
    
    <item>
      <title>SAP 进销存难点分析及对策</title>
      <link>https://coldinfire.github.io/2019/MM_Invoicing/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Invoicing/</guid>
      <description>引用链接：https://blog.csdn.net/wbin9752/article/details/8608765#comments_2</description>
    </item>
    
    <item>
      <title>BOM了解</title>
      <link>https://coldinfire.github.io/2019/SAP_BOM/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_BOM/</guid>
      <description>BOM定义 ​ BOM:物料清单，是部件完整、正式的结构化清单，组成一个产品或装配。包括每个部件的项目号、损耗、数量和计量单位。</description>
    </item>
    
    <item>
      <title> 发送带文本的Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailText/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailText/</guid>
      <description>转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html 程序实例 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z14841_TEST010 *&amp;amp;---------------------------------------------------------------------* REPORT z14841_test010. TYPES: BEGIN OF stru_master, kunnr TYPE kunnr, &amp;#34; 客户编号 1&amp;#34; bukrs TYPE bukrs, &amp;#34; 公司代码&amp;#34; pro_mill TYPE werks_d, &amp;#34; 工厂&amp;#34; *quota TYPE zcdfquota, &amp;#34; 额度&amp;#34; *account TYPE char10, &amp;#34; 帐期&amp;#</description>
    </item>
    
    <item>
      <title> 发送带附件(Excel)的Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_EmailExcel/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_EmailExcel/</guid>
      <description>转自 http://blog.chinaunix.net/uid-20591812-id-1918813.html 程序实例 *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z7258_MAIL_EXCEL * *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Example of sending external email via SAPCONNECT * *&amp;amp;---------------------------------------------------------------------* REPORT z7258_mail_excel . TABLES: ekko. PARAMETERS: p_email TYPE somlreci1-receiverDEFAULT &amp;#39;coldfire@163.com&amp;#39;. TYPES: BEGIN OF t_ekpo, ebeln TYPE ekpo-ebeln, ebelp TYPE ekpo-ebelp, aedat TYPE ekpo-aedat, matnr TYPE ekpo-matnr, END OF t_ekpo. DATA: it_ekpo TYPE STANDARD TABLE OF t_ekpo INITIAL SIZE 0, wa_ekpo TYPE t_ekpo. TYPES: BEGIN OF t_charekpo, ebeln(10)</description>
    </item>
    
    <item>
      <title>SAP MM01 屏幕增强</title>
      <link>https://coldinfire.github.io/2019/MM_MasterData_enhance1/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_MasterData_enhance1/</guid>
      <description>Reference: https://blogs.sap.com/2015/03/06/additional-fields-on-the-material-master/ MM01中的Screen完全是通过一个个的subscreen，像一个个的component组合而成的。在原有的subscreen不在cu</description>
    </item>
    
    <item>
      <title> SAP HANA 知识链接</title>
      <link>https://coldinfire.github.io/2019/SAPHANA1/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPHANA1/</guid>
      <description>了解 HANA 的途径有 http://help.sap.com http://www.sdn.sap.com/irj/sdn/in-memory http://service.sap.com/hana HANA主要组成成分 客户端：HANA Studio(In-memory studio) 内存内数据库：HANA Database 数据复制组件：SLT/Sybase Replication Sever/BusinessObjects DataServices 三种复制数据方法</description>
    </item>
    
    <item>
      <title> SAP HANA 结构分析</title>
      <link>https://coldinfire.github.io/2019/SAPHANA_APP1/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPHANA_APP1/</guid>
      <description>组成结构 Presentation Layer :SAPGUI -&amp;gt; Browser(BSP/Webdynpro) -&amp;gt; SAP Fiori (UX) -&amp;gt; Web application Application layer : NW Foundation (NW7.4-&amp;gt;NW7.53) DB layer : HANA DB* (Code-to-data) OData : HANA XS OData服务，通过声明式的代码，将HANA表或信息模型开放成OData实体</description>
    </item>
    
    <item>
      <title> SAP NetWeaver Gateway  </title>
      <link>https://coldinfire.github.io/2019/SAPNetWeaverGateway/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPNetWeaverGateway/</guid>
      <description>SAP NetWeaver Gateway SAP NetWeaver 概述 SAP Gateway 框架 SAP NetWeaver Gateway 是一种技术，它提供了一种基于市场标准将设备，环境和平台连接到 SAP 软件的简单方法。可以将SAP Gateway理解为是</description>
    </item>
    
    <item>
      <title> SAP OData  </title>
      <link>https://coldinfire.github.io/2019/SAPOData/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPOData/</guid>
      <description>OData(开放数据协议) 概述 概述: OData 用于定义构建和使用 RESTful API 所需的最佳实践 OData 提供扩展功能，以满足 RESTful API 的任何自定义需求。 REST 代表 Representational State Transf</description>
    </item>
    
    <item>
      <title> SAPUI5 Message  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_Message/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_Message/</guid>
      <description>消息设置 sap.m.MessageBox ​ SAPUI5 提供的对话框，可以显示信息、警告、错误等等。MessageBox 类是静态类，在使用之前必须执行 jQuery.sap.require(&amp;quot;sap.m.MessageBox&amp;quot;) 语句 SAPUI5 包含 jQuery 包，jQuery.</description>
    </item>
    
    <item>
      <title> SAPUI5 Mock Server  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_MockServer/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_MockServer/</guid>
      <description>mock server ​ 在开发过程中，通过使用模拟服务器的方法方便测试，SAPUI5将模拟服务器称为mock server.mock server的基本功能是模拟oData数据的提供</description>
    </item>
    
    <item>
      <title> SAP开发文档撰写 </title>
      <link>https://coldinfire.github.io/2019/SAP_TechWord/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_TechWord/</guid>
      <description>开发文档的目的 开发文档不是蓝图，不是设计文档，它的重点是关于技术的、关于实现的，但也不仅仅是一些伪代码。应当包含 “程序为什么设计”、“主要功</description>
    </item>
    
    <item>
      <title> SAPUI5 Routing导航  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_Routing/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_Routing/</guid>
      <description>Routing导航 ​ Openui5 的 routing 基于模式 ( pattern )，使用 # 符号表示不同的路径 ( route )，导航通过路径的改变来实现。 Pattern 表达式 Openui5 一共有 5 种 pattern表达式</description>
    </item>
    
    <item>
      <title> SAPUI5 数据绑定  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_DataBinding/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_DataBinding/</guid>
      <description>Model Binding 单数据绑定 使用数据绑定前，需要先实例化Model.构造函数获取实例的URL或则数据本身作为第一个参数。 ​ JSON-Model: ​ var oModel = new sap.ui.model.json.JSONModel(dataUrlOrData); ​ XML-Model: ​ var oModel = new sap.ui.model.xml.XMLModel(dataUrlOrData); ​</description>
    </item>
    
    <item>
      <title> SAPUI5 模块化  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_Module/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_Module/</guid>
      <description>模块化 如何加载模块 jQuery.sap.declare(sModuleName,bCreateNamespace)申明一个模块，以确保模块存</description>
    </item>
    
    <item>
      <title> SAPUI5 数据类型和操作  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_DataOption/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_DataOption/</guid>
      <description>数据类型和操作 基本数据类型 ​ sap.ui.model.type.Integer(oFormatOptions?, oConstraints?):支持minimum,maximum ​ sap.ui.model.type.Float(oFormatOptions?, oConstraints?):decima</description>
    </item>
    
    <item>
      <title> SAPUI5 Dialog and Fragment  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_DialogAndFragment/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_DialogAndFragment/</guid>
      <description>Dialogs and Fragments Fragments 片段是一个轻量级的Ui部分，它只是一组重用控件的容器。包含一到多个控件，不需要控制器。 定义并调用已存在的 Fragments : &amp;ldquo;sap/ui/core/Fragment&amp;rdquo; 定义xxx.fragm</description>
    </item>
    
    <item>
      <title> SAPUI5 Layout  </title>
      <link>https://coldinfire.github.io/2019/SAPUI5_Layout/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5_Layout/</guid>
      <description>Layout设置 多页面显示和跳转 ​ sap.m.App : 是一个全局对象，可以通过 app.to(sPageId) 跳转到另一个页面。 ​ to(sPageId, sTransitionName ? , oData ? , oTransitionParameters ? ): [sap.m.NavContainer] ​ app.back()则跳回到刚才</description>
    </item>
    
    <item>
      <title> SAPUI5 概述 </title>
      <link>https://coldinfire.github.io/2019/SAPUI5/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5/</guid>
      <description>SAPUI5概述 SAPUI5:一套基于HTML5,CSS3,JavaScript的开发框架 SAPUI5包括内容 重构的JavaScript语法</description>
    </item>
    
    <item>
      <title> Fiori简介 </title>
      <link>https://coldinfire.github.io/2019/SAPFiori_AllOverview/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPFiori_AllOverview/</guid>
      <description>框架设计 SAP Fiori UI5有五种设计原则。这些原则使SAP Fiori变得简单，并将不同的事务分解为基于任务的简单UI应用程序。 基于角色 - SAP已经分</description>
    </item>
    
    <item>
      <title>SAP Fiori Launch Pad</title>
      <link>https://coldinfire.github.io/2019/SAPFiori_LaunchPad/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPFiori_LaunchPad/</guid>
      <description>Fiori Launch Pad SAP Fiori Launch Pad 包含内容: 应用以磁贴形式展示在首页 首页磁贴包括静态磁贴、动态磁贴、新闻磁贴 Tile Catalog：用户可以运行的所有程序的集合 Tile Gr</description>
    </item>
    
    <item>
      <title>移库产生的报错</title>
      <link>https://coldinfire.github.io/2019/WM_Q1/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/WM_Q1/</guid>
      <description>Q：当进行移库操作时，同一个程序中执行多次移库动作会产生Error Message:No status object is available for HU XXXXXX(Error BS001 when posting goods movment)? A：需要每次进行移库前刷新数据： 调用BAPI进行</description>
    </item>
    
    <item>
      <title> SAP下载程序源码工具 </title>
      <link>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DownloadSourceCode/</guid>
      <description>转自 http://blog.sina.com.cn/s/blog_4d1570de0100pvhd.html 程序实例 *@---------------------------------------------------------------------* *@ Report ZZXUE01 下载程序代码 *@ T-code *@---------------------------------------------------------------------* *@ Created by Xavery Hsueh on 2011-03-01 *@ Lasted Edited date: *@---------------------------------------------------------------------* &amp;#34;REPORT XXX NO STANDARD PAGE HEADING.&amp;#34; *********************************************************************** ** 声明数据库表 *********************************************************************** TABLES:rs38m, trdir. *********************************************************************** ** 内表结构类型的定义 *********************************************************************** DATA BEGIN OF dynpfields OCCURS 1. INCLUDE STRUCTURE dynpread.</description>
    </item>
    
    <item>
      <title> SAP发送Email </title>
      <link>https://coldinfire.github.io/2019/ABAP_Email/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Email/</guid>
      <description>SAP 发送邮件 邮件功能可以配置参数，使用系统标准的邮件工作台收发邮件，还可以调用邮件API接口函数收发邮件。 Tcode RZ10：设置Profile参数 1</description>
    </item>
    
    <item>
      <title>SAP后台JOB</title>
      <link>https://coldinfire.github.io/2019/ABAP_JOB/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_JOB/</guid>
      <description>定义后台 job 第一种：SE38执行可执行程序 菜单栏‘program’&amp;mdash;&amp;gt;&amp;lsquo;Execute in Background&amp;rsquo; 输入输出设备 选择开始时</description>
    </item>
    
    <item>
      <title>STO详解</title>
      <link>https://coldinfire.github.io/2019/MM_STO/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_STO/</guid>
      <description>一、工厂间转储 （1）MB1B 移动类型 301 工厂到工厂（一步）转账 -&amp;gt; 简单明了一步转储；过账后会产生 GR，MITA 增加了，MIZH 减少了， MB03：</description>
    </item>
    
    <item>
      <title>库存管理</title>
      <link>https://coldinfire.github.io/2019/MM_InventoryManagement/</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_InventoryManagement/</guid>
      <description>一、基本介绍 1.库存类型 ​ 可用库存：可通过BAPI_MATERIAL_AVAILABILITY来获取 ​ 当前库存：一般保存在MARD-LABS</description>
    </item>
    
    <item>
      <title>收货</title>
      <link>https://coldinfire.github.io/2019/MMGoodsReceive/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMGoodsReceive/</guid>
      <description>1.收货发票 Post Goods Receipt Invoice (GRIN) : MIGO GRIN清单： 供应商发票上的PO# 与Org PO #相同 供应商地址和采购订单地址匹配 物料数量应在Org PO中可用 发票价格</description>
    </item>
    
    <item>
      <title>Info Record</title>
      <link>https://coldinfire.github.io/2019/MMInfoRecord/</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMInfoRecord/</guid>
      <description>创建Info Record 信息记录 (Info record)**：一个物料在某个供应商那里，卖多少钱，有什么特殊条件等信息的存储。 创建方式：手工输入，报价单选择，</description>
    </item>
    
    <item>
      <title>RFQ</title>
      <link>https://coldinfire.github.io/2019/MMPurchaseRFQ/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMPurchaseRFQ/</guid>
      <description>Request For Quotation (RFQ): ME41 /42/43 SPRO &amp;gt; IMG &amp;gt; Logistics &amp;gt; MM &amp;gt; Purchasing &amp;gt; RFQ/Quotation &amp;gt; RFQ Enter REQ type,Date limit,Purch Org,Purch Group, Plant ,Storage Location Enter Collective No to track of all RFQ related to particular instance and ref data Enter the appropriate item category,material NO, RFQ Quantity Enter the Deliv. Date，Plant code , Submission date , Click</description>
    </item>
    
    <item>
      <title>有库存的采购</title>
      <link>https://coldinfire.github.io/2019/MMPurchase/</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMPurchase/</guid>
      <description>采购流程 单据流 仓库数量被预约(采购订单下达) 收货采购订单，总账增加，库存成本增加； 应付账款不改变库存数量，根据数量和价格计算价格； 采购物料：</description>
    </item>
    
    <item>
      <title>物料主数据增强自定义字段</title>
      <link>https://coldinfire.github.io/2019/MM_MasterData_enhance2/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_MasterData_enhance2/</guid>
      <description>正常情况下通过FM Exits来增强一个屏幕的步骤： Find relevant enhancement thru program name. T-code: CMOD, create an enhancement project, then assign the enhancement to the enhancement project Create a subscreen in corresponding X function group Implement the FM exits for transporting data to subscreen and retrieving data from subscreen. Active the enhancement</description>
    </item>
    
    <item>
      <title>供应商主数据创建</title>
      <link>https://coldinfire.github.io/2019/MMVenderCreate/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMVenderCreate/</guid>
      <description>创建供应商主数据 1.Define vendor account groups : OBD3 SPRO &amp;gt; IMG &amp;gt; Financial accounting &amp;gt; Accounts Receivable and Accounts Payable &amp;gt; Vendor Accounts &amp;gt; Master data &amp;gt; preparation for creating vendor master data &amp;gt; Define Account groups with screen layout(Vendors) 1.Enter Account group Code and Name. 2.Choose: Company code data and select Account management under group. 3.Select Reconciliation accoun</description>
    </item>
    
    <item>
      <title>供应商(Vendor)</title>
      <link>https://coldinfire.github.io/2019/MMVender/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMVender/</guid>
      <description>供应商主数据 供应商主数据的维护：采购和会计数据可以集中或分散维护 供应商主数据：采购业务，缺少不能创建采购凭证或则发票校验等 一般数据：地址、通</description>
    </item>
    
    <item>
      <title>MM 物料主数据创建</title>
      <link>https://coldinfire.github.io/2019/MMMasterData/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMMasterData/</guid>
      <description>Enterprise Struture 1.Define Company : OX15 SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Financial Account -&amp;gt; Define Company 1.Enter company 2.Enter company name 3.Update address 4.Enter country code of company 5.Enter language key 6.Enter local currency 2.Define Company Code : OX02 SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Financial Account -&amp;gt; Edit,Copy,Delete Company Code 3.Assign Company Code to Company : OX16 SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition</description>
    </item>
    
    <item>
      <title>MM概述(二)</title>
      <link>https://coldinfire.github.io/2019/MMDetail2/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMDetail2/</guid>
      <description>库存采购基础 采购流程： MRP &amp;amp; Purch.Req (Determination of reqmts)（确认需求） Source determination (购买方式和货源) Vendor selection （跟哪个供应商买） Request for Quotation (要求报价) Purchase Requisition (采购申请) PO processing</description>
    </item>
    
    <item>
      <title>MM概述(一)</title>
      <link>https://coldinfire.github.io/2019/MMDetail1/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMDetail1/</guid>
      <description>企业组织结构 整体架构 集团：是 R/3 系统里的一个商业的组织层次。有自己的数据、主记录及各种报表。从业务角度看，集团当作各个实体的组合。 公司代码：一</description>
    </item>
    
    <item>
      <title>MM常用TCode</title>
      <link>https://coldinfire.github.io/2019/MM_Tcode/</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Tcode/</guid>
      <description>MM 常用Tcode： Table Desc Table Desc MM01/02/03/04/06 物料：创建/修改/显示/显示修改/删除标记 MK01/02/03/05/06 供应商：创建/修改/显示/冻结/删除标记 ME01/02/0M 货源清单：创建/查看/物料</description>
    </item>
    
    <item>
      <title>FI 配置流程</title>
      <link>https://coldinfire.github.io/2019/FI_Configure/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/FI_Configure/</guid>
      <description>创建会计科目表 (A999账目表) 定义会计年度变式 (正常记账期间12、特殊期间4) 创建信贷控制范围 依据以上信息维护公司参数 定义科目账户组合编号</description>
    </item>
    
    <item>
      <title>MM 配置流程</title>
      <link>https://coldinfire.github.io/2019/MMConfirg/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMConfirg/</guid>
      <description>MM 模块主要配置流程 创建工厂、公司代码 创建库存地点 创建采购组织 创建采购组 MRP Controller 分配工厂到公司 分配采购组织到公司 分配工厂到采购组织 定义物料 定义计划</description>
    </item>
    
    <item>
      <title>MM 常用表</title>
      <link>https://coldinfire.github.io/2019/MM_Table/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MM_Table/</guid>
      <description>MM 常用透明表： Table Desc Table Desc Table Desc MARA 物料主数据 MARC 物料工厂(在途库存) MSKA 销售订单库存 MAKT 物料描述 MARD 物料库存(当前库存) T001L 工厂库位关系 MARM 物料的计量单位 MARDH 历</description>
    </item>
    
    <item>
      <title>MM Summary</title>
      <link>https://coldinfire.github.io/2019/MMSummary/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMSummary/</guid>
      <description>MM概要 业务 (采购询价 ME41 / 报价 ME47 录入、ME49 报价比较)&amp;mdash;-&amp;gt; 采购申请 (PR)&amp;mdash;-&amp;gt; 采购订单 (PO)&amp;mdash;-&amp;gt; 发送采购单给供应商 &amp;lt; ME9F&amp;gt;&amp;mdash;-&amp;gt; 采购收货 (产生物料</description>
    </item>
    
    <item>
      <title>SAP memory使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_Memory/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Memory/</guid>
      <description>SAP memory和ABAP memory 使用的语句不同 SAP memory使用SET/GET parameters SET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD var_matnr. GET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD var_matnr. ABAP Memory使用EXPORT 和IMPOR</description>
    </item>
    
    <item>
      <title>ABAP DOI使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_DOI/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_DOI/</guid>
      <description>概述 DOI（Desktop office Integration）采用OO的思想实现与Office的结合使用。 可以先上传模板到服务器(OAOR)，然后对模</description>
    </item>
    
    <item>
      <title>SAP Webservice 使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_Webservice/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Webservice/</guid>
      <description>SAP Webservice SAP 调用 Webservice a. 获取 webservice wsdl, b. 生成 webservice c.LPCONFIG 创建 Logical Port, 保存并激活 d. 编写 webserive 程序，CALL 方法调用 webservice， e. 测试程序； SAP 发布 Webservice 供其他系统调用 a. 服</description>
    </item>
    
    <item>
      <title>STVARV使用详情</title>
      <link>https://coldinfire.github.io/2019/ABAP_Variant/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_Variant/</guid>
      <description>STVARV使用 该配置不能跨Client因此需要在每个Client单独配置；使用TCode：stvarv进入配置界面，可以新建、修改、删除记</description>
    </item>
    
    <item>
      <title> Python基础 </title>
      <link>https://coldinfire.github.io/2019/Python1/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/Python1/</guid>
      <description>变量定义和数据类型 变量定义 Python的变量命名规则： 硬性规则： 变量由字母、数字和下划线构成，不能以数字开头 大小写敏感 不能跟python的关</description>
    </item>
    
    <item>
      <title> Python学习资源</title>
      <link>https://coldinfire.github.io/2019/PythonResource/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/PythonResource/</guid>
      <description>资源 Python 官网 包含了 Python 框架、Python 库和软件的 awesome 列表 Python 神书，里面有若干个项目，每个项目都是由业内大神所写，每个项目代码在 500 行左右 介绍 Python3 中的标</description>
    </item>
    
    <item>
      <title> Pycharm 使用 </title>
      <link>https://coldinfire.github.io/2019/Pycharm/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/Pycharm/</guid>
      <description>常用快捷键 1、Ctrl + Enter：在下方新建行但不移动光标 2、Shift + Enter：在下方新建行并移到新行行首 3、Ctrl + /：注释(取</description>
    </item>
    
    <item>
      <title>ABAP Submit 实现程序间互相调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_Submit/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Submit/</guid>
      <description>ABAP 代码中通过Submit实现程序的调用以及调用时数据参数的传递. 程序准备 将要被调用的Report: ZTEST_SUBMIT1 REPORT ZTEST_SUBMIT1. DATA: lv_matnr TYPE matnr. DATA: lv_charg TYPE charg. SELECT-OPTIONS: s1_matnr FOR matnr, s1_lgort FOR lgort. START-OF-SELECTION. DATA: lv_line</description>
    </item>
    
    <item>
      <title> 将Smartforms转换成PDF发送到FTP服务器 </title>
      <link>https://coldinfire.github.io/2018/ABAP_SmartformsToftp/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SmartformsToftp/</guid>
      <description>Send pdf file to ftp server REPORT zpdfsendtoftp. DATA : BEGIN OF t_vbak OCCURS 0, vbeln TYPE vbrk-vbeln, vkorg TYPE vbak-vkorg, vkbur TYPE vbak-vkbur, END OF t_vbak. DATA: function_name TYPE rs38l_fnam, form_name TYPE tdsfname VALUE &amp;#39;ZTEST1&amp;#39;. DATA: carr_id TYPE sbook-carrid, ctrlop TYPE ssfctrlop, compop TYPE ssfcompop, tab_otf_data TYPE ssfcrescl. DATA: pdf_tab LIKE tline OCCURS 0 WITH HEADER LINE, tab_otf_final TYPE itcoo OCCURS 0 WITH HEADER LINE, bin_filesize TYPE i, pdf_xstring</description>
    </item>
    
    <item>
      <title>日期操作</title>
      <link>https://coldinfire.github.io/2018/ABAP_Date/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Date/</guid>
      <description>日期格式转换 系统标准Function CONVERSION_EXIT_IDATE_OUTPUT INPUT: 20080203 OUTPUT: 03FEB2008 CONVERT_DATE_TO_EXTERNAL INPUT: 20080203 OUTPUT: 02/03/2008 &amp;#34;According to user&amp;#39;s default setting. CONVERT_DATE_TO_INTERNAL INPUT: 02/03/2008 &amp;#34;Should be same as the user&amp;#39;s default setting OUPUT: 20080203 自定义工具 FUNCTION ZCONVERT_DATE_FORMAT. *&amp;#34;---------------------------------------------------------------------- *&amp;#34;*&amp;#34;Local interface: *&amp;#34; IMPORTING *&amp;#34; REFERENCE(ZNAME) LIKE USR01-BNAME *&amp;#34; CHANGING *&amp;#34; REFERENCE(ZDATE) TYPE C *&amp;#34;---------------------------------------------------------------------- DATA:</description>
    </item>
    
    <item>
      <title>不同时区日期转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_TIMEZONE/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TIMEZONE/</guid>
      <description>时区表：TTZZ 获取用户时区 Function：TZON_GET_USER_TIMEZONE 根据时区得到时间戳 FUNCTION：IB_CONV</description>
    </item>
    
    <item>
      <title>Smartforms打印成PDF</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartfomrs_PDF/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartfomrs_PDF/</guid>
      <description>1.程序中使用Smartform模板 &amp;#34;SMARTFORMS变量定义&amp;#34; DATA: form_name TYPE tdsfname VALUE &amp;#39;ZZ_TEST&amp;#39;, &amp;#34;Smartforms Name&amp;#34; function_name type rs38l_fnam, &amp;#34;Function Name&amp;#34; control type ssfctrlop, &amp;#34;Control structure&amp;#34; option type ssfcompop, &amp;#34;Smart Composer (transfer) options&amp;#34; result type ssfcrescl.</description>
    </item>
    
    <item>
      <title>SAP Excel 操作实例(CLASS)</title>
      <link>https://coldinfire.github.io/2018/ABAP_EXCEL_CLASS/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EXCEL_CLASS/</guid>
      <description>SAP Excel 操作实现 (CLASS) *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZEXCEL_CLASS_DEMO *&amp;amp;---------------------------------------------------------------------* REPORT zexcel_class_demo. TABLES: sscrfields,rlgrap. TYPE-POOLS: slis. &amp;#34; TEXT-000 : Select file to upload &amp;#34; &amp;#34; TEXT-001 : Select file &amp;#34; SELECTION-SCREEN BEGIN OF BLOCK file_name WITH FRAME TITLE text-000. SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_file. PARAMETERS: p_file LIKE rlgrap-filename . SELECTION-SCREEN END OF LINE. SELECTION-SCREEN END OF BLOCK file_name. SELECTION-SCREEN FUNCTION KEY 1.</description>
    </item>
    
    <item>
      <title>SAP Excel 操作实例(BAPI)</title>
      <link>https://coldinfire.github.io/2018/ABAP_EXCEL_BAPI/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EXCEL_BAPI/</guid>
      <description>SAP Excel 操作实现 (BAPI) *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report ZEXCEL_BAPI *&amp;amp;---------------------------------------------------------------------* REPORT zexcel_bapi. TABLES: sscrfields,rlgrap. TYPE-POOLS: slis. &amp;#34; TEXT-000 : Select file to upload &amp;#34; &amp;#34; TEXT-001 : Select file &amp;#34; SELECTION-SCREEN BEGIN OF BLOCK file_name WITH FRAME TITLE text-000. SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN COMMENT 1(31) text-001 FOR FIELD p_file. PARAMETERS: p_file LIKE rlgrap-filename . SELECTION-SCREEN END OF LINE. SELECTION-SCREEN END OF BLOCK file_name. SELECTION-SCREEN FUNCTION KEY 1.</description>
    </item>
    
    <item>
      <title>BOM展开</title>
      <link>https://coldinfire.github.io/2018/ABAP_BOM_USE/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BOM_USE/</guid>
      <description>SAP BOM读取逻辑 相关表 MAST：Material BOM STKO : BOM Header STPO : BOM Positions (detail) MAPL : Assignment fo Task Lists to Materials PLKO : Routing Group Header PLSO : Routing Group Sequence PLPO : Routing Group Operations AFKO : Production Order Header AFPO : Production Order Position (details) 可用</description>
    </item>
    
    <item>
      <title>ABAP 工作流</title>
      <link>https://coldinfire.github.io/2018/ABAP_WorkFlow/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_WorkFlow/</guid>
      <description>SAP工作流介绍 工作流是一个基于某组程序规则所采用的路径。是自动运作的任务的进程中，参与的人、文件、信息或任务，以及各个要素间的传递按照规程</description>
    </item>
    
    <item>
      <title>Product Order的增强</title>
      <link>https://coldinfire.github.io/2018/SAP_ProOrder_Enhance/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_ProOrder_Enhance/</guid>
      <description>生产订单的增强 如果SAP系统的标准功能不能满足业务需求，用户出口或 BADI 可能会有所帮助。 Customer Exit SMOD:SAP增强管理 CMOD:SAP增强编辑器维</description>
    </item>
    
    <item>
      <title>SAP Excel 上传和下载</title>
      <link>https://coldinfire.github.io/2018/ABAP_Excel/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Excel/</guid>
      <description>SAP Excel模板操作 上传模板：文档是通过SMW0上传的。 选择模板类型 根据Package和Name查找模板 编辑模板 创建模板，维护名称和描述后从</description>
    </item>
    
    <item>
      <title> ALV tree显示BOM结构 </title>
      <link>https://coldinfire.github.io/2018/SAP_BOM_Tree/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_BOM_Tree/</guid>
      <description>实例代码 REPORT z_barry_alv_tree1_bom MESSAGE-ID oo. TABLES: stpox. INCLUDE &amp;lt;icon&amp;gt;. CLASS: cl_gui_column_tree DEFINITION LOAD, cl_gui_cfw DEFINITION LOAD . DATA: tree1 TYPE REF TO cl_gui_alv_tree , mr_toolbar TYPE REF TO cl_gui_toolbar . DATA: gs_stpox TYPE stpox, gt_stpox TYPE stpox OCCURS 0, gt_fieldcatalog TYPE lvc_t_fcat, gt_item_layout TYPE lvc_t_laci, gs_item_layout TYPE lvc_s_laci, okcode LIKE sy-ucomm . TYPES: BEGIN OF gs_f. INCLUDE STRUCTURE stpox. TYPES: node_key TYPE lvc_nkey, END OF gs_f. DATA:</description>
    </item>
    
    <item>
      <title> Web Dynpro在Portal上传输 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_ClintTransfer/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_ClintTransfer/</guid>
      <description>当在Portal测试环境测试通过后，需要将其从测试环境搬到正式环境. Download from QAS system Open Transport package export Editor 选择System Administration,然后选择</description>
    </item>
    
    <item>
      <title> 将开发好的Web Dynpro 挂载到Portal上 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_PortalConfig/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_PortalConfig/</guid>
      <description>Web dynpro create role 在浏览器中登陆Portal，选择Content Administration页签，然后选择Portal Content 下面需要使用的文件夹。 选择文件</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - OVS搜索帮助 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_SearchOVS/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_SearchOVS/</guid>
      <description>普通字段 普通字段，表字段的搜索帮助（在创建节点的时候指定搜索帮助OVS，或者后面加上去） Step1 ：创建WDA程序，双击程序组件，在Used Comp</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - Trigger ALV Events </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_TriggerEvents/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_TriggerEvents/</guid>
      <description>Question 由于需要一个可编辑的 ALV 表，因此必须使用 ALV 事件，例如 on_cell_action事件和 on_click 事件。 尽管我已经注册了 ALV 事件，但是在调试过程中，无法</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:ALV_VIEW-Function </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P4/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P4/</guid>
      <description>ALV_VIEW Action Function:程序实例 METHOD ONACTIONPRINT . DATA lo_api_controller TYPE REF TO if_wd_controller. DATA lo_message_manager TYPE REF TO if_wd_message_manager. DATA: LT_EKPO TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO TYPE ZEKPO_asn, LT_EKPO_SUM TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO_SUM TYPE ZEKPO_asn, LT_EKPO_SUM_TMP TYPE STANDARD TABLE OF ZEKPO_asn, LS_EKPO_SUM_TMP TYPE ZEKPO_asn. DATA lo_lips TYPE REF TO if_wd_context_node. data: lt_lips TYPE TABLE OF ZSLIPSASN,</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:ALV_VIEW-WDDOINIT </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P1/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P1/</guid>
      <description>ALV_VIEW: WDDOINIT METHOD WDDOINIT . *1.数据定义 *========================================================= DATA: alv_usage TYPE REF TO if_wd_component_usage, &amp;#34;①&amp;#34; alv_controller TYPE REF TO iwci_salv_wd_table, &amp;#34;②&amp;#34; alv_config TYPE REF TO cl_salv_wd_config_ta</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:DATA_LOAD </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P2/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P2/</guid>
      <description>Component Controller: DATA_LOAD METHOD DATA_LOAD . &amp;#34; ALV 输出的结构定义 &amp;#34; DATA: lt_ZALV_ZPEFF_TOTAL TYPE TABLE OF ZALV_ZPEFF_TOTAL, ls_ZALV_ZPEFF_TOTAL TYPE ZALV_ZPEFF_TOTAL, lt_ZALV_PROD_EFF TYPE TABLE OF ZALV_PROD_EFF, ls_ZALV_PROD_EFF TYPE ZALV_PROD_EFF, lo_node TYPE REF TO if_wd_context_node. &amp;#34; 选择屏幕数据的单属性定义 &amp;#34; DATA: lo_nd_zoption TYPE REF TO if_wd_context_node, lo_el_zoption TYPE REF TO if_wd_context_element, ls_zoption TYPE wd_this-&amp;gt;element_zoption, lv_p_total TYPE wd_this-&amp;gt;element_zoption-p_total, lv_p_detail</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP Program:WDDOINIT </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_P3/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_P3/</guid>
      <description>Component Controller/INPUT_VIEW: WDDOINIT METHOD WDDOINIT. TYPES:BEGIN OF soption, typename TYPE string, &amp;#34; Selection screen field ref type element &amp;#34; id TYPE string, &amp;#34; selection screen field name &amp;#34; END OF soption. DATA: it_soption TYPE TABLE OF soption, wa_soption TYPE soption. DATA it_range_table TYPE REF TO data. &amp;#34; ALV Object Setting &amp;#34; DATA: alv_cmp_usage TYPE REF TO if_wd_component_usage, alv_controller TYPE REF TO iwci_salv_wd_table, alv_config TYPE REF TO cl_salv_wd_config_table. DATA: column_settings TYPE</description>
    </item>
    
    <item>
      <title> 创建一个Web Dynpro ABAP程序实例 </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_Demo/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_Demo/</guid>
      <description>准备数据 ​ SAP Web Dynpro 一般都是采用调用ERP接口方式获取业务数据，因此输入，输出参数等结构都需要和ERP系统中接口的内容保持一致。在ERP系统中找</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - View Details </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_View/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_View/</guid>
      <description>视图的整体介绍 Properties ：VIEW的属性，一般引入一些系统控件如alv，select-option等 Layout ：视图布局，显示的样式，选择字段的排版 Inbound Plugs ：转</description>
    </item>
    
    <item>
      <title> Web Dynpro ABAP - Structure </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproABAP_Structure/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproABAP_Structure/</guid>
      <description>一般的程序框架 Component Controller 组件控制器是定义全局的组建，与视图相似，组件控制器是一个程序对外的部分，是整个程序最开始执行的环节 ，也是控制多个视图间数据</description>
    </item>
    
    <item>
      <title> WebDynpro for JAVA </title>
      <link>https://coldinfire.github.io/2018/SAPWebDynproJAVA/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPWebDynproJAVA/</guid>
      <description>简介 Web Dynpro 在业务应用程序的主要结构和视觉设计部分的方式，在很大程度上是独立于实现语言. 一个Web Dynpro 组件不是一个JAVA类，而是一系列类集合所有</description>
    </item>
    
    <item>
      <title>BAPI总结列表</title>
      <link>https://coldinfire.github.io/2018/ABAP_BAPI_SUM/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BAPI_SUM/</guid>
      <description>本文主要记录一些收集来的BAPI 在SE38环境下的程序名输入栏 输入&amp;rsquo;DEMO&amp;rsquo;后按F4，你可以查到SAP所有的DEM</description>
    </item>
    
    <item>
      <title> RFC 介绍 </title>
      <link>https://coldinfire.github.io/2018/ABAP_RFC/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_RFC/</guid>
      <description>RFC : SAP Hlep Portal 链接 什么是 RFC RFC 是 SAP 系统和其他（SAP 或非 SAP）系统间的一个重要而常用的双向接口技术，也被视为 SAP 与外部通信的基本协议。简单地说，R</description>
    </item>
    
    <item>
      <title> SM30表维护 </title>
      <link>https://coldinfire.github.io/2018/ABAP_SM30/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SM30/</guid>
      <description>表维护创建 创建自定义表 需要设置为 Display/Maintenance Allowed.允许修改，才可以在SM30中进行数据维护。否则会产生以下异常： 创建表维护 权限组：控制访问权</description>
    </item>
    
    <item>
      <title>BDC屏幕录制</title>
      <link>https://coldinfire.github.io/2018/ABAP_BDC/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_BDC/</guid>
      <description>定义BDC (Batch Data Communication) BDC：SAP常用的一种数据传输方法。用于一些数据量大，但对速度要求不高的数据传输. 基本流程 Step1 获取源数据 一般情况下，在进行传</description>
    </item>
    
    <item>
      <title>SAP ABAP中自定义权限对象</title>
      <link>https://coldinfire.github.io/2018/SAPAuthorization_details/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPAuthorization_details/</guid>
      <description>自定义权限对象流程 SAP 扩展中用户往往都需要使用自己的权限对象，为了达到目的，请按下列流程建立和维护权限对象。一旦有账号需要赋予权限，直接用 SAP 系</description>
    </item>
    
    <item>
      <title>SAP Authorization</title>
      <link>https://coldinfire.github.io/2018/SAPAuthorization/</link>
      <pubDate>Sat, 22 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAPAuthorization/</guid>
      <description>TCode简介 SU01：查看和编辑Role SU10：实现对用户组的批量维护 SU20：权限字段清单，可以增、删、改权限字段，可以浏览字段具体被</description>
    </item>
    
    <item>
      <title> 财务凭证冲销 </title>
      <link>https://coldinfire.github.io/2018/ABAP_FIVoucherReversal/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_FIVoucherReversal/</guid>
      <description>凭证的更改 1：已经过帐的 TCODE：FB02. 过完帐的允许更改的地方有限，只有凭证抬头文本，参照，分配，文本，原因代码等 2：预制凭证的更改.</description>
    </item>
    
    <item>
      <title>查找增强程序3</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance3/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance3/</guid>
      <description>一个功能非常全面的增强出口查找工具 *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; Report: zdamon_004 (V9) &amp;amp;* *&amp;amp; PJA Consultancy Services (www.pjas.com) &amp;amp;* *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; This report attmpts to find Enhancements, Program-Exits, BADIs &amp;amp;* *&amp;amp; and Business Transaction Events in a particular program/tcode. &amp;amp;* *&amp;amp; Last updated: 09 May 2007 &amp;amp;* *&amp;amp;--------------------------------------------------------------------&amp;amp;* *&amp;amp; Selection Texts: *&amp;amp; P_ALV ALV format *&amp;amp; P_AUTH Include authority-check search</description>
    </item>
    
    <item>
      <title>查找增强程序2</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance2/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance2/</guid>
      <description>查找增强出口和BADI *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Report Z_FIND_EXIT_AND_BADI *&amp;amp; *&amp;amp;---------------------------------------------------------------------* *&amp;amp; *&amp;amp; *&amp;amp;---------------------------------------------------------------------* report z_find_exit_and_badi no standard page heading. *&amp;amp;---------------------------------------------------------------------* *&amp;amp; Enter the transaction code that you want to search through in order *&amp;amp; to find which Standard SAP User Exits and BADIs *&amp;amp; *&amp;amp;---------------------------------------------------------------------* *&amp;amp; For field &amp;#39;SUBC&amp;#39; of table &amp;#39;TRDIR&amp;#39;: *&amp;amp; M Module Pool *&amp;amp; F Function group *&amp;amp; S Subroutine</description>
    </item>
    
    <item>
      <title>查找增强程序1</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance1/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance1/</guid>
      <description>利用t-code查找增强出口的程序工具 REPORT zdamon_005 NO STANDARD PAGE HEADING. TABLES : tstc, tadir, modsapt, modact, trdir, tfdir, enlfdir. TABLES : tstct. DATA : jtab LIKE tadir OCCURS 0 WITH HEADER LINE. DATA : field1(30). DATA : v_devclass LIKE tadir-devclass. PARAMETERS : p_tcode LIKE tstc-tcode OBLIGATORY. SELECT SINGLE * FROM tstc WHERE tcode EQ p_tcode.</description>
    </item>
    
    <item>
      <title>增强</title>
      <link>https://coldinfire.github.io/2018/ABAP_Enhance/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Enhance/</guid>
      <description>基本概念 SAP 增强已经发展过几代了，可参考 SAP 标准教材 BC425 和 BC427。 SAP 增强从用途来说分 数据元素增强 菜单增强 屏幕增强 功能增强 SAP 增强从实现方式来说分</description>
    </item>
    
    <item>
      <title>复制其他的内表/结构到当前表/结构</title>
      <link>https://coldinfire.github.io/2018/ABAP_TableCopyFields/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TableCopyFields/</guid>
      <description>有时需要创建一个结构，但是字段和其他表或则结构类似，就可以采用复制的方式快速创建，而不用一个一个字段去输入。 1.SE11选择需要添加字段的表</description>
    </item>
    
    <item>
      <title> Field Symbols </title>
      <link>https://coldinfire.github.io/2018/ABAP_FieldSymbol/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_FieldSymbol/</guid>
      <description>字段符号 定义: FIELD-SYMBOLS: &amp;lt;fs&amp;gt; TYPE ANY TABLE. FIELD-SYMBOLS: &amp;lt;fs&amp;gt; LIKE LINE OF &amp;lt;t_TABLE&amp;gt;. FIELD-SYMBOLS: &amp;lt;fs&amp;gt; TYPE ANY. &amp;lt;1&amp;gt; FS必须和某个变量，结构或者内表绑定后才能使用，在使用FS前必须分配给某个变量，不然会发生FS</description>
    </item>
    
    <item>
      <title>Dialog程序实例</title>
      <link>https://coldinfire.github.io/2018/ABAP_DialogTmp/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DialogTmp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dialog程序知识汇总</title>
      <link>https://coldinfire.github.io/2018/ABAP_DialogDetail/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DialogDetail/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dialog程序简介</title>
      <link>https://coldinfire.github.io/2018/ABAP_Dialog/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Dialog/</guid>
      <description>TCode SE51：屏幕操作器 SE41：菜单编辑器 ABAP与Dialog交互方式 ABAP程序与Dialog屏幕进行数据交换的方式，通过在程序中定义一</description>
    </item>
    
    <item>
      <title> List ALV Demo </title>
      <link>https://coldinfire.github.io/2018/ABAP_LISTALV_DEMO/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_LISTALV_DEMO/</guid>
      <description>程序实例 *&amp;amp;--------------------------------------- *&amp;amp; Report ZWR_PI_LOG *&amp;amp;---------------------------------------- REPORT zwr_pi_log. TABLES: lqua ,zpidoc. TYPE-POOLS: slis. DATA: lt_pidoc TYPE STANDARD TABLE OF zpidoc, ls_pidoc TYPE zpidoc . &amp;#34;ALV Data&amp;#34; DATA: gt_fieldcat TYPE lvc_t_fcat, gs_fieldcat TYPE lvc_s_fcat, lw_layout TYPE lvc_s_layo. &amp;#34;Select screen&amp;#34; SELECTION-SCREEN BEGIN OF LINE. SELECTION-SCREEN POSITION 1. PARAMETERS: p_chk1 RADIOBUTTON GROUP zr01 DEFAULT &amp;#39;X&amp;#39; USER-COMMAND zchg. SELECTION-SCREEN COMMENT 3(8) text-002 FOR FIELD p_chk1. SELECTION-SCREEN POSITION 12. PARAMETERS: p_chk2 RADIOBUTTON</description>
    </item>
    
    <item>
      <title> VOFM使用 (例程开发) </title>
      <link>https://coldinfire.github.io/2018/SAP_VOFM/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/SAP_VOFM/</guid>
      <description>例程介绍 ​ SAP ERP 实施中，经常会用到例程开发 (TCODE:VOFM)。这个开发目前我用到的是影响 SD 和 MM 的定价过程。创建例程需要 ACCESS KEY，这个可以</description>
    </item>
    
    <item>
      <title> ABAP定义Range </title>
      <link>https://coldinfire.github.io/2018/ABAP_Range/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Range/</guid>
      <description>Range使用 Range Table为SAP R/3系统标准内表的一种，结构与Selection Table一致，由SIGN,OPTION,LOW,HIG</description>
    </item>
    
    <item>
      <title>Smartforms Barcode</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_Barcode/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_Barcode/</guid>
      <description>Smartforms 打印条码 传统的：将数据发送到打印机上，由打印机将数据转换成 条码图案，然后进行打印。 在 SAP Smartforms 里实现条码打印。在客户机里安装 www.tec-it.com 里的插件 1.定义输</description>
    </item>
    
    <item>
      <title>负号前置</title>
      <link>https://coldinfire.github.io/2018/ABAP_Negative_sign_front/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Negative_sign_front/</guid>
      <description>负号前置 SAP 系统中，很多种情况下负号都是在数字后面，如果在显示或计算数据时需要将负号放到数字前面。 调用系统BAPI 可以使用 function module：CL</description>
    </item>
    
    <item>
      <title>ABAP弹出框设置</title>
      <link>https://coldinfire.github.io/2018/ABAP_PopUpBox/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_PopUpBox/</guid>
      <description>可输入弹出框：POPUP_GET_VALUES_USER_HELP &amp;#34;输入表格，SVAL相应的字段信息决定显示的效果：&amp;#34; tabname = &amp;#39;AFKO&amp;#39;.</description>
    </item>
    
    <item>
      <title>物料单位转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_CONVERT_MATERIAL_UNIT/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_CONVERT_MATERIAL_UNIT/</guid>
      <description>MARM物料单位转换 call function &amp;#39;MD_CONVERT_MATERIAL_UNIT&amp;#39; exporting i_matnr = matnr i_in_me = in_me i_out_me = out_me i_menge = in_menge importing e_menge = out_menge exceptions error_in_application = 1 error = 2 others = 3 . if sy-subrc &amp;lt;&amp;gt; 0. MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4. endif. 取字段简短描述 DATA inttab LIKE STANDARD TABLE</description>
    </item>
    
    <item>
      <title>开发常用Tcode汇总</title>
      <link>https://coldinfire.github.io/2018/ABAP_Tcode/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Tcode/</guid>
      <description>ABAP 常用 TCode TCode Description TCode Description SPRO 显示后勤 SE18 BADI Builder ST05/SE30 系统跟踪/系统性能详细跟踪 SE19 BADI Implement ST22 查看日志信息 SE24 创建、修改、查询类对象 SM12 编辑锁定解除 SE21 创建、修改、查询包的</description>
    </item>
    
    <item>
      <title>ALV控制单元格不可编辑</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALVEditControl/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALVEditControl/</guid>
      <description>实现ALV单元格不可编辑 如果已经把ALV中的整列设为可编辑，而只想让这个列中的某些单元格不可编辑，可以使用以下这种方法。 具体单元格可编辑状态</description>
    </item>
    
    <item>
      <title> 修改文件所属 Package </title>
      <link>https://coldinfire.github.io/2018/ABAP_Package/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Package/</guid>
      <description>​ 创建 ABAP 程序的时候都要选择一个 Package，当后续需要修改程序所属的Package时可以使用以下方法： 通过SE38或则SE80打开对应的程</description>
    </item>
    
    <item>
      <title>Smartforms循环打印，页码统计</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_LoopPrint/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_LoopPrint/</guid>
      <description>Smartforms循环打印数据 在smartforms的使用中，偶尔会遇到客户要求按某一条件进行数据的分组打印，并进行页码的统计和区分，这里</description>
    </item>
    
    <item>
      <title>Smartforms 分页打印</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_page/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_page/</guid>
      <description>Smartform中的table节点插入分页 Command Node 在 smartforms 的 loop 节点中可以插入一个 command node 用来强制分页，那么如何在 table 节点中插入分页的 command node 呢？这要利用到t</description>
    </item>
    
    <item>
      <title>Smartforms调用模板</title>
      <link>https://coldinfire.github.io/2018/ABAP_SmartfomrsDemo/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SmartfomrsDemo/</guid>
      <description>程序中使用Smartform模板 &amp;#34;SMARTFORMS变量定义&amp;#34; DATA: form_name TYPE tdsfname VALUE &amp;#39;ZZ_TEST&amp;#39;, &amp;#34;Smartforms Name&amp;#34; fm_name type rs38l_fnam, &amp;#34;Function Name&amp;#34; control type ssfctrlop, &amp;#34;Control structure&amp;#34; option type ssfcompop, &amp;#34;Smart Composer (transfer) options&amp;#34; ssfcrescl type ssfcrescl. &amp;#34;Return value</description>
    </item>
    
    <item>
      <title>Smartforms 连续打印</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_Print/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_Print/</guid>
      <description>Smartforms 设置参数实现连续打印 调用 smartforms 时直接调用打印机打印，不出现打印预览窗口 DATA: fm_name TYPE rs38l_fnam. DATA: control_param TYPE ssfctrlop . DATA: composer_param TYPE ssfcompop . control_param-langu = sy-langu. control_param-no_open = &amp;#39;X&amp;#39;. control_param-no_close = &amp;#39;X&amp;#39;. control_param-no_dialog = &amp;#39;X&amp;#39;. &amp;#34; Not show dialog &amp;#34; composer_param-tddest = &amp;#39;LP01&amp;#39;. &amp;#34; Printer</description>
    </item>
    
    <item>
      <title>Smart forms统计打印次数</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartform_PrintTimes/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartform_PrintTimes/</guid>
      <description>打印次数的记录 通过参数控制和对调用 Smart forms 完成后返回的参数值，判断用户是否完成Form打印。 DATA: fm_name TYPE rs38l_fnam. DATA: control_param TYPE ssfctrlop . DATA: composer_param TYPE ssfcompop . DATA: output_info TYPE ssfcrescl. composer_param-tdiexit = &amp;#39;X&amp;#39;. &amp;#34; 预览打印</description>
    </item>
    
    <item>
      <title>Smartforms常见问题</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartforms_Utils/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartforms_Utils/</guid>
      <description>中文乱码问题 如果预览时中文正常，打印出来是乱码的情况，可以尝试在中文环境下重新维护并激活。再次打印应该可以解决。如果还有问题，则检查语言包是</description>
    </item>
    
    <item>
      <title>Smartforms</title>
      <link>https://coldinfire.github.io/2018/ABAP_Smartforms/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Smartforms/</guid>
      <description>Smartforms 使用 在 SAP 的 ABAP 编程中，一般开发过程都是在 Report 程序中取出所有需要的数据，将数据进行相应的处理以后保存到输出内表中，再打印内表中的数据。 但是 SmartForms 是一</description>
    </item>
    
    <item>
      <title>ALV添加复选框，并添加全选，不全选功能</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_CHECKBOX/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_CHECKBOX/</guid>
      <description>定义结构中定义该字段 DATA: BEGIN OF gt_print OCCURS 10, CHECKBOX TYPE flag, ...... DATA: END OF gt_print. FIELDCAT添加并定义CheckBox &amp;#34;$. Region ALV_Data&amp;#34; TYPE-POOLS:slis. DATA: alv_fieldcat TYPE STANDARD TABLE OF slis_fieldcat_alv WITH HEADER LINE, alv_layout TYPE slis_layout_alv. alv_fieldcat-fieldname = &amp;#39;CHECKBOX&amp;#39;. alv_fieldcat-scrtext_m = &amp;#39;Choose&amp;#39;. alv_fieldcat-checkbox =</description>
    </item>
    
    <item>
      <title>报表开发&lt;OO ALV工具&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV4/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV4/</guid>
      <description>显示后，修改字段目录和布局 通过方法在第一次显示之后，设置一个新的布局或则字段目录。 方法 字段目录：GET_FRONTEND_FIELDCATA</description>
    </item>
    
    <item>
      <title>SAP锁机制</title>
      <link>https://coldinfire.github.io/2018/ABAP_Lock/</link>
      <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Lock/</guid>
      <description>一、SAP 为什么要设置锁： 1，保持数据的一致性 同时多个用户操作同一数据，防止数据出现不一致性而采用了锁机制。一般 sap 会在操作数据前设置锁，防止</description>
    </item>
    
    <item>
      <title>OO语法</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV2/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV2/</guid>
      <description>类声明和实现 类具有属性和方法 对象是类的实例 对象是通过指针变量来访问的 对象有独立的 interface *Class Declarations CLASS application DEFINITION. PUBLIC SECTION. METHODS: show_text. PRIVATE SECTION. DATA text(100) TYPE c VALUE &amp;#39;This is my first ABAP Object.&amp;#39;. ENDCLASS. *Class Implementation CLASS application IMPLEMENTATION. METHOD</description>
    </item>
    
    <item>
      <title>OO ALV实例程序</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV3/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV3/</guid>
      <description>OO ALV简单实例：其中屏幕的创建， 和对应PAI,PBO以及Status title等可以自定调整。 REPORT zoo_alv. TYPE-POOLS: slis. *-- Global data Decleration. TYPES:BEGIN OF ty_output, ebeln TYPE ebeln, aedat TYPE erdat, ernam TYPE ernam, ebelp TYPE</description>
    </item>
    
    <item>
      <title>报表开发&lt;OO ALV&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_OOALV1/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OOALV1/</guid>
      <description>OO ALV ALV GRID CONTROL 使用了控制器技术以实现屏幕显示，和所有的控制器一样，ALV GRID CONTROL 通过系统中的一个全局的类提供了方法，以响应它的动作. 使用了 ABAP 的对象以</description>
    </item>
    
    <item>
      <title>报表开发&lt;常用工具&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Utils/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Utils/</guid>
      <description>单元格中的数据被修改后，将ALV单元格中的数据立即刷新到ABAP对应的内表中 方法一：通过对REUSE_ALV_GRID_DISPLAY函数参</description>
    </item>
    
    <item>
      <title>Field Catalog 字段排坑</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Display_util/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Display_util/</guid>
      <description>原文链接：https://blog.csdn.net/zhongguomao/article/details/77774206 对于初写 ALV 的 A</description>
    </item>
    
    <item>
      <title>报表开发&lt;ALV显示设置&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Display/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Display/</guid>
      <description>ALV Display相关的FM &amp;lt;1&amp;gt; REUSE_ALV_FIELDCATALOG_MERGE：根据内表结构自动生成FIELDCAT字段结构信息。 &amp;lt;2&amp;gt; R</description>
    </item>
    
    <item>
      <title>报表开发&lt;内表操作&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_InnerTable/</link>
      <pubDate>Sat, 23 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_InnerTable/</guid>
      <description>内表操作 SQL 语句的执行顺序 书写顺序：SELECT [DISTINCT]&amp;ndash;&amp;gt;FROM&amp;ndash;&amp;gt;WHERE&amp;ndash;&amp;gt;GROUP BY&amp;ndash;&amp;gt;HAVING&amp;ndash;&amp;gt;UNION&amp;ndash;&amp;gt;ORDER BY 其执行顺序为：FROM&amp;ndash;&amp;gt;WHERE&amp;ndash;&amp;gt;GROUP BY&amp;ndash;&amp;gt;HAVING&amp;ndash;&amp;gt;SELECT&amp;ndash;&amp;gt;DISTINCT&amp;ndash;&amp;gt;UNION-&amp;gt;ORDER</description>
    </item>
    
    <item>
      <title>报表开发&lt;屏幕设置&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Screen/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Screen/</guid>
      <description>选择屏幕 引用链接 屏幕触发事件 选择屏幕触发的是：AT SELECTION-SCREEN 对话屏幕触发的是：PAI 列表屏幕触发的是：AT USER-COMMAND SELECT-SCREEN SELECT-SCREEN语句用于创建</description>
    </item>
    
    <item>
      <title>报表开发&lt;概述&gt;</title>
      <link>https://coldinfire.github.io/2018/ABAP_ALV_Basic/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ALV_Basic/</guid>
      <description>报表格式 程序说明：包括程序名称，实现的业务功能等信息 数据定义 Include内容 定义选择屏幕 执行程序业务代码 创建TCode：SE93 执行程序的</description>
    </item>
    
    <item>
      <title> ABAP截取中文字符串 </title>
      <link>https://coldinfire.github.io/2018/ABAP_StrCNChina/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_StrCNChina/</guid>
      <description>截取包含中文字符串 strlen() 只能计算包含英文字符串的长度，不能计算中文字符串的长度。 可以通过cl_abap_list_utilities=&amp;gt;d</description>
    </item>
    
    <item>
      <title> ABAP通过字段找表程序 </title>
      <link>https://coldinfire.github.io/2018/ABAP_FieldFindProgram/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_FieldFindProgram/</guid>
      <description>获取数据保存在哪个表 前台对指定栏位 使用 F1 帮助找表 ST05 跟踪业务操作过程，检索需要的数据表.（此方法找表很高效） 对于文本字段找表，可以找到前台维护</description>
    </item>
    
    <item>
      <title>红绿灯</title>
      <link>https://coldinfire.github.io/2018/ABAP_TrafficLight/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TrafficLight/</guid>
      <description>定义 TYPE-POOLS:icon,sym,slis,col. DATA: l_alv_filed TYPE slis_fieldcat_alv, l_alv_filedcat TYPE slis_t_fieldcat_alv. TYPES:BEGIN OF str_alv, id TYPE char25, xxx TYPE xxx, xxx TYPE xxx, xxx TYPE xxx, xxx TYPE string, END OF str_alv. DATA:it_alv TYPE STANDARD TABLE OF str_alv WITH HEADER LINE. CONSTANTS: c_green TYPE icon-id VALUE &amp;#39;@08@&amp;#39;, c_yellow TYPE icon-id VALUE &amp;#39;@09@&amp;#39;, c_red TYPE icon-id VALUE &amp;#39;@0A@&amp;#39;. 赋值 IF it_return-type = &amp;#39;E&amp;#39;. it_alv-id = c_red. CALL FUNCTION &amp;#39;BAPI_TRANSACTION_ROLLBACK&amp;#39;. ELSE. it_alv-id</description>
    </item>
    
    <item>
      <title>小数后面去除后缀0</title>
      <link>https://coldinfire.github.io/2018/ABAP_EndZero/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_EndZero/</guid>
      <description>小数后面去除后缀 0 FORM DATA_DELETE_ZERO using p_field z_result. DATA:var1 TYPE p DECIMALS 3, var2 TYPE p DECIMALS 2, var3 TYPE p DECIMALS 1, var4 TYPE i. move p_field to var1. move p_field to var2. move p_field to var3. move p_field to var4. IF var2 = var1. IF var3 = var1. IF var4 = var1. z_result = var4. ELSE. z_result = var3. ENDIF. ELSE. z_result</description>
    </item>
    
    <item>
      <title>表维护添加修改人信息</title>
      <link>https://coldinfire.github.io/2018/ABAP_TableMaintainAddUser/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_TableMaintainAddUser/</guid>
      <description>添加修改人信息 可以根据TCode进行相应的判断： 创建人信息: l_wa_head-ernam = sy-uname. l_wa_head-erdat = sy-datum. l_wa_head-erzet = sy-uzeit. call function &amp;#39;TERMINAL_ID_GET&amp;#39; exporting username = sy-uname importing terminal = l_wa_head-eterminal exceptions multiple_terminal_id = 1 no_terminal_found = 2 others = 3. 修改人信息： l_wa_head-urnam = sy-uname. l_wa_head-urdat</description>
    </item>
    
    <item>
      <title>数据输入输出转换</title>
      <link>https://coldinfire.github.io/2018/ABAP_DataConversion/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DataConversion/</guid>
      <description>输入输出转换 如果某个变量参照的数据所对应的Domain具有转换规则，在(Write,ALV,文本框显示)，最后结果会自动转换。 通过转换规则输</description>
    </item>
    
    <item>
      <title>ABAP程序间调用</title>
      <link>https://coldinfire.github.io/2018/ABAP_ProgramCall/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ProgramCall/</guid>
      <description>同步调用 在一个程序中调用其他ABAP程序。有两种方式 中断执行 调用程序被打断，当被调用程序执行完毕之后，调用程序继续执行。 CALL FUNCTION [function]. SUBMIT [program] AND RETURN. CALL TRANSACTION [TCode].</description>
    </item>
    
    <item>
      <title>ABAP 性能优化(程序逻辑)</title>
      <link>https://coldinfire.github.io/2018/ABAP_ProgramOpt/</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_ProgramOpt/</guid>
      <description>性能分析工具 ​ SE30(旧)；SAT(新)：运行时间分析工具 ​ ST12: 程序优化 READ TABLE &amp;hellip;WITH [TABLE] KEY&amp;hellip;BINARY SEARCH读取标准内表使用二分查找 在循环（LOOP AT &amp;h</description>
    </item>
    
    <item>
      <title>ABAP 性能优化(数据操作)</title>
      <link>https://coldinfire.github.io/2018/ABAP_DatabaseOpt/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_DatabaseOpt/</guid>
      <description>性能分析工具 ST05：性能分析，追踪 SQL，分析哪条 SQL Statement 语句，最耗时间 STAD：得到某个程序或事务运行时的总体分析数据，系统时间，CPU 时间</description>
    </item>
    
    <item>
      <title>ABAP Message 处理</title>
      <link>https://coldinfire.github.io/2018/ABAP_Message/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Message/</guid>
      <description>MESSAGE ：SE91 消息类的操作 使用 T-CODE:SE91 对 Message 定义，还能够对 Message 进行创建，修改及删除等维护操作。Message Short Text 字段为类描述，可以定义输入参数&amp;amp;</description>
    </item>
    
    <item>
      <title>ABAP Native SQL</title>
      <link>https://coldinfire.github.io/2018/ABAP_NativeSQL/</link>
      <pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_NativeSQL/</guid>
      <description>Native SQL EXEC SQL 和 ADBC 是所谓的 Native SQL，这种方式直接进入指定数据库，不涉及到 DBI，这样就没有 Table buffer。相对 EXEC SQL 来说，更推荐 ADBC 的方式执行 native sql</description>
    </item>
    
    <item>
      <title>ABAP Open SQL</title>
      <link>https://coldinfire.github.io/2018/ABAP_OpenSQL/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_OpenSQL/</guid>
      <description>Open SQL ABAP可以通过两种方式与数据库交互 Native SQL:数据库自身的SQL，可以直接访问数据库，不够安全。 Open SQL:集成到ABAP中的标准SQL子</description>
    </item>
    
    <item>
      <title>ABAP Form和Function</title>
      <link>https://coldinfire.github.io/2018/ABAP_SubRoutines/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_SubRoutines/</guid>
      <description>全局变量，局部变量 报表程序中：选择屏幕事件块(AT SELECTION-SCREEN),逻辑数据库事件块，及methods，subroutin</description>
    </item>
    
    <item>
      <title>ABAP 内表</title>
      <link>https://coldinfire.github.io/2018/ABAP_InnerTable/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_InnerTable/</guid>
      <description>内表定义 工作区域 工作区域可以存放多个变量数据,相当于一维数组。 通过Type声明自定义工作区：需要使用Data进行初始化赋值 TYPES: BEGIN OF str_name. aufnr TYPE afko-aufnr, &amp;#34; Order</description>
    </item>
    
    <item>
      <title>ABAP 数据表</title>
      <link>https://coldinfire.github.io/2018/ABAP_Table/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Table/</guid>
      <description>Table:透明表(Transparent table)、簇表 (Cluster table)、 池表(Pool table) 透明表： 和数据库具有相同结构的表存储结构。数据库</description>
    </item>
    
    <item>
      <title>ABAP 数据类型</title>
      <link>https://coldinfire.github.io/2018/ABAP_Basis/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAP_Basis/</guid>
      <description>ABAP基本数据类型 基本数据类型 Type Description Type Description C Character text D Date(YYYYMMDD) N Numeric text(不能进行计算) T Time(HHMMSS) I Integer F Floating point P Packed(包类型:1-16) X 十六进制 常用</description>
    </item>
    
    <item>
      <title>Maven Plugin Goal</title>
      <link>https://coldinfire.github.io/2018/WEB_Maven_Plugin/</link>
      <pubDate>Sat, 17 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Maven_Plugin/</guid>
      <description>Maven 插件 Maven 插件主要是为 maven 中生命周期中的阶段服务，maven 中只定义了生命周期，以及生命周期的阶段，具体每个阶段中执行何种操作，完全交由插件决定</description>
    </item>
    
    <item>
      <title>Maven构建生命周期</title>
      <link>https://coldinfire.github.io/2018/WEB_Maven_LifeCycle/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Maven_LifeCycle/</guid>
      <description>项目生命周期 Maven有三套相互独立的生命周期，分别是：clean、default、site。 clean：清理项目 default：构件项目，</description>
    </item>
    
    <item>
      <title>Maven依赖管理</title>
      <link>https://coldinfire.github.io/2018/WEB_Maven_Dependency/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Maven_Dependency/</guid>
      <description>依赖管理 依赖范围 Maven在编译主代码的时候需要使用一套 classpath，在编译和执行测试的时候会使用另一套 classpath，实际运行项</description>
    </item>
    
    <item>
      <title>Maven-POM标签大全详解</title>
      <link>https://coldinfire.github.io/2018/WEB_Maven_POM/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Maven_POM/</guid>
      <description>引用链接：菜鸟教程 POM 基本配置 &amp;lt;project &amp;gt; ：文件的根节点 . &amp;lt;modelversion &amp;gt; ： pom.xml使用的对象模型版本 &amp;lt;groupId &amp;gt; ：项目名称，一般写项目的域名 &amp;lt;artifactId &amp;gt; ：模块名称，子项目</description>
    </item>
    
    <item>
      <title>Maven使用</title>
      <link>https://coldinfire.github.io/2018/WEB_Maven/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/WEB_Maven/</guid>
      <description>Maven简介 什么是Maven Maven 是 apache 下的开源项目，自动化构件工具，服务于java的项目构件和依赖管理。 Maven 采用引用的方式将依赖的 jar 包引入项目，</description>
    </item>
    
    <item>
      <title> Hugo添加搜索功能(Algolia)  </title>
      <link>https://coldinfire.github.io/2018/hugo2/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/hugo2/</guid>
      <description>Algolia：博客框架 https://www.algolia.com/ Algolia配置 ​ ​ 记录API Keys相关信息： Application ID Search-Only API Key Admin API Key Hugo设置 在配置文件config中添加一下内容</description>
    </item>
    
    <item>
      <title> 使用Hugo&#43;GitHub Pages快速搭建博客  </title>
      <link>https://coldinfire.github.io/2018/hugo1/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/hugo1/</guid>
      <description>工具准备 Hugo：博客框架 https://github.com/gohugoio/hugo Git：用来发布博客内容 https://git-scm.com/ Github：保存和显示博客内容 https://github.com/ MarkDown编辑软件：用来进行博客文章的编辑 Typora C</description>
    </item>
    
    <item>
      <title>Git学习与总结</title>
      <link>https://coldinfire.github.io/2018/Git/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/Git/</guid>
      <description>Git本地结构 Workspace： 工作区，实际操作的目录。 Index / Stage： 暂存区，数据暂时存放的区域，可在工作区和版本库之间进行数据的友好交</description>
    </item>
    
    <item>
      <title> Shell 脚本-流程控制</title>
      <link>https://coldinfire.github.io/2018/LinuxShellFlow/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxShellFlow/</guid>
      <description>退出状态 命令（包括我们编写的脚本和 shell 函数）在终止时向系统发出一个值，称为退出状态。该值是 0 到 255 范围内的整数，表示命令执行成功或失败。按照惯例</description>
    </item>
    
    <item>
      <title> Shell 脚本</title>
      <link>https://coldinfire.github.io/2018/LinuxShell/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxShell/</guid>
      <description>什么是Shell脚本 简单来说，shell 脚本是包含一系列命令的文件。shell 读取此文件并执行命令，就像它们已直接在命令行上输入一样。she</description>
    </item>
    
    <item>
      <title> Linux软件包管理 </title>
      <link>https://coldinfire.github.io/2018/LinuxYum/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxYum/</guid>
      <description>安装包分类 源码包 源码包：即程序软件的源代码（将软件的源码以 tar 打包后再压缩的资源包）。 RPM 最大的特点就是需要安装的软件已经编译过，并已经打包成 RPM</description>
    </item>
    
    <item>
      <title> Linux链接和网络管理 </title>
      <link>https://coldinfire.github.io/2018/LinuxLn/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxLn/</guid>
      <description>软链接 创建：ln -s 源路径 目标路径 特点：删除链接文件，源文件无影响；删除源文件，链接文件失效；修改其中一个文件，两个内容都改变；可以跨分区 指向</description>
    </item>
    
    <item>
      <title> Linux 权限管理 </title>
      <link>https://coldinfire.github.io/2018/LinuxAuth/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxAuth/</guid>
      <description>用户权限 增删改查用户 增 useradd username：创建用户 passwd username：设置用户密码 -u：指定用户的UID -g：修改用户GID -d：修改用户的</description>
    </item>
    
    <item>
      <title> Linux Vim使用 </title>
      <link>https://coldinfire.github.io/2018/LinuxVim/</link>
      <pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxVim/</guid>
      <description>文件编辑：Vim 1）.命令行模式command mode） 控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，</description>
    </item>
    
    <item>
      <title> Linux文件操作 </title>
      <link>https://coldinfire.github.io/2018/LinuxFile/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/LinuxFile/</guid>
      <description>文件 ex: -rw--w-r-- 1 user group day month time text.xx 第一个文件代表意义(0)： d：目录 -：文件 I：链接文档 b：可随机存储装置 c：串行端口设备 后续文字意义： 1、三个为一组均</description>
    </item>
    
    <item>
      <title> Linux基础 </title>
      <link>https://coldinfire.github.io/2018/Linux/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/Linux/</guid>
      <description>主要内容 Linux目录组成结构及文件的增删改查，用户，权限管理 Linux软件包管理、磁盘管理 Linux网络基础 Linux状态监控命令 Linu</description>
    </item>
    
    <item>
      <title> HTTP解析 </title>
      <link>https://coldinfire.github.io/2018/HTTP/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/HTTP/</guid>
      <description>引言 HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，</description>
    </item>
    
    <item>
      <title>JQuery基础</title>
      <link>https://coldinfire.github.io/2017/WEB_JQuery/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_JQuery/</guid>
      <description>jQuery 知识总结 jQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。</description>
    </item>
    
    <item>
      <title>JavaScript其它技术点汇总</title>
      <link>https://coldinfire.github.io/2017/WEB_JavaScript_Improve/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_JavaScript_Improve/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Easy UI 技术总结</title>
      <link>https://coldinfire.github.io/2017/WEB_EasyUI/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_EasyUI/</guid>
      <description>Easy UI使用场景</description>
    </item>
    
    <item>
      <title>网页 BOM 知识汇总</title>
      <link>https://coldinfire.github.io/2017/WEB_BOM/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_BOM/</guid>
      <description>浏览器对象模型 (BOM) BOM 使 JavaScript 有能力与浏览器&amp;quot;对话&amp;quot;。 包含对象列表 对象 描述 对象 描述 对象 描述 Window 窗口对象 History 历史纪录对象 Navigator 浏览器对象 Screen</description>
    </item>
    
    <item>
      <title>DOM 知识汇总</title>
      <link>https://coldinfire.github.io/2017/WEB_DOM/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_DOM/</guid>
      <description>DOM 标准分类 核心 DOM：针对任何结构化文档的标准模型 Document：文档对象 Element：元素对象 Attribute：属性对象 Text：文</description>
    </item>
    
    <item>
      <title>JavaScript对象</title>
      <link>https://coldinfire.github.io/2017/WEB_JavaScript_Object/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_JavaScript_Object/</guid>
      <description>JavaScript 对象 JavaScript的对象是一种带有属性和方法的无序的集合数据类型，它由若干键值对组成。 属性是与对象相关的值 方法是能够在对象上执行的动</description>
    </item>
    
    <item>
      <title>JavaScript基础</title>
      <link>https://coldinfire.github.io/2017/WEB_JavaScript_Basic/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_JavaScript_Basic/</guid>
      <description>JavaScript ( ECMAScript )是一个脚本语言。它是一个轻量级，但功能强大的编程语言。 浏览器组成 渲染引擎 用来解析 HTML 与 CSS，俗称内核。 JS 引擎 JS 解释器，用来读取网页中</description>
    </item>
    
    <item>
      <title>Bootstrap学习与总结</title>
      <link>https://coldinfire.github.io/2017/WEB_Bootstrap/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_Bootstrap/</guid>
      <description>Bootstrap 介绍 Bootstrap，来自 Twitter，前端开发框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使</description>
    </item>
    
    <item>
      <title>页面布局方式汇总</title>
      <link>https://coldinfire.github.io/2017/WEB_Layout_Type/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_Layout_Type/</guid>
      <description>响应式开发 响应式开发原理 使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。 响应式布局容器 响应式需要一个父级做为布局</description>
    </item>
    
    <item>
      <title>CSS3 知识总结</title>
      <link>https://coldinfire.github.io/2017/WEB_CSS3_Attributes/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_CSS3_Attributes/</guid>
      <description>CSS3 新增选择器 属性选择器 可以根据元素特定属性选择元素。这样就可以不借助于类或则 id 选择器。 选择符 简介 E[att] 选择具有 att 属性的 E 元素 E[att=&amp;ldquo;val&amp;rdquo;] 选择具有 att 属性且 att=val</description>
    </item>
    
    <item>
      <title>CSS字体图标和用户界面样式</title>
      <link>https://coldinfire.github.io/2017/WEB_CSS_FontIMG/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_CSS_FontIMG/</guid>
      <description>文字图标库：阿里图标库 文字图标：icon font 使用场景：主要用于显示网页中通用、常用的一些结构和样式比较简单的小图标 字体图标可以为前端工程师提供</description>
    </item>
    
    <item>
      <title>CSS精灵图</title>
      <link>https://coldinfire.github.io/2017/WEB_CSS_Sprites/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_CSS_Sprites/</guid>
      <description>为什么需要精灵图 一个网页中往往会应用很多小的背景图像作为修饰，当网页中图像过多时，会产生多次的服务器请求，造成服务器请求压力增加，将大大降低</description>
    </item>
    
    <item>
      <title>Web页面布局</title>
      <link>https://coldinfire.github.io/2017/WEB_Layout/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_Layout/</guid>
      <description>语义化标签 &amp;lt;header&amp;gt; - Defines a header for a document or a section &amp;lt;nav&amp;gt; - 定义一组导航链接 &amp;lt;article&amp;gt; - 定义一块独立的独立内容 &amp;lt;section&amp;gt; - 在文档中定义一块独立的内容主题分组部分 &amp;lt;aside&amp;gt; - 定义核心内容之外</description>
    </item>
    
    <item>
      <title>CSS高级功能实现</title>
      <link>https://coldinfire.github.io/2017/WEB_CSS_Improve/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_CSS_Improve/</guid>
      <description>三角形实现 普通三角形 通过 border 设置实现三角形：BOX 的宽和高设置为 0，border的边框设置为透明色，指定对应边的border大小和颜色即可实现</description>
    </item>
    
    <item>
      <title>CSS属性</title>
      <link>https://coldinfire.github.io/2017/WEB_CSS_Attributes/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_CSS_Attributes/</guid>
      <description>CSS 属性介绍 文字文本属性 文字属性 文字颜色：color: red; 十六进制：#FF0000 | #F00 RGB值：rgb(255,0,0) 颜色名字：red 文字字体</description>
    </item>
    
    <item>
      <title>CSS基础知识</title>
      <link>https://coldinfire.github.io/2017/WEB_CSS_Basic/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_CSS_Basic/</guid>
      <description>CSS基础知识 编码规则 编码统一为 utf-8； CSS 初始化 (CSS reset) 引入，不能随便更改； 使用双空格短缩进，只有这样才能保证代码能在所有渲染器中显示一致；</description>
    </item>
    
    <item>
      <title>HTML 基础知识汇总</title>
      <link>https://coldinfire.github.io/2017/WEB_HTMLBasic/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2017/WEB_HTMLBasic/</guid>
      <description>HTML基础汇总 HTML书写规范 文档类型声明及编码：统一为 HTML5 声明类型 &amp;lt;!DOCTYPE html&amp;gt;; 编码统一为 &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;, 书写时实现层次分明的缩进； 所有编码均遵循 XHTML 标准，标签</description>
    </item>
    
  </channel>
</rss>
