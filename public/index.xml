<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Small Fire`s Blog on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/</link>
    <description>Recent content in Small Fire`s Blog on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Mar 2019 17:20:58 +0800</lastBuildDate>
    <atom:link href="https://coldinfire.github.io/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Books</title>
      <link>https://coldinfire.github.io/books/</link>
      <pubDate>Thu, 15 Jun 2017 23:39:47 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/books/</guid>
      <description>

&lt;h3 id=&#34;开卷有益&#34;&gt;开卷有益&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;State&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img width=200/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width=500/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width=500/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1084336/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;小王子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/26952718/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;好好学习&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/26948148/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;好好说话&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1008145/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;围城&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/5346110/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;穷查理宝典&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/3533221/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;非暴力沟通&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1056295/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;人性的弱点&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://coldinfire.github.io/about/</link>
      <pubDate>Thu, 15 Jun 2017 23:39:47 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/about/</guid>
      <description>&lt;p&gt;这个人很懒，什么都没留下&amp;hellip;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Fiori简介 </title>
      <link>https://coldinfire.github.io/2019/FioriOverview/</link>
      <pubDate>Sat, 16 Mar 2019 17:20:58 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/2019/FioriOverview/</guid>
      <description>

&lt;h2 id=&#34;框架设计&#34;&gt;框架设计&lt;/h2&gt;

&lt;p&gt;SAP Fiori UI5有五种设计原则。这些原则使SAP Fiori变得简单，并将不同的事务分解为基于任务的简单UI应用程序。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于角色 - SAP已经分解了各种SAP事务并将其更改为漂亮的用户交互式应用程序，这些应用程序仅向用户显示最相关的信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;响应能力 - 当SAP Fiori与SAP HANA的强大功能相结合时，它提供了无与伦比的应用程序响应和查询执行时间。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;简单 - 为了使SAP Fiori易于满足用户需求，SAP将其设计为1-1-3方案。这意味着1个用户，1个用例和3个屏幕。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;无缝体验 - SAP提供了基于相同语言的所有Fiori应用程序，并且在部署和平台上无关紧要。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;令人愉快 - SAP Fiori旨在与ECC 6.0协同工作，使用户可以轻松地在现有SAP系统上进行部署。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SAP Fiori应用程序分为三类。它们的功能和基础设施要求非常突出。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;交易应用&lt;/li&gt;
&lt;li&gt;实况报道&lt;/li&gt;
&lt;li&gt;分析应用程序
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;交易应用程序最重要的功能是 ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SAP Fiori的第一个版本包括25个交易应用程序。&lt;/li&gt;
&lt;li&gt;SAP Fiori中的交易应用程序用于执行交易任务，例如经理 - 员工交易，例如请假请求，旅行请求等。&lt;/li&gt;
&lt;li&gt;事务性应用程序在SAP HANA数据库上运行最佳，但可以与任何性能可接受的数据库一起部署。这些应用程序允许用户在移动设备以及台式机或笔记本电脑上运行简单的SAP事务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实况报道的重要特征如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;实况表用于在业务操作中钻取关键信息和上下文信息。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;它还允许您将一个事实表导航到其所有相关的情况说明书。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;情况说明书还允许您导航到事务性应用程序以运行SAP事务。一些情况说明书还提供了地理地图的集成选项。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;您可以从Fiori Launchpad搜索结果，其他情况说明书或交易或分析应用程序中调用Fact Sheet。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;情况说明书仅在SAP HANA数据库上运行，并且还需要ABAP堆栈，并且无法将其移植到SAP HANA Live第2层架构。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分析应用程序用于&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提供有关业务操作的基于角色的实时信息。分析应用程序将SAP HANA的强大功能与SAP业务套件相集成。它从前端Web浏览器中的大量数据中提供实时信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;学习sap-fiori的先决条件&#34;&gt;学习SAP Fiori的先决条件：&lt;/h3&gt;

&lt;p&gt;● ABAP程序和对象&lt;/p&gt;

&lt;p&gt;● HTML5&lt;/p&gt;

&lt;p&gt;● JavaScript&lt;/p&gt;

&lt;p&gt;● SAP UI5&lt;/p&gt;

&lt;p&gt;● ERP实施经验&lt;/p&gt;

&lt;p&gt;● OData和SAP NetWeaver网关&lt;/p&gt;

&lt;p&gt;● SAP HANA&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> SAPUI5 </title>
      <link>https://coldinfire.github.io/2019/SAPUI5/</link>
      <pubDate>Sat, 16 Mar 2019 17:20:58 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAPUI5/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;h3 id=&#34;mvc模式&#34;&gt;MVC模式&lt;/h3&gt;

&lt;p&gt;​     MVC是程序设计的思想实现，通过将界面展示，用户操作，程序数据进行分离，降低模块间的耦合性，有利于项目的开发和维护。&lt;/p&gt;

&lt;p&gt;​    M : Model 代表应用程序的数据&lt;/p&gt;

&lt;p&gt;​    V : View 通过界面展示应用程序的数据和其它界面元素&lt;/p&gt;

&lt;p&gt;​    C : Controller 处理应用程序的数据，以及处理用户的交互&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/SAPUI5/MVC.png&#34; alt=&#34;MVC&#34; /&gt;&lt;/p&gt;

&lt;p&gt;● Model &amp;amp; View : SAPUI5 有单向绑定和双向绑定两种。通过绑定，当 model 变更时，UI 自动更新。&lt;/p&gt;

&lt;p&gt;● Controlle &amp;amp;View : View 通知 Controller，或者 Controller使用API来修改 View。&lt;/p&gt;

&lt;p&gt;● Controller &amp;amp; Model : Model 通知 Controller或者 Controller 修改 Model。&lt;/p&gt;

&lt;p&gt;SAPUI5提供了JSView、XMLView、JSONView和HTMLView。主要使用XMLView 和 JSView。&lt;/p&gt;

&lt;h3 id=&#34;核心类库&#34;&gt;核心类库&lt;/h3&gt;

&lt;p&gt;​   查看&lt;code&gt;Resource&lt;/code&gt;版本：Cttl+Shift+Alt+P在对应的App界面或则LunchPad.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m:&lt;/code&gt;主要用于移动设备的响应式组件，并支持很多移动设备特性检测，比如检测touch等，此库下面List, Table等组件使用比较广泛，而且包含了下拉刷新的功能，非常完善，并自动适应不同尺寸平台&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui:&lt;/code&gt; UI库包含的组件是最为丰富的，主要用于适应桌面平台，同样可以支持响应式的设计，比如sap.ui.table等组件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.core:&lt;/code&gt;核心功能：加载和管理所有的附加资源，并包含模型和渲染管理器，一个负责处理渲染视图和控制的单例，写入DOM&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.layout:&lt;/code&gt; 构建视图中元素的特殊控件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.vk:&lt;/code&gt; 包含3D模型的功能和控件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.unified:&lt;/code&gt; 包含用于移动和桌面应用程序的附加控件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.table:&lt;/code&gt; 不适用于手机屏幕，处理大量数据应用而构建的&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.comp:&lt;/code&gt; 包含SmartField,SmartFilterBar,SmartTable,ValueHelpDialog等智能控件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.uxap:&lt;/code&gt; 包含更多控件，包括页面标题&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ushell:&lt;/code&gt; 包含几个库包，含有所有统一的与shell服务相关的功能&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ca:&lt;/code&gt; 是官方标准app的常用类库，如果在实际开发过程当中想要拓展标准应用，必须要了解此类库的一些特性，否则拓展起来会有很大问题。&lt;/p&gt;

&lt;h3 id=&#34;核心函数&#34;&gt;核心函数&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;sap.ui.getCore()&lt;/code&gt; : 获取核心的实例&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.getCore().byId(id)&lt;/code&gt; : 根据组件id获取其控制；可用于获取已经删除的组件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.getCore().applyChanges()&lt;/code&gt; : 在系统运行前修改UI5组件属性&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jQuery.sap.domById(id)&lt;/code&gt; : 根据ID获取HTML元素;如果UI5也存在该ID返回HTML最顶层的元素;和 document.getElementById 类似&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jQuery.sap.byId(id)&lt;/code&gt; : 根据ID获取JQuery对象的DOM元素; $(,,#myId)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox&lt;/code&gt; : SAPUI5风格对话框显示&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.URLHelper.redirect(&amp;quot;http://www.jd.com&amp;quot;, true);&lt;/code&gt;重定向&lt;/p&gt;

&lt;h3 id=&#34;常用组件&#34;&gt;常用组件&lt;/h3&gt;

&lt;h4 id=&#34;splitapp&#34;&gt;SplitApp&lt;/h4&gt;

&lt;p&gt;​    SplitApp : 这是一个Master Detail形式的结构，可以在移动，桌面不同尺寸的设备上自适应，也是大部分app需要采用的一种架构形式。&lt;/p&gt;

&lt;h4 id=&#34;list&#34;&gt;List&lt;/h4&gt;

&lt;p&gt;List : 列表在任何应用中是比较常见的，List在SAPUI5定义功能比较完善，支持分批加载数据，提高运行效率，支持下拉等功能，并提供给我们丰富的标准Item, 可以简单配置使用，更可以根据自身需求定义item。&lt;/p&gt;

&lt;p&gt;​   对于移动设备来说，出于性能考虑，不要超过100行。使用&lt;strong&gt;growing&lt;/strong&gt;特性可以加速内部的渲染。&lt;/p&gt;

&lt;p&gt;​   List控件继承自&lt;code&gt;sap.m.ListBase&lt;/code&gt;，ListBase的items聚合属性(类型：&lt;code&gt;sap.m.ListeItemBase[]&lt;/code&gt;) 设置行项目的模板。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sap.m.List&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;new sap.m.List({items:{path:&amp;ldquo;/path&amp;rdquo;,template:oTemplate}});&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;new sap.m.List().bindItems({path:&amp;ldquo;/path&amp;rdquo;,template:oTemplate});&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sap.m.ObjectListItem&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ObjectListItem适用于显示行项目的信息，主要使用title属性进行标识，text、icon、atrributes和statuses等属性可以用于提供对象更多信息。继承自sap.m.ObjectListItem，可定义press事件对用户的点击做出回应。&lt;/p&gt;

&lt;h4 id=&#34;table&#34;&gt;Table&lt;/h4&gt;

&lt;p&gt;​    Table : 这是一个表单性质的的组件，支持响应式，很多是够我们做一个表单展示需要此控件的支持。自身也携带了丰富的property供我们选择。&lt;/p&gt;

&lt;h5 id=&#34;sap-ui-table-table&#34;&gt;sap.ui.table.Table&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sap.ui.table.Table&lt;/p&gt;

&lt;p&gt;&lt;code&gt;oTable.setModel(oModel);&lt;/code&gt;实现Table与JSONModel的绑定，也就是View和Model的绑定。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;oTable.bindRows(&amp;quot;/Suppliers&amp;quot;);&lt;/code&gt;语句实现Table与JSON数据的绑定。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;width : sap.ui.core.CSSSize (default: auto)。表格的宽度可以是百分百，或者基于像素px。&lt;/p&gt;

&lt;p&gt;titel : 设置Table的标题 。&lt;/p&gt;

&lt;p&gt;visibleRowCount : int (default: 10)。默认显示10行，可以自定义显示的行数。&lt;/p&gt;

&lt;p&gt;firstVisibleRow : int (default: 0) 。默认为0，从第一行开始展示数据。&lt;/p&gt;

&lt;p&gt;selectionMode : sap.ui.table.SelectionMode (default: MultiToggle)。包括单行(sap.ui.table.SelectionMode.Single)、多行                                           (sap.ui.table.SelectionMode.MultiToggle)和不能选择行(sap.ui.table.SelectionMode.None)。&lt;/p&gt;

&lt;p&gt;editable : boolean (default: true)。默认可以编辑，如果只是显示，将此属性设置为false。&lt;/p&gt;

&lt;p&gt;columns : [ind1,ind2] 里面填充Table的列元素。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sap.ui.table.Column&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;width : 宽度(100px)。&lt;/p&gt;

&lt;p&gt;label : 设置标题栏。&lt;/p&gt;

&lt;p&gt;template : 设置单元格的显示模板。&lt;/p&gt;

&lt;p&gt;sortProperty : 设置排序针对的字段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;sap-m-table&#34;&gt;sap.m.Table&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;sap.m.Table&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;继承自sap.m.ListBase，用于显示包含行和列的表格式数据。表格的列可以通过&lt;code&gt;columns&lt;/code&gt;聚合属性来设置，也可以使用&lt;code&gt;addColumn()&lt;/code&gt;方法来添加。每一列都是&lt;code&gt;sap.m.Column&lt;/code&gt;对象。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;columns&lt;/code&gt;聚合属性和&lt;code&gt;items&lt;/code&gt;聚合属性，items属性实现的就是聚合绑定.。&lt;/p&gt;

&lt;p&gt;sap.m.Table的重要属性：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;columns:&lt;/code&gt;定义Table包含哪些列，类型是sap.m.Column数组。另外，sap.m.Table从sap.m.ListBase继承，所以可以直接使用sap.m.ListBase的属性。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;growing:&lt;/code&gt;设置Table显示的数据可以依据向model的请求增加行noDataText: 当Table没有数据的时候显示的文本，类型是string。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;items:&lt;/code&gt;sap.m.ListItemBase数组，sap.m.ListItemBase类定义了列表项(list item)的基本特征。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;sap.m.ColumnListItem:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;sap.m.ColumnListItem&lt;/code&gt;用于创建&lt;code&gt;sap.m.Table&lt;/code&gt;的行，行中包含的&lt;code&gt;cells&lt;/code&gt;需要与&lt;code&gt;sap.m.Table&lt;/code&gt;的Columns匹配，顺序一致。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.Table().bindItems(&amp;quot;/modelData&amp;quot;,oCllumnListItem);&lt;/code&gt;绑定行&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.Table().bindAggregation(&amp;quot;items&amp;quot;,&amp;quot;/modelData&amp;quot;,oCollumnListItem);&lt;/code&gt;:聚合绑定。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;oColumnListItem.addCell();&lt;/code&gt;为Items添加元素。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.ColumnListItem&lt;/code&gt;的press属性设置为一个数组，这种方法能够保证在Controller中，this表示Controller本身，而不是某个控件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vAlign:&lt;/code&gt;行的垂直对齐：&lt;/p&gt;

&lt;p&gt;​  &lt;code&gt;sap.ui.core.VerticalAlign.Bottom:&lt;/code&gt;底部对齐&lt;/p&gt;

&lt;p&gt;​  &lt;code&gt;sap.ui.core.VerticalAlign.Inherit:&lt;/code&gt;从父控件继承&lt;/p&gt;

&lt;p&gt;​  &lt;code&gt;sap.ui.core.VerticalAlign.Middle:&lt;/code&gt;居中对齐&lt;/p&gt;

&lt;p&gt;​ &lt;code&gt;sap.ui.core.VerticalAlign.Top:&lt;/code&gt;顶部对齐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;cells:&lt;/code&gt;行包含的cells，每一个cell都是&lt;code&gt;sap.ui.core.Control&lt;/code&gt;对象，从而开发人员可以根据需要选择合适的控件，灵活度很高。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt; &amp;lt;ObjectIdentifier text=&amp;quot;{ID}&amp;quot;&amp;gt;&amp;lt;/ObjectIdentifier&amp;gt; : cell元素。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;主题设置&#34;&gt;主题设置&lt;/h3&gt;

&lt;p&gt;​    SAPUI5 默认提供了一些主题，并在组件添加新的主题。&lt;/p&gt;

&lt;p&gt;​        - Blue crystal (常用)&lt;/p&gt;

&lt;p&gt;​        - Platium&lt;/p&gt;

&lt;p&gt;​        - Gold Reflection (常用)&lt;/p&gt;

&lt;p&gt;​        - High Contast Black&lt;/p&gt;

&lt;p&gt;​        - Belize (常用)    - …&lt;/p&gt;

&lt;p&gt;​    设置主题：&lt;/p&gt;

&lt;p&gt;​        1.在Header中设置 : &lt;code&gt;data-sap-ui-theme=&amp;quot;sap_bluecrystal&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​        2.在程序中设定样式 :&lt;code&gt;sap.ui.getCore().applyTheme(sThemeName, sThemeBaseUrl?)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;文件模块介绍&#34;&gt;文件模块介绍&lt;/h3&gt;

&lt;h4 id=&#34;index&#34;&gt;Index&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;&amp;lt;script id=&amp;quot;sap-ui-bootstrap&amp;quot;
        src=&amp;quot;https://openui5.hana.ondemand.com/resources/sap-ui-core.js&amp;quot;
        data-sap-ui-theme=&amp;quot;sap_belize&amp;quot;
        data-sap-ui-libs=&amp;quot;sap.m&amp;quot;
        data-sap-ui-compatVersion=&amp;quot;edge&amp;quot;
        data-sap-ui-preload=&amp;quot;async&amp;quot;
        data-sap-ui-bindingSyntax = &amp;quot;complex&amp;quot;
        data-sap-ui-resourceroots = &#39;{&amp;quot;sFileSourceName&amp;quot;:&amp;quot;oURL&amp;quot;}&#39;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​   src : 核心资源的加载路径。&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-theme : 设置主题&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-libs : 选择文件默认加载的库文件&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-compatVersion : edge兼容模式，为了方便使用新功能&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-preload : async 设置文件加载形式为异步加载&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-bindingSyntax : 数据绑定的设置 complex复杂绑定，对绑定数据进行计算。&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-resourceroots : 命名文件的根目录，声明资源文件位置&lt;/p&gt;

&lt;p&gt;​   data-sap-ui-onInit=&amp;ldquo;module:sNameSpace/index&amp;rdquo; : 定义初始化时加载的初始页面文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSP&#34;&gt;&amp;lt;script&amp;gt;
    sap.ui.localResources(&amp;quot;ui5mvc&amp;quot;);
    var app = new sap.m.App({initialPage:&amp;quot;idmain1&amp;quot;});
    var view = sap.ui.view({
        id:&amp;quot;idmain1&amp;quot;, 
        viewName:&amp;quot;ui5mvc.main&amp;quot;, 
        type:sap.ui.core.mvc.ViewType.JS});
    app.addPage(view);
    app.placeAt(&amp;quot;content&amp;quot;);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sap.ui.localResources(&amp;quot;filename&amp;quot;)&lt;/code&gt; : 将当前目录下的FILE文件夹注册为当前文件夹，程序会在该文件夹下查找&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;View和Controller代码。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sap.m.App&lt;/code&gt; : 是SAP移动APP的root element,提供导航功能，并将一些header标签加到HTML页。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sap.ui.view&lt;/code&gt; : 定义一个view,ID,name,type来指定显示的View。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​                                  &lt;code&gt;sap.ui.xmlview&lt;/code&gt;可直接定义xml类型View。View type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sap.ui.core.mvc.ViewType.JS       &amp;ldquo;JS&amp;rdquo;&lt;/li&gt;
&lt;li&gt;sap.ui.core.mvc.ViewType.XML    &amp;ldquo;XML&amp;rdquo;&lt;/li&gt;
&lt;li&gt;sap.ui.core.mvc.ViewType.JSON    &amp;ldquo;JSON&amp;rdquo;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sap.ui.core.mvc.ViewType.HTML   &amp;ldquo;HTML&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;app.placeAt()&lt;/code&gt; : 该方法将控件放到指定的div中。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;view&#34;&gt;View&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;view.js&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;sap.ui.jsview(&amp;quot;ui5mvc.main&amp;quot;, {
    getControllerName : function() {
        return &amp;quot;ui5mvc.main&amp;quot;;
    },
    createContent : function(oController) {
        var oShell = new sap.ui.ux3.Shell();// Create Shell

        oShell.addWorksetItem(new sap.ui.ux3.NavigationItem({
            key : &amp;quot;btn&amp;quot;,
            text : &amp;quot;Button&amp;quot;
        }));// Add Navigation item

        oShell.addWorksetItem(new sap.ui.ux3.NavigationItem({
            key : &amp;quot;tf&amp;quot;,
            text : &amp;quot;Textfield&amp;quot;
        }));

        oShell.addWorksetItem(new sap.ui.ux3.NavigationItem({
            key : &amp;quot;xml&amp;quot;,
            text : &amp;quot;XMLView&amp;quot;
        }));

        var mContent = {}; // map holding shell content
        mContent.btn = new sap.ui.commons.Button({
            text : &amp;quot;Hello World&amp;quot;
        });

        mContent.tf = new sap.ui.commons.TextField();
        oShell.attachWorksetItemSelected(function(evt) {
            var key = evt.getParameter(&amp;quot;key&amp;quot;);
            oShell.setContent(mContent[key]);
        });// Add WorksetItem Selected event

        mContent.xml = sap.ui.view({
            viewName : &amp;quot;ui5mvc.XML&amp;quot;,
            type : sap.ui.core.mvc.ViewType.XML
        });
    
        oShell.setContent(mContent.btn);//initial content
        return oShell;
    }
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getControllerName&lt;/code&gt;: 函数用于返回 controller name&lt;/p&gt;

&lt;p&gt;&lt;code&gt;createContent&lt;/code&gt;: 函数用于返回页面上要显示的元素&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;view.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;core:View xmlns:core=&amp;quot;sap.ui.core&amp;quot;
    xmlns:mvc=&amp;quot;sap.ui.core.mvc&amp;quot; xmlns=&amp;quot;sap.m&amp;quot; controllerName=&amp;quot;ui5mvc.XML&amp;quot;
    mlns:html=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;
    &amp;lt;html:h1&amp;gt;My first XML-Header&amp;lt;/html:h1&amp;gt;
    &amp;lt;Panel&amp;gt;
        &amp;lt;Button press=&amp;quot;.sayHello&amp;quot; text=&amp;quot;Say Hello&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt;
    &amp;lt;/Panel&amp;gt;
&amp;lt;/core:View&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​       空的的namespace设定 : xmlns = &amp;ldquo;sap.m&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;​       命名的namespace设定 : xmlns:mvc = &amp;ldquo;sap.ui.core.mvc&amp;rdquo;. mvc标签指代&lt;code&gt;sap.ui.core.mvc&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;申明namespace: &lt;code&gt;xmlns:t=&amp;quot;sap.ui.table&amp;quot;&lt;/code&gt;。xml中就可以表示为&lt;code&gt;&amp;lt;t:Table&amp;gt; ... &amp;lt;/t:Table&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果属性是简单类型，可以直接作为atrribute的方式来申明，如Table的width属性、title属性&lt;/li&gt;
&lt;li&gt;如果属性是Aggregation和Association，则使用子标签，如Column的Label，是&lt;code&gt;sap.m.Label&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;绑定的语法稍有差异。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;视图模型可以包含分配给控件的任何配置选项，以绑定属性。&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;一个 ” . ”在格式化程序名称前面表示在当前视图的控制器中查找该函数&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xmlView 聚合绑定&lt;/p&gt;

&lt;p&gt;​   1）xmlview中对需要动态显示的部分不作声明&lt;/p&gt;

&lt;p&gt;​   2）在controller中定义factory function，实现控件的绑定和动态加载。&lt;/p&gt;

&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;系统生成的文件&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;sap.ui.controller(&amp;quot;ui5mvc.XML&amp;quot;, {
// onInit: function() {
//      
// },

// onBeforeRendering: function() {
//
// },

// onAfterRendering: function() {
//
// },

// onExit: function() {
//
// }

sayHello : function() {
    sap.ui.commons.MessageBox.show(&amp;quot;Hello World&amp;quot;);
}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;通过模块定义&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;sap.ui.define(
    [&amp;quot;Dependencies1&amp;quot;,&amp;quot;Dependencies2&amp;quot;,&amp;quot;formatter&amp;quot;],
    function(Controller,formatter){
    &amp;quot;use strict&amp;quot;;
        return Controller.extend(&amp;quot;ControllerName&amp;quot;,{
            formatter:formatter,
            
            onInit:function(){},
               onBeforeRendering:function(){},
               onAfterRendering:function(){},
               onExit:function(){}
        });
    }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;生命周期：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​           Start  &amp;ndash;&amp;gt;  视图和控制器被实例化  &amp;ndash;&amp;gt;  控制器被加载(存在控制器) &amp;ndash;&amp;gt;  onInit  &amp;ndash;&amp;gt;  onBeforeRendering  &amp;ndash;&amp;gt;&lt;/p&gt;

&lt;p&gt;​       视图被渲染  &amp;ndash;&amp;gt;  onAfterRendering  &amp;ndash;&amp;gt;  onExit  &amp;ndash;&amp;gt;  END(视图和控制器被销毁)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;onInit : 当视图被实例化并且其控件已经创建时调用。用于在显示前修改视图，绑定事件处理程序并执行其他一次性初始化任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onExit : 视图退出时调用。用于释放资源并完成任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onAfterRendering : 当视图被渲染时调用;是HTML的一部分。用于执行HTML的后续操作，SAPUI5控制在渲染后访问此钩子。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;onBeforeRendering : 在控制器视图重新呈现之前调用，不在第一次呈现之前调用。用于在其中调用第一个渲染前的钩子。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;控制器只是将加载的格式化程序函数存储在本地属性格式化程序中，以便能够在视图中访问它们。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;model&#34;&gt;Model&lt;/h4&gt;

&lt;p&gt;应用程序数据&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户端 JSON model、XML model、Resource model&lt;/li&gt;
&lt;li&gt;服务端 oData model&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;resource&#34;&gt;Resource&lt;/h4&gt;

&lt;p&gt;三种方法声明文件位置：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sap.ui.localResources()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​ sap.ui.localResources(&amp;ldquo;foldle.foldle&amp;rdquo;);&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jQuery.sap.registerModulePath()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​ jQuery.sap.registerModulePath(sModuleNamePrefix, sURL);&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bootstrap声明 : &lt;code&gt;data-sap-ui-resourceroots = &#39;{&amp;quot;sName&amp;quot;:&amp;quot;oURL&amp;quot;}&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;变更位置后需要修改系统自动生成的文件名称。&lt;/p&gt;

&lt;p&gt;Component&lt;/p&gt;

&lt;p&gt;Component.js通过调用manifest.json的配置信息，完成初始化调用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;sap.ui.define([
        &amp;quot;sap/ui/core/UIComponent&amp;quot;,
        &amp;quot;sap/ui/model/resource/ResourceModel&amp;quot;,
        &amp;quot;sap/ui/model/json/JSONModel&amp;quot;
        
    ], function (UIComponent, ResourceModel, JSONModel) {
    &amp;quot;use strict&amp;quot;;

    return UIComponent.extend(&amp;quot;webapp.Component&amp;quot;, {
        //metadata
        metadata: {
            manifest: &amp;quot;json&amp;quot;
         },

        init : function () {
            // call the base component&#39;s init function
            UIComponent.prototype.init.apply(this, arguments);

            // create the views based on the url/hash
            this.getRouter().initialize();
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;application-descriptor&#34;&gt;Application Descriptor&lt;/h4&gt;

&lt;p&gt;​   manifest.json配置应用程序的相关信息。被称为Application Descriptor。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;sap.app&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;包含特定于应用程序的属性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ID(强制)：应用程序组件的命名空间，唯一的，必须与组件的空间名称对应&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;type：定义我们想要配置的内容，例如：应用程序&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;i18n：定义资源包文件的路径&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;title：应用程序资源包中引用的句柄语法中的应用程序标题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;description：简短说明文本应用程序在应用程序资源包中引用的句柄语法中的作用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;applicationVersion：应用程序的版本，以便以后可以轻松更新应用程序&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;sap.ui&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;提供以下UI属性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;technology：此值指定UI技术; 在我们的例子中，我们使用SAPUI5&lt;/li&gt;
&lt;li&gt;deviceTypes：告诉应用程序支持哪些设备：台式机，平板电脑，手机（默认情况下均为true）&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;sap.ui5&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;该 sap.ui5 namespace添加SAPUI5自动处理的SAPUI5特定配置参数。最重要的参数是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rootView：如果指定此参数，组件将自动实例化视图并将其用作此组件的根&lt;/li&gt;
&lt;li&gt;dependencies：这里我们声明应用程序中使用的UI库&lt;/li&gt;
&lt;li&gt;models：在描述符的这一部分中，我们可以定义在应用程序启动时由SAPUI5自动实例化的模型。在这里，我们现在可以定义本地资源包。我们将模型“i18n”的名称定义为键，并按名称空间指定包文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;资源包文件&#34;&gt;资源包文件&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;sap.app设置资源包文件的路径和文件名。使用的相对于 &lt;code&gt;manifest.json&lt;/code&gt; 文件的相对路径。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;sap.app&amp;rdquo;: {
    &amp;ldquo;_version&amp;rdquo;: &amp;ldquo;1.1.0&amp;rdquo;,
    &amp;ldquo;id&amp;rdquo;: &amp;ldquo;resource&amp;rdquo;,
    &amp;ldquo;type&amp;rdquo;: &amp;ldquo;application&amp;rdquo;,
    &amp;ldquo;i18n&amp;rdquo;: &amp;ldquo;i18n/i18n.properties&amp;rdquo;,
    &amp;hellip;&lt;/p&gt;

&lt;p&gt;},&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;sap.ui5中models设置名称为 i18n 的 &lt;strong&gt;resource model&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;sap.ui5&amp;rdquo;: {&lt;br /&gt;
   &amp;hellip;
   &amp;ldquo;models&amp;rdquo;: {
       &amp;hellip;
       &amp;ldquo;i18n&amp;rdquo;: {
           &amp;ldquo;type&amp;rdquo;: &amp;ldquo;sap.ui.model.resource.ResourceModel&amp;rdquo;,
           &amp;ldquo;settings&amp;rdquo;: {
               &amp;ldquo;bundleName&amp;rdquo;: &amp;ldquo;webapp.i18n.i18n&amp;rdquo;
               }
     }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;bundleName&lt;/code&gt; 后面是根据 index.html文件的 &lt;strong&gt;resource roots&lt;/strong&gt; 设置的相对路径。然后在代码中添加对 ResourceBundle 的依赖后，通过 &lt;code&gt;{i18n&amp;gt;xxx}&lt;/code&gt; 实现绑定。&lt;/p&gt;

&lt;h5 id=&#34;models&#34;&gt;Models&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;sap.app设置资源包文件的路径和文件名。使用的相对于 &lt;code&gt;manifest.json&lt;/code&gt; 文件的相对路径。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   &amp;quot;sap.app&amp;quot;: {
       ...
       &amp;quot;dataSources&amp;quot;: {
           &amp;quot;mainService&amp;quot;: {
               &amp;quot;uri&amp;quot;: &amp;quot;./service/data.json&amp;quot;,
               &amp;quot;type&amp;quot;: &amp;quot;JSON&amp;quot;
           }
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;sap.ui5的&lt;code&gt;models&lt;/code&gt;没有指定名称的 model，当 view 中数据绑定时，没有给出前缀的时候，就参照到这个 model。使用sap.app中设置的dataSource.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   &amp;quot;sap.ui5&amp;quot;: {
           ...
           &amp;quot;models&amp;quot;: {
               &amp;quot;&amp;quot;: {
                   &amp;quot;dataSource&amp;quot;: &amp;quot;mainService&amp;quot;
                },
           ...
           }
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;root-view&#34;&gt;Root View&lt;/h5&gt;

&lt;p&gt;​   Root view (启动即显示的 view)：类型为 xml，名称为 App。OpenUI5 在相应文件夹下面查找名为 &lt;code&gt;App.view.xml&lt;/code&gt; 文件并加载。通过这种方式，实现了 root view 的配置化.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;sap.ui5&amp;rdquo;: {
      &amp;ldquo;_version&amp;rdquo;: &amp;ldquo;1.1.0&amp;rdquo;,
      &amp;ldquo;rootView&amp;rdquo;: {
          &amp;ldquo;viewName&amp;rdquo;: &amp;ldquo;webapp.view.App&amp;rdquo;,
          &amp;ldquo;type&amp;rdquo;: &amp;ldquo;XML&amp;rdquo;
      }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​   启动流程 :&lt;/p&gt;

&lt;p&gt;​   1) &lt;code&gt;index.html&lt;/code&gt; 的 &lt;code&gt;ComponentContainer&lt;/code&gt; 根据 &lt;code&gt;name&lt;/code&gt; 或 &lt;code&gt;component&lt;/code&gt; 属性实例化 Component。&lt;/p&gt;

&lt;p&gt;​   2) Component 的 &lt;code&gt;metadata&lt;/code&gt; 指向设定的 &lt;code&gt;manifest.json&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;​   3) &lt;code&gt;manifest.json&lt;/code&gt; 文件的 &lt;code&gt;sap.ui5&amp;gt;rootView&lt;/code&gt; 设定了启动时候加载并显示的 root view 为 &lt;code&gt;App.view.xml&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;​   4) App view 并不需要像之前文章介绍的内嵌 master view 和 detail view，而是由路由器根据路径在 pattern 中找匹配的模式，在 target 中找对应的 view 加载。&lt;/p&gt;

&lt;h5 id=&#34;routing设置&#34;&gt;Routing设置&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;&amp;quot;sap.ui5&amp;quot;: {
        ...
        &amp;quot;routing&amp;quot;: {
            &amp;quot;config&amp;quot;: {
                &amp;quot;routerClass&amp;quot;: &amp;quot;sap.m.routing.Router&amp;quot;,
                &amp;quot;viewType&amp;quot;: &amp;quot;XML&amp;quot;,
                &amp;quot;viewPath&amp;quot;: &amp;quot;webapp.view&amp;quot;,
                &amp;quot;controlId&amp;quot;: &amp;quot;app&amp;quot;,
                &amp;quot;controlAggregation&amp;quot;: &amp;quot;pages&amp;quot;,
                &amp;quot;bypassed&amp;quot;: {
                    &amp;quot;target&amp;quot;: &amp;quot;notFound&amp;quot;
                }
            },
            &amp;quot;routes&amp;quot;: [{
                &amp;quot;pattern&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;master&amp;quot;,
                &amp;quot;target&amp;quot;: &amp;quot;master&amp;quot;
            },
            {
                &amp;quot;pattern&amp;quot;: &amp;quot;detail/{supplierPath}&amp;quot;,
                &amp;quot;name&amp;quot;: &amp;quot;detail&amp;quot;,
                &amp;quot;target&amp;quot;: &amp;quot;detail&amp;quot;
            }],
            &amp;quot;targets&amp;quot;: {
                &amp;quot;master&amp;quot;: {
                    &amp;quot;viewName&amp;quot;: &amp;quot;Master&amp;quot;,
                    &amp;quot;viewLevel&amp;quot;: 1
                },
                &amp;quot;detail&amp;quot;: {
                    &amp;quot;viewName&amp;quot;: &amp;quot;Detail&amp;quot;,
                    &amp;quot;viewLevel&amp;quot;: 2
                },
                &amp;quot;notFound&amp;quot;: {
                    &amp;quot;viewName&amp;quot;: &amp;quot;NotFound&amp;quot;,
                    &amp;quot;viewId&amp;quot;: &amp;quot;notFound&amp;quot;
                }
            }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;多语言&#34;&gt;多语言&lt;/h4&gt;

&lt;p&gt;在 SAPUI5 中，通过两种方法来实现多语言.&lt;/p&gt;

&lt;p&gt;​   (1) SAPUI5 提供 Resource Model，Resource Model 读取资源包 (Resource Bundle) 并与 View 中的控件绑定。&lt;/p&gt;

&lt;p&gt;​   (2) 使用 jQuery.sap.resources 相关的 API 读取资源包。两种方法都需要资源包文件并且在配置中设置。&lt;/p&gt;

&lt;h5 id=&#34;语言代码&#34;&gt;语言代码&lt;/h5&gt;

&lt;p&gt;​   OpenUI5 对页面的显示，有一个 &lt;strong&gt;当前语言( Current Language )&lt;/strong&gt; 的概念，按照当前语言，读取相应的资源包文件，按当前语言显示。OpenUI5 按照如下顺序顺序(从高到低)，如果都没有找到，最后读取通用设置（比如 i18n.properties)。&lt;/p&gt;

&lt;p&gt;​   &lt;code&gt;sap.ui.getCore().getConfiguration().getLanguage()&lt;/code&gt; 获得当前语言。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) URL中的 locale 参数（即在 url 后面加上 &lt;code&gt;?sap-ui-language=en&lt;/code&gt; )&lt;/p&gt;

&lt;p&gt;2) 应用程序代码的 locale 设置，sap.ui.getCore().getConfiguration().applySettings({ language: &amp;lsquo;de&amp;rsquo;});&lt;/p&gt;

&lt;p&gt;3) Android 平台的用户代理字符串设置&lt;/p&gt;

&lt;p&gt;4) 浏览器的一般语言设置，可以用 window.navigator.language 查看&lt;/p&gt;

&lt;p&gt;5) 浏览器中用户语言配置。这个与浏览器相关，比如 IE 通过 window.navigator.userLanguage 查看。&lt;/p&gt;

&lt;p&gt;6) 浏览器语言配置。这个业余浏览器相关，比如 IE 通过 window.navigator.browserLanguage 查看&lt;/p&gt;

&lt;p&gt;7) OpenUI5中硬编码，默认为 en&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;资源包文件-1&#34;&gt;资源包文件&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Java的属性文件，文件的扩展名总是.properties。文件中包含于语言相关的文本。&lt;/li&gt;
&lt;li&gt;文件名包括固定部分和语言相关部分。那么 i18n.properties 是默认的文件，i18n_zh_CN.properties 是中文简体的资源文件。&lt;/li&gt;
&lt;li&gt;资源包文件为扁平结构，不能嵌套。每一行要么是 key-value键值对 ，要么是 # 开头的注释。也可以可以空行。&lt;/li&gt;
&lt;li&gt;如果 Properties 文件的文本为 Unicode 字符，文件使用16进制的编码来存储，而不是明文。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;resource-model&#34;&gt;Resource Model&lt;/h5&gt;

&lt;p&gt;​   使用 Resource Model 绑定数据需要三步：&lt;/p&gt;

&lt;p&gt;​   1) 添加资源包文件，将不同的语言放在不同的资源包文件中。&lt;code&gt;i18n.properties,i18n_zh_CN.properties&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​   2) 在 Component.js 文件中，创建 Resource model 的实例 。&lt;/p&gt;

&lt;p&gt;​   3) 在 View 中参照 Resource Model 中定义的 key。 &lt;code&gt;title=&amp;quot;{i18n&amp;gt;masterTitle}&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​    url 后面添加&lt;code&gt;?sap-ui-language=XXX&lt;/code&gt;，实现语言的切换。&lt;/p&gt;

&lt;h5 id=&#34;jquery-sap-resources&#34;&gt;jQuery.sap.resources&lt;/h5&gt;

&lt;p&gt;​   在代码中直接使用资源包的文本。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;var sLocale = sap.ui.getCore().getConfiguration().getLanguage();//获取当前语言
var oBd = jQuery.sap.resources({
    url: &amp;quot;i18n/i18n.properties&amp;quot;,
    locale: sLocale
})                                       //根据指定的 URL 和 Locale，创建一个新的资源包实例
var sMeg = oBd.getText(&amp;quot;key&amp;quot;,[sLocale]); //根据资源包文件的 key，获取与语言相关的 value。

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;layout设置&#34;&gt;Layout设置&lt;/h2&gt;

&lt;h3 id=&#34;多页面显示和跳转&#34;&gt;多页面显示和跳转&lt;/h3&gt;

&lt;p&gt;​   sap.m.App : 是一个全局对象，可以通过 app.to(sPageId) 跳转到另一个页面。&lt;/p&gt;

&lt;p&gt;​       to(sPageId, sTransitionName&lt;em&gt;?&lt;/em&gt;, oData&lt;em&gt;?&lt;/em&gt;, oTransitionParameters&lt;em&gt;?&lt;/em&gt;): [sap.m.NavContainer]&lt;/p&gt;

&lt;p&gt;​   app.back()则跳回到刚才的page：&lt;/p&gt;

&lt;p&gt;​       back(oBackData&lt;em&gt;?&lt;/em&gt;, oTransitionParameters&lt;em&gt;?&lt;/em&gt;): [sap.m.NavContainer]&lt;/p&gt;

&lt;p&gt;​   &lt;code&gt;sap.m.Page&lt;/code&gt;中，&lt;code&gt;showNavButton&lt;/code&gt;设置为&lt;code&gt;true&lt;/code&gt;，就会出现Navigation按钮，点击按钮的event hander通过Controller中&lt;code&gt;onNavPress&lt;/code&gt;函数来实现。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    var oDetailPage = new sap.m.Page({
        showNavButton: true,
        navButtonPress: [oController.onNavPress, oController],
        title: &amp;quot;供应商明细&amp;quot;,
        content: [oObjectHeader]
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​   &lt;code&gt;sap.m.ColumnListItem&lt;/code&gt;的type必须为Navigation，否则不能实现跳转。&lt;code&gt;sap.m.ColumnListItem&lt;/code&gt;的press属性设置为一个数组，这种方法能够保证在Controller中，this表示Controller本身，而不是某个控件。&lt;/p&gt;

&lt;h3 id=&#34;布局类型&#34;&gt;布局类型&lt;/h3&gt;

&lt;p&gt;​   sap.ui.layout.HorizontalLayout() : 水平布局&lt;/p&gt;

&lt;p&gt;​   sap.ui.layout.VerticalLayout() : 垂直布局&lt;/p&gt;

&lt;p&gt;​   sap.ui.layout.Grid() : 表格式布局&lt;/p&gt;

&lt;h4 id=&#34;grid-layout&#34;&gt;Grid Layout&lt;/h4&gt;

&lt;p&gt;​   Grid Layout 控件负责将页面进行表格式布局，将页面分为 12 列，子控件从左至右排列。每个控件并不是占一列，OpenUI5 根据屏幕的大小，将屏幕分为 4 种，分别是&lt;code&gt;XL: extra large 、 L: large、M: medium、S: small&lt;/code&gt;。XL的如 PC 机的大桌面，L的如 PC 的桌面，M的比如平板，S的比如手机。默认情况下，每个控件在 XL 桌面上占 3 列，在 L 桌面上占 3 列，在 M 桌面上占 6 列，在 S 桌面上占 12 列。OpenUI5 用一个字符串表示为&lt;code&gt;XL3 L3 M6 S12&lt;/code&gt;，通过 default Span 属性来设置。&lt;/p&gt;

&lt;p&gt;​    当屏幕的尺寸变更的时候，OpenUI5 检测到尺寸的变化，根据上面的 4 个分类对控件的位置进行调整，从而实现所谓的自适应。&lt;/p&gt;

&lt;p&gt;​    Grid layout 控件宽度 (Width)，可以基于像素，或者基于页面宽度的相对比例。控件之间的间距可以通过 vSpacing 和 hSpacing 属性进行设置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.layout&lt;/code&gt; : 该function可以对Layout页面布局进行设置。&lt;/p&gt;

&lt;p&gt;​       &lt;code&gt;new sap.ui.layout.Grid({ content: [ a1,b1,c1,d1] }).placeAt(&amp;quot;content&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​    将各个空间放到Layout.Grid中，然后将该Grid放到页面指定位置上。&lt;/p&gt;

&lt;h3 id=&#34;layoutdata-属性&#34;&gt;LayoutData 属性&lt;/h3&gt;

&lt;p&gt;​      &lt;code&gt;sap.ui.core.Element&lt;/code&gt; 类定义了&lt;code&gt;layoutData&lt;/code&gt; 属性、&lt;code&gt;getLayoutData()&lt;/code&gt; 方法和&lt;code&gt;setLayoutData()&lt;/code&gt; 方法。控件都是 &lt;code&gt;sap.ui.core.Element&lt;/code&gt; 类的间接子类，从而控件都可以利用这些属性和方法设定这个控件在页面中如何定位。&lt;code&gt;setLayoutData()&lt;/code&gt; 方法的参数是&lt;code&gt;sap.ui.core.LayoutData&lt;/code&gt; 对象。 Grid 布局时&lt;code&gt;layoutData&lt;/code&gt; 我们可以用&lt;code&gt;sap.ui.core.LayoutData&lt;/code&gt; 类的子类 &lt;code&gt;sap.ui.layout.GridData&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSP&#34;&gt;var oLabel2 = new sap.m.Label({
   text : &amp;quot;XXXXXXXXXXXXXXXXXXX&amp;quot;,
   layoutData : new sap.ui.layout.GridData({
     span : &amp;quot;XL12 L12 M12 S12&amp;quot;       //通过该设置让该元素独占屏幕元素的一整行
   })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;margin-classes&#34;&gt;Margin Classes&lt;/h4&gt;

&lt;p&gt;​   在class属性中设置了四种标准的大小: tiny-8px、small-16px、medium-32px、large-48px， Begin is left and End is right。&lt;/p&gt;

&lt;p&gt;在 div 的 class 属性中添加对应的属性值来解决边距问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Full Margins : all around control&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sapUiTinyMargin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUiSmallMargin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUiMediumMargin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUiLargeMargin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Single-sided margins : class中只能设定一个边框距离&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sapUixxxxMarginTop&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUixxxxMarginBottom&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUixxxxMarginBegin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUixxxxMarginEnd&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Two-Sided Margins : 两个方向&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sapUiTinyMarginBeginEnd&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sapUiTinyMarginTopBottom&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Responsive Margins : margins depending on the screen width&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sapUiResponsiveMargin&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;Panel headerText=&#34;{i18n&gt;helloPanelTitle}&amp;rdquo;
      class=&amp;ldquo;sapUiResponsiveMargin&amp;rdquo;
      width=&amp;ldquo;auto&amp;rdquo;&amp;gt;
&lt;/Panel&gt;&lt;/p&gt;

&lt;p&gt;&lt;body class=&#34;sapUiBody sapUiResponsiveMargin&#34; role=&#34;application&#34;&gt;&lt;/p&gt;

&lt;p&gt;​      &lt;div id=&#34;content&#34;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/body&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;100%宽度控制&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果控件包含有&lt;code&gt;width&lt;/code&gt;属性，设置该属性为&lt;code&gt;width=auto&lt;/code&gt;.如果没有该属性，可以添加 sapUiForceWidthAuto属性到控件的class.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;移除Margins&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sapUiNoMarginTop&lt;/li&gt;
&lt;li&gt;sapUiNoMarginBottom&lt;/li&gt;
&lt;li&gt;sapUiNoMarginBegin&lt;/li&gt;
&lt;li&gt;sapUiNoMarginEnd
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;自定义css和主题颜色&#34;&gt;自定义CSS和主题颜色&lt;/h4&gt;

&lt;p&gt;​   不要在自定义CSS中指定颜色，而是使用标准的主题依赖类。&lt;/p&gt;

&lt;h3 id=&#34;对象组件显示&#34;&gt;对象组件显示&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;组件&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sap.m.ObjectIdentifier:&lt;/code&gt; 用于需要对操作对象进行明确区分的时候，使用这个组件进行显示。强调的是标识。                title属性是主要标识，text属性是补充，如果titleActive为true，则标题用颜色标识.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.ObjectNumber:&lt;/code&gt; 显示数字,能根据不同的状态提供颜色区分。有四种state: Warning, Error, Success,Default.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.ObjectMarker:&lt;/code&gt; 以图标的方式显示预定义的几种类型，可以绑定press事件。包括 [Flagged、Favorite、Draft&lt;/p&gt;

&lt;p&gt;、Locked、LockedBy、Unsaved、UnsavedBy].&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.ObjectAttribute:&lt;/code&gt; 显示对象，并提供普通和active两种状态，active状态可与事件绑定。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.ObjectStatus:&lt;/code&gt; 显示对象的文本，并且根据状态不同，文本以不同的颜色区分。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.ObjectHeader:&lt;/code&gt; 显示对象，包括标识和附加的信息，图标等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;dialogs-and-fragments&#34;&gt;Dialogs and Fragments&lt;/h2&gt;

&lt;h3 id=&#34;fragments&#34;&gt;Fragments&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;片段是一个轻量级的Ui部分，它只是一组重用控件的容器。包含一到多个控件，不需要控制器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;定义并调用已存在的 Fragments : &amp;ldquo;sap/ui/core/Fragment&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) 定义xxx.fragment.xml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;   &amp;lt;core:FragmentDefinition xmlns=&amp;quot;sap.m&amp;quot; xmlns:core=&amp;quot;sap.ui.core&amp;quot;&amp;gt;
    &amp;lt;Dialog id=&amp;quot;helloDialog&amp;quot; title=&amp;quot;Hello {/recipient/name}&amp;quot;&amp;gt;
        &amp;lt;content&amp;gt;
            &amp;lt;core:Icon src=&amp;quot;sap-icon://hello-world&amp;quot; size=&amp;quot;80px&amp;quot; class=&amp;quot;sapUiMediumMargin&amp;quot;&amp;gt;                   &amp;lt;/core:Icon&amp;gt;
        &amp;lt;/content&amp;gt;
        &amp;lt;beginButton&amp;gt;
            &amp;lt;Button text=&amp;quot;{i18n&amp;gt;dialogCloseButtonText}&amp;quot; press=&amp;quot;.onCloseDialog&amp;quot;&amp;gt;&amp;lt;/Button&amp;gt;
        &amp;lt;/beginButton&amp;gt;
    &amp;lt;/Dialog&amp;gt;
   &amp;lt;/core:FragmentDefinition&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;   // create dialog lazily
   if (!this.byId(&amp;quot;helloDialog&amp;quot;)) {  //如果id为helloDialog的Dialog不存在
    // load asynchronous XML fragment
    Fragment.load({
        id: oView.getId(),
        name: &amp;quot;sap.ui.demo.walkthrough.view.HelloDialog&amp;quot;,
             controller:this    //函数的回调
    }).then(function (oDialog) {
        // connect dialog to the root view of this component (models, lifecycle)
        oView.addDependent(oDialog);
        oDialog.open();
    });
   } else {
    this.byId(&amp;quot;helloDialog&amp;quot;).open();
   },
      
   onCloseDialog:function(){
       this.byId(&amp;quot;helloDialog&amp;quot;).close();
   }
   
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;始终使用addDependent方法将对话框连接到视图的生命周期管理和数据绑定，即使它未添加到其UI树中。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果片段中的对话框尚不存在，则通过使用以下方法调用sap.ui.xmlfragment方法来实例化片段&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;回调open方法&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;dialog&#34;&gt;Dialog&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不属于特定视图，不能将其定义为视图，这意味着必须在控制器代码中的某处实例化对话框。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重用&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) 定义单独的控制来实现Dialog的创建 HelloDialog.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   sap.ui.define([
        &amp;quot;sap/ui/base/ManagedObject&amp;quot;, //实现该类
        &amp;quot;sap/ui/core/Fragment&amp;quot;
    ],
    function (ManagedObject, Fragment) {
        &amp;quot;use strict&amp;quot;;
   
    return ManagedObject.extend(&amp;quot;SAPUI5.Walkthrough.controller.HelloDialog&amp;quot;, {
        constructor: function (oView) { //oView参数用于关联当前视图到对话框.
            this._oView = oView;
        },
   
        exit: function () {
            delete this._oView();
        },
   
        open: function () {
            var oView = this._oView;
   
            //create dialog lazily
            if (!oView.byId(&amp;quot;helloDialog&amp;quot;)) {
                var oFragmentController = {
                    onCloseDialog: function () {
                        oView.byId(&amp;quot;helloDialog&amp;quot;).close();
                    }
                };
                //load asynchronous XML fragment
                Fragment.load({
                    id: oView.getId(),
                    name: &amp;quot;SAPUI5.Walkthrough.view.HelloDialog&amp;quot;,
                    controller: oFragmentController
                }).then(function (oDialog) {
                    //connect dialog to the root view of this component (models,lifecycle)
                    oView.addDependent(oDialog);
                    oDialog.open();
                });
            } else {
                oView.byId(&amp;quot;helloDialog&amp;quot;).open();
            }
        }
    });
   });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) 在Component.js文件中声明该控件为私有属性,并封装其方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   sap.ui.define([
    &amp;quot;sap/ui/core/UIComponent&amp;quot;,
    &amp;quot;sap/ui/Device&amp;quot;,
    &amp;quot;SAPUI5/Walkthrough/model/models&amp;quot;,
    &amp;quot;sap/ui/model/json/JSONModel&amp;quot;,
    &amp;quot;./controller/HelloDialog&amp;quot;
   ], function (UIComponent, Device, models,JSONModel,HelloDialog) {
    &amp;quot;use strict&amp;quot;;
   
    return UIComponent.extend(&amp;quot;SAPUI5.Walkthrough.Component&amp;quot;, {
   
        metadata: {
            manifest: &amp;quot;json&amp;quot;
        },
   
        /**
         * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.
         * @public
         * @override
         */
        init: function () {
            // call the base component&#39;s init function
            UIComponent.prototype.init.apply(this, arguments);
   
            // enable routing
            this.getRouter().initialize();
   
            // set the device model
            this.setModel(models.createDeviceModel(), &amp;quot;device&amp;quot;);
   
            //set dialog
            this._helloDialog = new HelloDialog(this.getRootControl());
        },
        
        exit:function(){
            this._helloDialog.destory();
            delete this._helloDialog;
        },
        
        openHelloDialog:function(){
            this._helloDialog.open();
        }
    });
   });
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;在按钮事件中通过&lt;code&gt;this.getOwnerComponent().openHelloDialog()&lt;/code&gt;调用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;onOpenDialog方法现在通过调用辅助方法getOwnerComponent来访问其组件。当调用重用对象的open方法时，我们传入当前视图以将其连接到对话框。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Attention&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将跨多个控制器使用的所有资产放在单独的模块中&lt;/p&gt;

&lt;h2 id=&#34;icons&#34;&gt;Icons&lt;/h2&gt;

&lt;p&gt;sap.ui.core.Icon&lt;/p&gt;

&lt;h2 id=&#34;数据类型和操作&#34;&gt;数据类型和操作&lt;/h2&gt;

&lt;h3 id=&#34;基本数据类型&#34;&gt;基本数据类型&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;​ sap.ui.model.type.Integer(oFormatOptions?, oConstraints?):支持minimum,maximum&lt;/p&gt;

&lt;p&gt;​ sap.ui.model.type.Float(oFormatOptions?, oConstraints?):&lt;code&gt;decimalSeparator&lt;/code&gt;定义小数位的分隔符&lt;/p&gt;

&lt;p&gt;​ sap.ui.model.type.String(&amp;hellip;&amp;hellip;&amp;hellip;)&lt;/p&gt;

&lt;p&gt;​ sap.ui.model.type.Boolean&lt;/p&gt;

&lt;p&gt;​ sap.ui.model.type.Date : ui5支持原数据为JavaScript和原数据为String的日期数据进行格式输出&lt;/p&gt;

&lt;p&gt;​ sap.ui.model.type.Time : Time也支持原数据为Time类型或者字符串类型&lt;/p&gt;

&lt;p&gt;​ sap.ui.model.type.DateTime&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;属性设置&#34;&gt;属性设置&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;尽可能使用数据类型而不是自定义格式化程序。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   number=&amp;quot;{
    parts: [{path: &#39;invoice&amp;gt;ExtendedPrice&#39;}, {path: &#39;view&amp;gt;/currency&#39;}],
    type: &#39;sap.ui.model.type.Currency&#39;,
    formatOptions: {
        showMeasure: false
    }
   }&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;计算字段绑定(parts)：它允许将来自不同模型的多个属性绑定到控件的单个属性。&lt;/li&gt;
&lt;li&gt;控件的属性是数字，从两个不同模型检索的绑定属性（“部件”）invoice&amp;gt; ExtendedPrice和view&amp;gt; / currency。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Expression Binding 仅使用表达式绑定进行简单的计算。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;numberState=&amp;quot;{= ${invoice&amp;gt;ExtendedPrice} &amp;gt; 50 ? &#39;Error&#39; : &#39;Success&#39; }&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;数据校验&#34;&gt;数据校验&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;基本使用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​    sap.ui.core.message.MessageManager();&lt;/p&gt;

&lt;p&gt;​    registerObject(oObject,bHandelValidation) : 第一个参数是ManagedObject对象的实例，第二个参数是boolean类型变量，为true时执行数据校验。&lt;/p&gt;

&lt;p&gt;​    attachValidationError(this,function(){}) : 控件都有该方法，用于校验失败时的处理。&lt;/p&gt;

&lt;p&gt;​    attachValidationSuccess(this,function(){}) : 用于校验成功时的处理。&lt;/p&gt;

&lt;p&gt;ValueState 种类:setValueState()&lt;/p&gt;

&lt;p&gt;​    sap.ui.core.ValueState.Error&lt;/p&gt;

&lt;p&gt;​    sap.ui.core.ValueState.None&lt;/p&gt;

&lt;p&gt;​    sap.ui.core.ValueState.Success&lt;/p&gt;

&lt;p&gt;​    sap.ui.core.ValueState.Warning&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;集中处理数据校验:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sap.ui.core.Core也可添加attachValidationError().&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;自定义数据类型校验:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sap.ui.model.SimpleType.extend()自定义数据类型，可以使用formatValue(),parseValue(),validateValue()实现自定义的校验规则和提示消息。&lt;/p&gt;

&lt;p&gt;抛出异常信息：throw new sap.ui.model.ValidationException(&amp;ldquo;Message&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;截取异常消息，使用该类型的控件通过&lt;code&gt;oEvent.getParameter(&amp;quot;message&amp;quot;)&lt;/code&gt;获取该错误消息。&lt;/p&gt;

&lt;h3 id=&#34;formart设置&#34;&gt;Formart设置&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在Constructor或绑定方法中定义formatter (绑定单个控件)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;var oText = new sap.m.Text({
        text:{ formatter:function(sValue){
                        return sValue &amp;amp;&amp;amp; sValue.toUpperCase();
                }
        }
     });&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在Controller中定义formatter (更灵活，可重复调用)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;Text text=&#34;{path: &#39;/productname&#39;, formatter: &#39;.toUpper&#39;}&#34;/&gt;&lt;/p&gt;

&lt;p&gt;其中&lt;code&gt;.toUpper&lt;/code&gt; 前面的&lt;code&gt;.&lt;/code&gt;表示当前Controller方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在专门模块中定义formatter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;单独定义formatter在Controller中引入该文件。并在view中调用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;自定义数据类型中设置formatter&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;搜索与过滤&#34;&gt;搜索与过滤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;添加搜索框并绑定事件 &lt;code&gt;sap.m.SearchField&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;   &amp;lt;List id=&amp;quot;invoiceList&amp;quot; items=&amp;quot;{invoice&amp;gt;/Invoices}&amp;quot;&amp;gt;
   &amp;lt;headerToolbar&amp;gt;
      &amp;lt;Toolbar&amp;gt;
         &amp;lt;Title text=&amp;quot;{i18n&amp;gt;invoiceListTitle}&amp;quot;/&amp;gt;
         &amp;lt;ToolbarSpacer/&amp;gt;
         &amp;lt;SearchField width=&amp;quot;50%&amp;quot; search=&amp;quot;.onFilterInvoices&amp;quot;/&amp;gt;
      &amp;lt;/Toolbar&amp;gt;
   &amp;lt;/headerToolbar&amp;gt;
      &amp;lt;items&amp;gt;
        &amp;lt;ObjectListItem&amp;gt;
            ,,,,,,
        &amp;lt;/ObjectListItem&amp;gt; 
      &amp;lt;/items&amp;gt;
   &amp;lt;/List&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;事件定义并实现过滤&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;filter对象将保留我们对filter操作的配置。&lt;strong&gt;new sap.ui.model.Filter(vFilterInfo, vOperator?, vValue1?, vValue2?)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FilterOperator是我们需要的帮助器类型，以指定过滤器，范围。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   new Filter({
         path: &amp;quot;Price&amp;quot;,
         operator: FilterOperator.BT,
         value1: 11.0,
         value2: 23.0
       });
       
   new Filter({
       filters: [
         ...
         new Filter({
           path: &#39;Quantity&#39;,
           operator: FilterOperator.LT,
           value1: 20
         }),
         new Filter({
           path: &#39;Price&#39;,
           operator: FilterOperator.GT,
           value1: 14.0
         })
         ...
       ],
       and: true|false
     })
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;   onFilterInvoices : function (oEvent) {
    // build filter array
    var aFilter = [];
    var sQuery = oEvent.getParameter(&amp;quot;query&amp;quot;); //&amp;quot;query&amp;quot; 获取搜索字段
    if (sQuery) {
        aFilter.push(new Filter(&amp;quot;ProductName&amp;quot;, FilterOperator.Contains, sQuery)); //添加过滤条件
    }
   
    // filter binding
    var oList = this.byId(&amp;quot;invoiceList&amp;quot;);     //获取List对象
    var oBinding = oList.getBinding(&amp;quot;items&amp;quot;); //获取绑定的items
    oBinding.filter(aFilter);              //根据过滤条件过滤items数据
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;排序与分组&#34;&gt;排序与分组&lt;/h3&gt;

&lt;p&gt;​       &lt;code&gt;new sap.ui.model.Sorter(sPath, bDescending?, vGroup?, fnComparator?)&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;items=&amp;ldquo;{path:&amp;lsquo;invoice&amp;gt;/Invoices&amp;rsquo; sorter:{path:&amp;lsquo;ProductName&amp;rsquo;}}&amp;rdquo;  //默认是升序ascending,可以添加属性descending : true.&lt;/li&gt;
&lt;li&gt;items=&amp;ldquo;{path:&amp;lsquo;invoice&amp;gt;/Invoices&amp;rsquo; sorter:{path:&amp;lsquo;ProductName&amp;rsquo;,group:true}}&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;私有函数和变量&#34;&gt;私有函数和变量&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;私有函数和变量应始终以下划线开头。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;消息设置&#34;&gt;消息设置&lt;/h2&gt;

&lt;h3 id=&#34;sap-m-messagebox&#34;&gt;sap.m.MessageBox&lt;/h3&gt;

&lt;p&gt;​    SAPUI5 提供的对话框，可以显示信息、警告、错误等等。MessageBox 类是静态类，在使用之前必须执行 &lt;code&gt;jQuery.sap.require(&amp;quot;sap.m.MessageBox&amp;quot;)&lt;/code&gt; 语句 SAPUI5 包含 jQuery 包，&lt;code&gt;jQuery.sap.require(vModuleName)&lt;/code&gt; 方法的作用是加载指定的模块并且执行，这样 MessageBox 的 show() 方法才能运行。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sap.m.MessageBox.alert(vMessage, mOptions*?*)&lt;/code&gt;对话框显示消息，有一个OK按钮（“确定”），没有图标&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox.confirm(vMessage, mOptions*?*)&lt;/code&gt; 确认对话框，询问是否确定，有一个OK按钮和Cancel按钮，一个问号的图标。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox.error(vMessage, mOptions*?*)&lt;/code&gt; 显示错误对话框，带有错误图标和关闭按钮Displays an error dialog with the given message, an ERROR icon, a CLOSE button。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox.information(vMessage, mOptions*?*)&lt;/code&gt; 消息对话框，带有INFO图标和OK按钮。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox.show(vMessage, mOptions*?*)&lt;/code&gt; 显示对话框，类型为sap.m.DialogType.Message，图标和按钮由开发人员自行定义，相对灵活一些。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox.success(vMessage, mOptions*?*)&lt;/code&gt; 显示成功对话框，带有SUCCESS图标和OK按钮。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageBox.warning(vMessage, mOptions*?*)&lt;/code&gt; 显示警告消息，带有WARNING图标和OK按钮。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.m.MessageToast.show()&lt;/code&gt;对用户操作提供一种简单的反馈，并且经过一段时间后自动消失，除非用户将鼠标放在消息上面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;模块化&#34;&gt;模块化&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;如何加载模块&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;jQuery.sap.declare(sModuleName,bCreateNamespace)&lt;/code&gt;申明一个模块，以确保模块存在。这个语句必须出现在 模块代码（也就是代码文件)的第一句。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jQuery.sap.require(vModuleName)&lt;/code&gt;确保当前代码继续之前，所指定的模块被加载和执行。如果所需要的模块没有被加载，将会被同步加载和执行，如果已经加载，就忽略。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.define(sModuleName,aDependencies,vFactory,bExport)&lt;/code&gt;定义module，异步加载依赖模块,sap.ui.define()定义的模块具有全局命名空间。2:定义依赖 3:继承工厂函数。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sap.ui.require()&lt;/code&gt;异步加载依赖的模块，不具有全局命名空间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;使用模块方法实现Controller&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;   sap.ui.define(
    [&amp;quot;Dependencies1&amp;quot;,&amp;quot;Dependencies2&amp;quot;],
    function(Controller){
    &amp;quot;use strict&amp;quot;;
        return Controller.extend(&amp;quot;ControllerName&amp;quot;,{
            onInit:function(){},
                  onBeforeRendering:function(){},
                  onAfterRendering:function(){},
                  onExit:function(){}
        });
    }
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;参数1 : 不定义，便于对模块进行访问&lt;/li&gt;
&lt;li&gt;参数2 : 指定依赖的模块，可指定多个&lt;/li&gt;
&lt;li&gt;参数3 : 定义工厂函数，实现Controller功能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;model-binding&#34;&gt;Model Binding&lt;/h2&gt;

&lt;h3 id=&#34;单数据绑定&#34;&gt;单数据绑定&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用数据绑定前，需要先实例化Model.构造函数获取实例的URL或则数据本身作为第一个参数。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​    JSON-Model:&lt;/p&gt;

&lt;p&gt;​        &lt;code&gt;var oModel = new sap.ui.model.json.JSONModel(dataUrlOrData);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​    XML-Model:&lt;/p&gt;

&lt;p&gt;​        &lt;code&gt;var oModel = new sap.ui.model.xml.XMLModel(dataUrlOrData);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​    OData-Model:&lt;/p&gt;

&lt;p&gt;​        &lt;code&gt;var oModel = new sap.ui.model.odata.ODataModel(dataUrl[,userJSON,user,pass]);&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给Model设置值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;oModel.setData(data);  绑定定义的数据&lt;/p&gt;

&lt;p&gt;oModel.loadData(&amp;ldquo;models/suppliers.json&amp;rdquo;); 从文件中读取数据绑定&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将Model分配给Core或则其他的控制器（setModel）方法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global model:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​        &lt;code&gt;sap.ui.getCore().setModel(oModel)&lt;/code&gt; : 这样oModel对整个应用程序可见&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bind a model to a view&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​       &lt;code&gt;var oView = sap.ui.view({type:sap.ui.core.mvc.ViewType.JS,viewName:&amp;quot;text.view&amp;quot;})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​     &lt;code&gt;oView.setModel(oModel);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bind a model to a specific control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​        &lt;code&gt;var oTable = sap.ui.getCore().byId(&amp;quot;table&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​        &lt;code&gt;oTable.setModel(oModel);&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model属性绑定方法（{ } curly braces，bindProperty()）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​    控件的大多数属性都可以绑定到模型属性。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bindProperty  method: [extend : sap.ui.base.ManagedObject]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​        &lt;code&gt;oControl.bindProperty(&amp;quot;sName&amp;quot;,&amp;quot;oBindingInfo&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​            oBindingInfo attributes : path、model、formatter等&lt;/p&gt;

&lt;p&gt;​                path : 指定绑定的数据路径&lt;/p&gt;

&lt;p&gt;​                model : sap.ui.model.BindingMode.OneWay、sap.ui.model.BindingMode.TwoWay&lt;/p&gt;

&lt;p&gt;​                formatter :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;花括号:{ }
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​        &lt;code&gt;var oControl = new sap.ui.commons.TextView({controlProperty:&amp;quot;{/modelProperty}&amp;quot;});&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alternatively：
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​        &lt;code&gt;var oControl = new sap.ui.commons.TextView({controlProperty:{path:&amp;quot;/modelProperty&amp;quot;}});&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Model属性的获取。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;oModel.getProperty(&amp;ldquo;/sName&amp;rdquo;);    根据JSON数据属性名获取对应的值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;多数据绑定&#34;&gt;多数据绑定&lt;/h3&gt;

&lt;p&gt;​    用于绑定集合数据，如绑定多行数据到一个表格中。使用模板:所有行都用同样的方法显示数据。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用模板:所有行都用同样的方法显示数据&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;var oItemTemplate = new sap.ui.core.ListItem({text:&amp;quot;{aggrProperty}&amp;quot;});
var oComboBox = new sap.ui.commons.ComboBox({
  items:{path:&amp;quot;/modelAggregation&amp;quot;, template: oItemTemplate}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;bindAggregation():&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​        &lt;code&gt;oComboBox.bindAggregation(&amp;quot;items&amp;quot;,&amp;quot;/modelAggregation&amp;quot;,oItemTemplate);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;工厂函数实现聚合绑定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;oTable.bindAggregation(&amp;ldquo;items&amp;rdquo;,&amp;ldquo;/modelData&amp;rdquo;,function(sId,oContext){&lt;/p&gt;

&lt;p&gt;​ return oColumnListItem; //通过工厂函数，定义数据并返回&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;h3 id=&#34;元素绑定&#34;&gt;元素绑定&lt;/h3&gt;

&lt;p&gt;​   元素绑定指根据上下文(binding context)使用相对绑定的方式绑定到model数据的某一具体对象。尤其适用于&lt;strong&gt;主从数据显示(master-detail data)&lt;/strong&gt;的情况。&lt;/p&gt;

&lt;p&gt;​   sap.m.List(sId?, mSettings?) : List控件适用于显示行项目，所有类型都可以。&lt;/p&gt;

&lt;p&gt;​   sap.m.ObjectListItem(sId?, mSettings?) : 适用于显示行项目的信息，主要使用&lt;strong&gt;title&lt;/strong&gt;属性进行标识，text、icon、atrributes和statuses等属性可以用于提供对象更多信息。&lt;/p&gt;

&lt;p&gt;​   sap.m.Panel().bindElement({path:sPath}) : 将显示的明细与Model绑定。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;左边是一个List控件，右边在Panel中放置几个控件组合。当选择左边某个产品的时候，右边相应显示该产品的信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;oEvent.getSource().getBindingContext()&lt;/code&gt;获取绑定的项，再使用&lt;code&gt;getPath()&lt;/code&gt;方法得到path路径，然后设置右边的detailPanel与这个路径绑定。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model 中detail包含多条数据的情况，点击 一个header,显示多个行项目，可以通过&lt;code&gt;sap.ui.model.Filter()&lt;/code&gt;的方法实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绑定点击事件,&lt;code&gt;oSupTable.attachRowSelectionChange(fuction(oEvent()))&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;var oRowContext = oEvent.getParameter(&amp;quot;rowContext&amp;quot;)&lt;/code&gt;获取行的上下文。如果选中第一行，rowContext就是constructor {oModel: 指定Model, sPath: &amp;ldquo;数据第一行地址&amp;rdquo;}。&lt;/p&gt;

&lt;p&gt;然后通过&lt;code&gt;var sSelectedId = oModel.getProperty(&amp;quot;id&amp;quot;, oRowContext)&lt;/code&gt;;就能获取到所选择行的id数据。&lt;/p&gt;

&lt;p&gt;通过 &lt;code&gt;var oBinding = oPrdTable.getBinding()&lt;/code&gt;;获取对应详细数据的绑定。&lt;/p&gt;

&lt;p&gt;定义过滤规则，var oF = new sap.ui.model.Filter({path:&amp;ldquo;key index&amp;rdquo;,oprator: new sap.ui.model.FilterOperator.BT,value1:value&amp;hellip;})。&lt;/p&gt;

&lt;p&gt;使用过滤规则，oBinding.filter(oF);&lt;/p&gt;

&lt;h3 id=&#34;绝对绑定和相对绑定&#34;&gt;绝对绑定和相对绑定&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;绝对绑定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将value属性绑定到json model根目录下对应的字段title/attr。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;相对绑定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;相对绑定尤其适用于布局(layout)控件或者容器控件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当父控件的绑定路径设置后，子控件可以基于这个路径使用相对路径。&lt;/p&gt;

&lt;h2 id=&#34;routing导航&#34;&gt;Routing导航&lt;/h2&gt;

&lt;p&gt;​   Openui5 的 routing 基于模式 ( pattern )，使用 &lt;code&gt;#&lt;/code&gt; 符号表示不同的路径 ( route )，导航通过路径的改变来实现。&lt;/p&gt;

&lt;h3 id=&#34;pattern-表达式&#34;&gt;Pattern 表达式&lt;/h3&gt;

&lt;p&gt;Openui5 一共有 5 种 pattern表达式:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;硬编码模式&lt;/strong&gt; : 页面之间根据模式导航，没有参数传递，比如 product/settings 表示导航到产品配置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;路径含有必输参数模式&lt;/strong&gt; : 模式中 大括号({}) 包含的部分表示参数必须输入。比如 product/{id} 表示导航到产品某一 id，比如 product/5 表示 id 为 5 的产品，id 为必输。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;路径含有可选参数模式&lt;/strong&gt; : 模式中 冒号 包含的部分为必输参数。比如 product/{id}/detail/:detailId:，detailId 为可选参数。product/5/detail 以及 product/3/detail/2 都能与此模式匹配。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;路径含有查询参数模式&lt;/strong&gt; : 查询参数 ( query parameter ) 在问号之后。比如 product{?query}，query 这个参数为必输项。product:?query: 中的 query 这个参数为可选参数。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;**通配参数模式 **: 以星号结尾的参数是通配参数，通配参数将根据模式尽可能匹配。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;导航调用&#34;&gt;导航调用&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;父导航&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) 跳转到Detail view子导航&lt;/p&gt;

&lt;p&gt;2) 向Detail view传递一个参数，参数为当前点击的路径，Detail获取该路径完成数据绑定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;var oRouter = UIComponent.getRouterFor(this);获取当前的router&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;var oItem = oEvent.getSource();获取点击所在的行&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;oItem.getBindingContext().getPath();获取点击的路径，String类型（/Sup/0）路径传到Detail&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;oRouter.navTo(&amp;ldquo;detail&amp;rdquo;,{supplierPath:encodeURIComponent(sPath)});方法不能包含&lt;code&gt;/&lt;/code&gt;所以使用 &lt;code&gt;encodeURIComponent()&lt;/code&gt; 函数编码，在Detail controller 中用&lt;code&gt;decodeURIComponent()&lt;/code&gt;函数解码。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;子导航&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) 获取 Master view 传递的路径，根据此路径完成 element binding。比如当 Master view 传过来 &lt;code&gt;/Suppliers/0&lt;/code&gt;，则与第一条数据绑定;&lt;/p&gt;

&lt;p&gt;2) 根据页面之间的关系，当点击 &lt;strong&gt;返回&lt;/strong&gt; 按钮时，返回到上一个页面。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;var oRouter = UIComponent.getRouterFor(this);&lt;/code&gt;获取当前Router&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;oRouter.getRoute(&amp;quot;detail&amp;quot;).attachPatternMatched(this._onObjectMatched, this);&lt;/code&gt;，当模式匹配时，附加事件处理器为 &lt;code&gt;_onObjectMatched&lt;/code&gt;。然后在 &lt;code&gt;_onObjectMatched&lt;/code&gt; 中获取 Master view 传递的路径并绑定数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt; _onObjectMatched: function (oEvent) {           
     var sPath = decodeURIComponent(
             oEvent.getParameter(&amp;quot;arguments&amp;quot;).supplierPath);
     this.getView().bindElement({path: sPath});
 }   
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;当用户点击导航按钮，判断是否有上一个路径 ( previous hash )，如果有就返回上一个路径，否则跳转到 Master view:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt; onNavPress: function() {
     var oHistory = History.getInstance();
     var sPreviousHash = oHistory.getPreviousHash();
         
     if (sPreviousHash != undefined){
         window.history.go(-1);
     }else{
         var oRouter = UIComponent.getRouterFor(this);
         oRouter.navTo(&amp;quot;master&amp;quot;,{}, true);
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mock-server&#34;&gt;mock server&lt;/h2&gt;

&lt;p&gt;​   在开发过程中，通过使用模拟服务器的方法方便测试，SAPUI5将模拟服务器称为mock server.mock server的基本功能是模拟oData数据的提供者，截获应用程序对服务器端的http或https请求，并传回模拟请求的回应，可以降低与真实后端的耦合。&lt;/p&gt;

&lt;h1 id=&#34;系统配置和功能块&#34;&gt;系统配置和功能块&lt;/h1&gt;

&lt;h2 id=&#34;sap-netweaver-gateway&#34;&gt;SAP NetWeaver Gateway&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;SAP NetWeaver Gateway 是一种技术，它提供了一种基于市场标准将设备，环境和平台连接到 SAP 软件的简单方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;任何SAP业务套件都是无中断的&lt;/p&gt;

&lt;p&gt;易于开发简单的API,不需要任何工具知识&lt;/p&gt;

&lt;p&gt;基于REST,oData。允许使用功能任何编程语言或模型连接到SAP应用程序&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;将SAP NetWeaver Gateway 连接到 SAP Business Suite&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) 将后端服务器配置为信任系统 : SM59&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/SAPUI5/1559703243928.png&#34; alt=&#34;1559703243928&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​                &lt;img src=&#34;https://coldinfire.github.io/images/SAPUI5/1559712968906.png&#34; alt=&#34;1559712968906&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2) SMT1&lt;/p&gt;

&lt;p&gt;​                &lt;img src=&#34;https://coldinfire.github.io/images/SAPUI5/1559713194355.png&#34; alt=&#34;1559713194355&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SAP NetWeaver Gateway部署选项&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1) 中央枢纽部署 : 后端系统的开发&lt;/p&gt;

&lt;p&gt;​    在此类部署选项中，中央 UI 附加组件，特定于产品的 UI 附加组件和 SAP NetWeaver 网关包含在 ABAP 前端服务器中。后端服务器包含业务逻辑和后端数据。开发在 ABAP 后端系统中进行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;它需要单独的 SAP NetWeaver Gateway 系统&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;它允许在没有后端开发授权的情况下更改 UI。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;它为所有 UI 问题提供单点维护。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;它为 Fiori Apps 的主题和品牌提供了中心位置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;它提供对后端系统的单点访问。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;由于无法直接访问后端系统，因此增强了安全性。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接本地访问元数据（DDIC）和业务数据以及轻松重用数据。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) 中央集线器的部署&lt;/p&gt;

&lt;p&gt;​    如果必须在后端系统上执行开发，或者在 7.40 之前的版本中执行开发，则使用此选项。如果不允许在&lt;strong&gt;后端&lt;/strong&gt;部署 Add-On &lt;strong&gt;IW_BEP&lt;/strong&gt;。在这种情况下，开发人员仅限于可通过后端 RFC 访问的接口。&lt;/p&gt;

&lt;p&gt;​    开发在 Gateway 集线器系统中进行，并且不触及 Business Suite 后端系统。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;无法直接访问&lt;strong&gt;元数据（DDIC）&lt;/strong&gt;和业务数据。因此，数据的重用是有限的。&lt;/li&gt;
&lt;li&gt;无法远程使用 GENIL 对象。&lt;/li&gt;
&lt;li&gt;在此配置中，访问仅限于远程启用的接口，如 RFC 模块，BAPI 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;odata-开放数据协议&#34;&gt;oData(开放数据协议)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;概述: OData 用于定义构建和使用 RESTful API 所需的最佳实践&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OData 提供扩展功能，以满足 RESTful API 的任何自定义需求。&lt;/li&gt;
&lt;li&gt;REST 代表 Representational State Transfer。&lt;/li&gt;
&lt;li&gt;它依赖于无状态，客户端 - 服务器，可缓存的通信协议。几乎在所有情况下，都使用 HTTP 协议。&lt;/li&gt;
&lt;li&gt;REST 被定义为用于设计网络应用程序的体系结构样式。&lt;/li&gt;
&lt;li&gt;OData 可帮助您在构建 RESTful API 时专注于业务逻辑，而无需担心定义请求和响应头，状态代码，HTTP 方法，URL 约定，媒体类型，有效负载格式和查询选项等的方法。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;oData服务生命周期&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OData 服务生命周期包括 OData 服务的范围。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;激活 OData 服务。&lt;/li&gt;
&lt;li&gt;维护 OData 服务。&lt;/li&gt;
&lt;li&gt;维护模型和服务，直至清理元数据缓存。&lt;/li&gt;
&lt;li&gt;RESTful 应用程序使用 HTTP 请求发布数据以创建或更新，读取数据和删除数据。REST 对所有四个 CRUD（创建 / 读取 / 更新 / 删除）操作使用 HTTP。&lt;/li&gt;
&lt;li&gt;REST 是 RPC（远程过程调用）和 Web 服务等机制的轻量级替代方法。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;oData设置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在manifest.json中配置服务器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;   &amp;quot;sap.app&amp;quot;: {
    ...
    &amp;quot;ach&amp;quot;: &amp;quot;CA-UI5-DOC&amp;quot;,
    &amp;quot;dataSources&amp;quot;: {
      &amp;quot;invoiceRemote&amp;quot;: {
        &amp;quot;uri&amp;quot;: &amp;quot;https://services.odata.org/V2/Northwind/Northwind.svc/&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;OData&amp;quot;,
        &amp;quot;settings&amp;quot;: {
          &amp;quot;odataVersion&amp;quot;: &amp;quot;2.0&amp;quot;
        }
      }
    }
    &amp;quot;sap.ui5&amp;quot;: {
    ...
    &amp;quot;models&amp;quot;: {
      ...
      &amp;quot;invoice&amp;quot;: {
        &amp;quot;dataSource&amp;quot;: &amp;quot;invoiceRemote&amp;quot;
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sap-fiori-launchpad&#34;&gt;SAP Fiori Launchpad&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;关于 SAP Fiori Launchpad 的要点如下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于 Web 的入口点，可跨平台和设备使用 SAP Business 应用程序。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作为 I HTML 客户端的开箱即用思想提供。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用主题，搜索集成，自定义等功能为最终用户提供高生产率。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;为使用多种设备类型的最终用户提供单一入口点。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>MM 主要数据创建</title>
      <link>https://coldinfire.github.io/2019/MMMasterData/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMMasterData/</guid>
      <description>

&lt;h3 id=&#34;enterprise-struture&#34;&gt;Enterprise Struture&lt;/h3&gt;

&lt;p&gt;1.Define Company : OX15&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Financial Account -&amp;gt; Define Company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/1.png&#34; alt=&#34;Define Company&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/2.png&#34; alt=&#34;Details&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.Enter company&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2.Enter company name&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3.Update address&lt;/li&gt;
&lt;li&gt;4.Enter country code of company&lt;/li&gt;
&lt;li&gt;5.Enter language key&lt;/li&gt;
&lt;li&gt;6.Enter local currency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Define Company Code : OX02&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Financial Account -&amp;gt; Edit,Copy,Delete Company Code
&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/3.png&#34; alt=&#34;Company Code&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/4.png&#34; alt=&#34;Details&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.Assign Company Code to Company : OX16&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Financial Account -&amp;gt; Assign Company Code To Company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/5.png&#34; alt=&#34;Assign Demo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4.Define Plant : OX10&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Logistics -&amp;gt;General -&amp;gt; Define plant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/6.png&#34; alt=&#34;Define Plant&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5.Assign Plant to Company Code : OX18&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Assignment -&amp;gt; Logistics -&amp;gt; AssignPlant to Company Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/7.png&#34; alt=&#34;Assign&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6.Maintain Storage Locations : OX09&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprise Structure -&amp;gt; Definition -&amp;gt; Material Mast -&amp;gt; Maintain storage Location&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/8.png&#34; alt=&#34;Storage Location&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7.Maintain Purchase Organization : OX08&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;Enterprice Structure -&amp;gt; Definition -&amp;gt; Material Mast -&amp;gt; Maintain Purchasing Org&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/9.png&#34; alt=&#34;Purchase Org&#34; /&gt;&lt;/p&gt;

&lt;p&gt;8.Create Purchase groups : OME4&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt;MM -&amp;gt; Purchasing -&amp;gt; Create Purchasing Groups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/10.png&#34; alt=&#34;Purchasing Groups&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9.Assign Purchasing org to Company Code : OX01&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt; Enterprice Structure -&amp;gt; Assign -&amp;gt; Material Mast  -&amp;gt; Assign Purchase Org to Company Code
&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/11.png&#34; alt=&#34;Assign&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;10.Assign Purchasing organization to reference purchasing org&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt; Enterprice Structure -&amp;gt; Assign -&amp;gt; Material Mast -&amp;gt; Assign Purchase Org to RPO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;11.Assign Purchase Org to Plant : OX17&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt; Enterprice Structure -&amp;gt;Assignment -&amp;gt; Material Mast -&amp;gt; Assign PO to Plant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MMMasterData/12.png&#34; alt=&#34;Org To Plant&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;master-data&#34;&gt;Master Data&lt;/h3&gt;

&lt;p&gt;1.物料主数据视图：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;包含：常规，采购，销售，库存， 计划，属性，备注等视图维护。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Split Valuation configuration (定义全球估价类型) : OMWC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; IMG -&amp;gt; MM -&amp;gt; valuation and account assign -&amp;gt; split valuation -&amp;gt;config split valuation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一个屏幕（Global Types）&lt;/p&gt;

&lt;p&gt;第二个屏幕（创建新的估价类型 Valuation Types：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;Valuation type:识别估价类型的关键
Ext.PO : 是否允许外部采购订单（0：不允许，1：允许，提示警告，2：允许）
Int.PO  : 是否允许内部订单（0：不允许，1：允许，提示警告，2：允许）
Acct cat : 账户参考必填字段。选择合适的值）
     （创建新的估价类别： Valuation category :
        Def ext.procure:默认外部采购
        ext.procurement mand ： 复选框勾选则无法在PO级别更改评估类型
        Def in-house:
        val.type automatic: 复选框用于拆分评估和批次管理
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.Create Material Group ： OMSF&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; Logistic general -&amp;gt; MM -&amp;gt; Settings for Key Fields -&amp;gt; Define Material Group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;物料组：是物料统计分组的标识，属于无组织机构级别，它在采购信息记录、采购订单等中使用。在创建采购订单时， 当输入物料编号，物料组就自动被带出。物料组用于内部管理，分类较细。用户可以通过物料组获取整个采购状况及当前库存的标准SAP报表。&lt;/p&gt;

&lt;p&gt;3.Create Material Types ： OMS2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO -&amp;gt; Logistic general -&amp;gt; MM -&amp;gt; Basic Settings -&amp;gt; Material Types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;物料类型用来控制视图的范围，也用来控制物料的计价方式以及物料是否能够用于库存管理。也是SAP报表和分析涉及的重要对象。作为物料统计和分类的标准之一。如需新建物料类型，不能采用新建条目，只能采用复制方法，具体步骤是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;1&gt;参考已有的物料类型进行复制，但不要修改条目细节的属性值；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;2&gt;对新建的物料类型进行修改，以其符合自身需求。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;  新建物料类型后，需要维护编码范围；维护数量/价值更新；字段状态维护。
  字段参考：为字段状态服务的分组码
  项目类别组：设定默认的项目类别组，用于销售项目类别确认、计划类别确认、交货项目类别确认
  账户分类参考：设计会计视图的可应用的评估类，与自动记账相关
  用户部门：根据业务需求选择部门内部，外部采购订单：根据业务要求选择值
  计价：
  价格控制：选择适用
  关联科目：从列表中选择，检查输入评估类是否允许维护物料主记录中的会计数据
  库存项目：不是库存项目，值更新；具有值的库存项目，数量更新和值更新
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.Define industry Sectors ： OMS3&lt;/p&gt;

&lt;p&gt;Industry sectors , industry desc , Field Reference.&lt;/p&gt;

&lt;p&gt;5.Maintain company codes for material management&lt;/p&gt;

&lt;p&gt;SPRO &amp;gt; Logistics &amp;gt; General &amp;gt; MM &amp;gt; Basic settings &amp;gt; Maintain company code for MM&lt;/p&gt;

&lt;p&gt;CoCD,Company Name,Year,等字段信息更新保存。&lt;/p&gt;

&lt;p&gt;6.Define MRP Controllers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO &amp;gt; IMG &amp;gt; Production &amp;gt; MRP &amp;gt; Master Data &amp;gt; Define MRP Controllers(Plant,MRP Controller, Tel)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SAP MRP are planned for each plant and every plant has its own MRP data.&lt;/p&gt;

&lt;p&gt;7.Create,Change,Display Material : MM01/MM02/MM03&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPRO &amp;gt; Logistics &amp;gt; MMt &amp;gt; MMa &amp;gt; Material &amp;gt; Create general&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;8.Create Purchasing info records : ME11/ME12/ME13&lt;/p&gt;

&lt;p&gt;为不同的采购类型创建采购信息记录，例如标准、分包、管道、寄售。用于将供应商和物料在工厂级别或则采购组织数据作为主数据存储。&lt;/p&gt;

&lt;h4 id=&#34;info-record&#34;&gt;Info Record&lt;/h4&gt;

&lt;p&gt;总账科目确认：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按物料级别设置科目：手动输入的科目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按仓库设置总账科目：仓库定义中的科目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;按物料组设置总账科目：物料组定义中的科目&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MM 包含流程解析</title>
      <link>https://coldinfire.github.io/2019/MMDetail1/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMDetail1/</guid>
      <description>

&lt;h2 id=&#34;企业组织结构&#34;&gt;企业组织结构&lt;/h2&gt;

&lt;h3 id=&#34;整体架构&#34;&gt;整体架构&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;集团：是 R/3 系统里的一个商业的组织层次。有自己的数据、主记录及各种报表。从业务角度看，集团当作各个实体的组合。&lt;/li&gt;
&lt;li&gt;公司代码：一个公司代码代表一个独立的会计实体。每个公司代码都有它自己得到资产负债表和损益表。&lt;/li&gt;
&lt;li&gt;工厂：是公司内的组织单元，生产产品、提供服务或销售产品，工厂可以是（制造厂、仓库中转中心、 区域销售办公司、公司总部）&lt;/li&gt;
&lt;li&gt;仓储地点：是工厂内存放不同类型物料的组织单位，如：材料仓，成品仓，材损仓。&lt;/li&gt;
&lt;li&gt;采购组织：是负责为一个或多个工厂工厂采购物料和提供服务及与供应商协商价格和供货条款的主旨单位。价格条件在采购组织层次设置。如果一个采购组织为多个工厂采购，则价格在各个工厂都有效。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;采购组：是采购组织的进一步细分，负责日常的采购活动，一个采购组也可以为多个采购组织工作&lt;/p&gt;

&lt;h4 id=&#34;集团-公司代码-工厂&#34;&gt;集团 / 公司代码 / 工厂&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/Client1.png&#34; alt=&#34;架构关系&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;公司代码-工厂-库存地点&#34;&gt;公司代码 / 工厂 / 库存地点&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/Client2.png&#34; alt=&#34;架构关系&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;物料主数据&#34;&gt;物料主数据&lt;/h3&gt;

&lt;h4 id=&#34;主要信息&#34;&gt;主要信息:&lt;/h4&gt;

&lt;p&gt;描述性信息：描述，尺寸，体积等&lt;/p&gt;

&lt;p&gt;控制性信息：MRP类型，价格控制，采购组等&lt;/p&gt;

&lt;p&gt;物料主数据：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General:           Material Number、Description、Base Unit Of Measure、Technical&lt;/li&gt;
&lt;li&gt;Plan Specific：MRP type、Planned delivery time、Purchasing group、Batch indicator&lt;/li&gt;
&lt;li&gt;Valuation：     Valuation price、Valuation procedure、Valuated quantity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;物料主数据记录中的数据是集合在不同的视图中；不同部门会有不同的物料主数据视图。&lt;/p&gt;

&lt;h4 id=&#34;1-物料信息录入&#34;&gt;1.物料信息录入&lt;/h4&gt;

&lt;p&gt;必须数据：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;物料号：根据需求定义 ；&lt;/li&gt;
&lt;li&gt;行业领域：（控制哪些数据需要显示）；&lt;/li&gt;
&lt;li&gt;物料类型：（群组，归类）：控制哪些部门需要维护&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;SPRO：SAP后台配置 =&amp;gt; 后勤常规---&amp;gt;物料主数据---&amp;gt;基本设置---&amp;gt;物料类型---&amp;gt;定义物料类型的属性
                详细信息---&amp;gt;用户部门（决定哪些部门需要维护）
                控制内外部采购订单：决定是不是自己生产的（影响采购类型）
                控制账户分类参考：
                控制数量/价值更新：决定数量和价值的更新
            客户供料：只会做数量更新，不会做价钱更新（不属于本公司）
            显示具体信息：设置显示（专家模式）
                成品（FERT）&amp;lt;Finished Product&amp;gt;
                半成品（HALB）&amp;lt;Semifinished Product&amp;gt;
                原材料（ROH）&amp;lt;Raw materials&amp;gt;
                备品备件（ERSA）&amp;lt;Spare Parts&amp;gt;
                贸易货物（HAWA）&amp;lt;Trading Goods&amp;gt;
                包装物料（VERP）&amp;lt;Packaging&amp;gt;
                可反复利用包装（LEIH）&amp;lt;Returnable packaging&amp;gt;
                未估价物料(UNBW)
                管线物料（PIPE）&amp;lt;Pipeline materials&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/MMMain.png&#34; alt=&#34;视图&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/MM/MMScreen.png&#34; alt=&#34;数据屏幕&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-消耗型物料&#34;&gt;2.消耗型物料&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;办公材料 &amp;lt;成本中心&amp;gt;&lt;/li&gt;
&lt;li&gt;计算机系统 &amp;lt; 固定资产 &amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;1&gt; 消耗型物料时直接为了一个科目设置对象而购买的物料 (不需要办理入库和出库手续)&lt;/p&gt;

&lt;p&gt;&lt;2&gt; 库存管理未被执行&lt;/p&gt;

&lt;p&gt;&lt;3&gt; 系统会自动更新有物料主记录的消耗型物料&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;          库存物料            《=》              消耗型物料
    输入要求的物料编号                     可以输入物料编号，但不是必须的
    无科目设置类别                         强制科目设置类别
    过账到库存科目                         过账到消耗科目
    在物料主记录中更新数量和价值            消耗品更新（只使用于物料主记录中的物料）、移动平均价格被调整
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;非库存物料（NLAG）: 有一定采购频率、是有物料主数据，但不做库存管理的物料。（价值，数量）。

&lt;ul&gt;
&lt;li&gt;使用该物料类型（NLAG）的物料，创建采购订单需要指定账户分类（如 K 等）；根据采购订单收货时，直接财务上消耗记账。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;未评估物料（UNBW) : 做数量管理，不做价值管理

&lt;ul&gt;
&lt;li&gt;使用该物料类型（UNBW）的物料，创建采购订单需要指定账户分类（如 K 等）；根据采购订单收货时，直接财务消耗记账，更新库存数量；消耗时，只记录库存数量减少。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-bom&#34;&gt;3.BOM&lt;/h4&gt;

&lt;p&gt;BOM：物料清单 (零件结构表)，将产品的原材料、零配件、组件予以拆解，并将各单位项材料依材料编号、名称、
规格、基本单位、单位用量、产品损耗等依制造流程的顺序记录下来，排列为一个清单，就是 BOM。&lt;/p&gt;

&lt;h4 id=&#34;4-mrp&#34;&gt;4.MRP&lt;/h4&gt;

&lt;p&gt;MRP：物料需求计划，利用生产日程表（MPS）、零件结构表（BOM）、库存报表、已订购未交货订单等等
各种相关资料，经正确计算而得出各种物料零件的变量需求，提出各种新的订购或修正各种以开出订购
的物料管理技术。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/MRP.png&#34; alt=&#34;MRP原理&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/MM/MRP2.png&#34; alt=&#34;MRP&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-视图选择&#34;&gt;5.视图选择&lt;/h4&gt;

&lt;p&gt;根据选择的部门不同，输入的内容也不同，系统自动识别所属类型.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺省值的设置。&lt;/strong&gt;
 - 行业领域、选择视图、组织级别都可以设置缺省值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;基本数据 1：一般属于物料描述等属性，属于集团类别。
X 单位：基本单位，订单单位，转换因子（附加数据中有计量单位的设定，
计量单位组：预先定义好单位转换 &amp;lt;通过后台设置关键字 设置计量单位组中进行设置的&amp;gt;）
X 物料组：做分析会用到、可以利用不同的物料组决定种类分类账
X 旧物料号： 便于查找旧系统数据
X 部门：Division (1) 影响 SD/FI 两个模块 (2) 无值将导致销售无法生成订单，单价录入，报告书等
实验室 / 办公室：描述信息没有特殊描述
X 产品组：根据公司产品分组，不填写销售无法生成订单
X 附加数据：通过附加数据来维护不同语言环境的物料描述
凭证数据、内部批注、计量单位
号码范围：通过后台维护 ---&amp;gt; 定义号码范围 （组 物料类型 定义号码范围）
外部给号，内部给号范围的限制。未检测的外部号分配
X 毛重、净重：报关使用

销售组织数据 1：
X 交货工厂编码：
X 税务数：国家，纳税类型
销售组织数据 2：影响销售订单
分组条款：
X 物料定价组：（固定值）
X 科目设置组：
X 项目类别组：（固定值）
物料组：X1，2，3，4，5
销售一般 / 工厂：影响销售的订单
工厂：工厂代码
批次管理：（包装品必须勾选）
运输组：
装载组：
利润中心：
采购：
采购组：用于区分资材类型（BOM、Non BOM） 报表所需
批次管理：（勾选，HANON 暂不使用）
配额安排：同意物料对应多个供应商时用到此值（用分配的比例确定供应商的纳品数）
源清单：物料与供应商信息的结合，不勾选，无法生成采购订单

MRP1：MRP 类型、MRP 控制者、批量（在 PP 中会使用到的）
MRP 组：
MRP 类型：（固定值 PD）
MRP 控制者：
批量大小：（固定值 EX）
MRP2：影响 MRP 运算
采购类型：内部生产或则外部采购
特殊采购类型：有偿加工必填 &amp;lt;31&amp;gt;, 无偿加工品必填 &amp;lt; 30&amp;gt;
外部采购仓储地点：物料存储仓库
计划边际码：采购品须填写准确日期，影响 MRP 运输
计划交货时间：进口件
MRP3：可用性检查（02）
策略组：内部生产品必填，固定值
MRP4:
  选择方法：内部生产品必填，固定值
  重复生产：内部生产品必填，固定值
  重复生产参数 文件：内部生产品必填，固定值
工厂数据 / 存储：
存储条件：关系到销售出库
End Item：直买直卖的物品必须勾选

会计 1：
评估分类：影响会计计算，必须准确
价格确定：系统自动存在，没有时必须输入

成本 1：
勾选物料来源：
主要视图：
基础视图 -- 物料基本描述（集团层次通用）- 不同的工厂，不同公司看到的数据都是一样的
采购视图 -- 采购模块数据
销售视图 -- 销售业务数据
生产视图 --MRP 数据
会计视图 -- 财务会计数据
成本视图 -- 成本会计数据
外部采购 与 计划交货时间（必输 &amp;lt;采购提前期&amp;gt;）

MRP：
MRP1：MRP 类型、MRP 控制者、批量（在 PP 中会使用到的）
MRP2：采购类型、计划交货时间、计划边际码
MRP3：可用性检查（02）
MRP4： 不输入
会计 1：
评估类、价格控制、价格单位、标准价格
后续可以不用输入。即可建立料号。
Control string：material type、plant、industry sector、transaction、procurement indicator（采购类型）
通过字段选择 --&amp;gt; 维护数据屏幕的字段选择来修改屏幕的状态
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;6-组织层次&#34;&gt;6.组织层次&lt;/h4&gt;

&lt;p&gt;工厂，库存地点，销售机构，分销渠道&lt;/p&gt;

&lt;h2 id=&#34;库存采购基础&#34;&gt;库存采购基础&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/Buy.png&#34; alt=&#34;采购环境&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;采购流程&#34;&gt;采购流程：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1. MRP &amp;amp; Purch.Req (Determination of reqmts)（确认需求）&lt;/li&gt;
&lt;li&gt;2. Source determination (购买方式和货源)&lt;/li&gt;
&lt;li&gt;3. Vendor selection （跟哪个供应商买）&lt;/li&gt;
&lt;li&gt;4. Request for Quotation (要求报价)&lt;/li&gt;
&lt;li&gt;5. Purchase Requisition (采购申请)&lt;/li&gt;
&lt;li&gt;6. PO processing （下采购订单）&lt;/li&gt;
&lt;li&gt;7. PO monitoring （订单跟踪）&lt;/li&gt;
&lt;li&gt;8. Goods receipt （收货）&lt;/li&gt;
&lt;li&gt;9. Invoice verfication （发票校验）&lt;/li&gt;
&lt;li&gt;10. Payment processing （付钱）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;MRP：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用预计的制造生产计划来确定所需材料以及何时需要信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;供应商选择：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从报价中比较选择供应商。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;报价请求：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要求潜在供应商提交材料或服务报价。Quatation 包含供应商的条款和条件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;采购申请：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;物料使用部门提出的队某种物料的需求&lt;/li&gt;
&lt;li&gt;可以由系统自动生成 (MRP) 或手工生成&lt;/li&gt;
&lt;li&gt;公司内部谁用文件&lt;/li&gt;
&lt;li&gt;可以没有供应商、没有价格，只有评估价值&lt;/li&gt;
&lt;li&gt;可以自动或手动地转化为采购订单&lt;/li&gt;
&lt;li&gt;交货指示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;采购订单：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PO 是供应商在特定条件下提供某些材料或服务的正式请求。&lt;/li&gt;
&lt;li&gt;询价 / 报价：第一次购买的物料，为一种库存物料创建一张采购订单&lt;/li&gt;
&lt;li&gt;采购订单处理：参考采购订单输入一张物料接收，评估自动生成的各个凭证&lt;/li&gt;
&lt;li&gt;收货：输入与采购订单相关的收据，同时进行价格及质量检查&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;检查供应商发票：核实在发票过账基础上创建的财务会计凭证，验证其可信程度&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;询价报价&#34;&gt;询价报价&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;询价单 / 报价单：ME41/ME47 &lt;RFQ&gt;&lt;/li&gt;
&lt;li&gt;打印询价单：ME9A&lt;/li&gt;
&lt;li&gt;价格对比：ME49&lt;/li&gt;
&lt;li&gt;信息清单：ME11&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;确定购买需求&lt;/li&gt;
&lt;li&gt;确定货源的供应&lt;/li&gt;
&lt;li&gt;向选定的多个供应商发送询价单（物料价格，物料数量，送货时间，等等）&lt;/li&gt;
&lt;li&gt;根据供应商返回的报价单挑选合适的 (报价单处理：输入价格和条件，应用价格比较列表比较报价单)&lt;/li&gt;
&lt;li&gt;参照报价单创建采购订单&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;采购信息记录和价格决定：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1）手工输入价钱&lt;/p&gt;

&lt;p&gt;2）如果手工没有输入，系统找 Info record，如果信息记录中有合适的价钱，采用 Info record 价格。&lt;/p&gt;

&lt;p&gt;3 ）没有Info record价格，最后采用 PO 价钱，也可以不从最后的 PO 带入价格。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配额协议&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;货源清单 (Source List)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;信息记录 (Info record)&lt;/strong&gt;：ME11（手工输入，报价单，采购订单，框架协议更新）
：一个物料在某个供应商那里，卖多少钱，有什么特殊条件等信息的存储。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;价格条件：&lt;/strong&gt;
报价价格、采购订单、信息记录、框架协议会 （用到价格条件类型）&lt;/p&gt;

&lt;p&gt;市场价：对个供应商的价格平均值，查询市场价 &lt;MEKH&gt;&lt;/p&gt;

&lt;p&gt;采购订单：将采购订单发送给供应商《同时发送给生产的工厂》产生采购凭证&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;价钱条件：ME12
手工创建采购订单：ME21N       
跟踪采购订单：ME23N
采购订单订单查询：ME2L
一般数据：供应商数据、原始数据、订购单位等
价格和条件：总价格、折扣、运费、关税、其他
控制数据：交付时间、最小数量、容差
文本：采购订单文本、Int.信息记录备注
统计：价格历史记录、采购订单统计、改变历史记录. . . . . 

订单结构：
    PR Header : 采购订单编号、供应商、货币、付款期限、采购订单日期
    PR Item : 物料编号、短文本、发货日期、采购订单数量、采购订单价格、分类
    科目设置对象：
        A：资产    K：成本中心    P：项目    F：订单(生产，考虑)    C：销售订单    其他
无物料的采购订单：
    采购订单中不输入物料，只输入描述
    可以收获，但是必须是直接消耗，没有库存管理
    适用于低值品的采购           
采购合同   &amp;lt;联系、集成、自动&amp;gt;   采购订单
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;自动采购：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主数据和合同,资源清单&lt;/li&gt;
&lt;li&gt;物料需求计划(MRP)&lt;/li&gt;
&lt;li&gt;自动生成采购单&lt;/li&gt;
&lt;li&gt;发送通知和物料接收&lt;/li&gt;
&lt;li&gt;评估收货结算(ERS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/PRecord.png&#34; alt=&#34;采购订单的自动生成&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;收货：事务代码 《MIGO》&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;供应商根据采购订单将货物发送到指定地区，以及发票&lt;/li&gt;
&lt;li&gt;工厂在收货地点进行收货&lt;/li&gt;
&lt;li&gt;收货时同时产生物料凭证和会计凭证 创建物料凭证：MB03&lt;/li&gt;
&lt;li&gt;货物会收到指定的 Location &amp;lt;货物移动凭证&amp;gt;&lt;/li&gt;
&lt;li&gt;移动类型：仓库收货 &lt;101&gt;、退货发运 &amp;lt; 122&amp;gt;&amp;hellip; &amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;收货后：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;会更新物料主数据的工厂库存视图 (库存查看 MMBE, MB52)&lt;/li&gt;
&lt;li&gt;物料凭证，会计凭证产生&lt;/li&gt;
&lt;li&gt;自动触发启用 QM/WM&lt;/li&gt;
&lt;li&gt;采购订单历史数据更新&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/GR.png&#34; alt=&#34;收货实现&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/MM/proof.png&#34; alt=&#34;凭证产生&#34; /&gt;
&lt;strong&gt;发票校验：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;主数据、发票、采购订单、物料凭证综合数据进行发票校验&lt;/li&gt;
&lt;li&gt;根据校验的结果生产发票凭证 &amp;lt;发票校验科目&amp;gt;&lt;/li&gt;
&lt;li&gt;记账过账处理&lt;/li&gt;
&lt;li&gt;根据发票凭证触发付款程序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/MM/invoice1.png&#34; alt=&#34;发票检验&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/MM/invoice2.png&#34; alt=&#34;凭证产生&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;记账过账：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;根据采购订单、物料凭证、发票信息进行记账&lt;/li&gt;
&lt;li&gt;发票过账时，会创建一张会计凭证。各项目将被发送到相应的科目。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>MM Summary</title>
      <link>https://coldinfire.github.io/2019/MMSummary/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/MMSummary/</guid>
      <description>

&lt;h3 id=&#34;mm概要&#34;&gt;MM概要&lt;/h3&gt;

&lt;h4 id=&#34;业务&#34;&gt;业务&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;(采购询价 ME41 / 报价 ME47 录入、ME49 报价比较)&amp;mdash;-&amp;gt; 采购申请 (PR)&amp;mdash;-&amp;gt; 采购订单 (PO)&amp;mdash;-&amp;gt; 发送采购单给供应商 &amp;lt; ME9F&amp;gt;&amp;mdash;-&amp;gt; 采购收货 (产生物料凭证)&amp;mdash;-&amp;gt; 发票校验 (产生会计凭证)&amp;mdash;-&amp;gt; 应付&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;买物料（Purchasing、Invoicing）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基本数据管理：物料、供应商、采购信息、货源、配额、批次数据&lt;/li&gt;
&lt;li&gt;采购管理：采购申请、货源确定、采购批准、采购订单处理、订单跟踪、采购货物接收&lt;/li&gt;
&lt;li&gt;采购发票校验：订单、收货单、发票数量、金额匹配&lt;/li&gt;
&lt;li&gt;库存管理：库存事务处理、库存状态控制、库存分析与评估&lt;/li&gt;
&lt;li&gt;仓库管理：数量整理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;业务流程&#34;&gt;业务流程&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;SAP 物流相关模块中，工厂是最重要的组织结构，隶属于公司代码，并且包括了和物流管理相关的最多的控制参数。这里首先创建一个工厂。&lt;/li&gt;
&lt;li&gt;创建工厂下面的 3 个库存地点：仓库、生产、运输。&lt;/li&gt;
&lt;li&gt;创建采购组织，再创建两个采购组：原材料和运营供应、贸易商品
（注意：此时采购组织以及采购组和公司代码没有任何联系，采购组织和采购组也并没有联系，实际上，采购组在 client 层次，client 下的任何公司，任何工厂都可以使用这个采购组）；&lt;/li&gt;
&lt;li&gt;定义与工厂相关的两个 MRP 控制者，分别控制自制品计划和贸易商品的计划。&lt;/li&gt;
&lt;li&gt;将创建的工厂分配给公司代码。&lt;/li&gt;
&lt;li&gt;分配采购组织到公司代码。&lt;/li&gt;
&lt;li&gt;分配工厂到采购组织。SAP 系统 SAP 中的一个采购组织可以同时负责几个工厂的采购。&lt;/li&gt;
&lt;li&gt;定义物料组：0001 原材料、0002 产成品和 0003 贸易商品。在维护主数据的时候，需要分配物料组。&lt;/li&gt;
&lt;li&gt;定义计划边际码。这个操作满足这样一种情况：公司除了正常的采购和生产时间，还规定在操作、产前、产后和订单下达各阶段预留一天的缓冲时间。这样的规则被定义在 “计划边际码” 中。&lt;/li&gt;
&lt;li&gt;工厂中有很多控制参数。如在库存管理中，对库存物料可以通过预留号进行预留，比如预留给生产订单或者销售订单。设定该工厂对于库存的预留允许比计划日期提前一个月使用，同时过期一个月以内的预留仍然可以使用。&lt;/li&gt;
&lt;li&gt;维护和库存相关的工厂参数 - 自动创建物料的库存地点视图。只有某个视图被定义了，才可以对这个物料进行某项操作。&lt;/li&gt;
&lt;li&gt;由于公司收到的发票大多是 17% 的增值税发票，因此这里我们可以把它设为缺省值，方便发票校验。因此我们可以在此处维护税务代码的缺省值。&lt;/li&gt;
&lt;li&gt;物料管理在 SAP 中只能开当月的账，或者至多当月或者上个月的账，而且开账只允许一个月一个月往后开，因此一开始我们要设定一个初始期间。
一般初始期间设为上线前的那个月，如 12 月上线，就设定初始日期为 11 月，在 11 月中导入期末库存余额。&lt;/li&gt;
&lt;li&gt;维护和物料需求计划相关的工厂参数。这部分涉及的参数很多，首先可以采用先复制之前的，再更改不适用的参数。&lt;/li&gt;
&lt;li&gt;此处激活物料需求计划 MRP 这项功能，通过后台的配置实现。&lt;/li&gt;
&lt;li&gt;此处定义计划运行的号码范围。运行物料需求计划会产生很多凭证，比如计划订单、非独立需求等，这些凭证都有它们的编号范围。
在 13 步复制 0001 的时候，这些编号范围都已经复制了，这里只需要进行检查。&lt;/li&gt;
&lt;li&gt;物料类型是定义物料主数据的最重要的一个参数。它决定了各类物料主数据需要维护哪些信息和参数，物料主数据的编号范围等。
公司决定使用 SAP 标准的物料类型：HAWA 贸易商品、ROH 原材料、FERT 产成品。&lt;/li&gt;
&lt;li&gt;定义评估控制，激活按 “评估分组代码” 来定义科目，这样可以当集团公司有很多工厂时候，而它们的记账规则又是一样，不用一个一个的进行维护，而是将工厂集合成组统一来定义记账规则。&lt;/li&gt;
&lt;li&gt;将之前定义的工厂归入我们的 CN01 评估分组代码，这样以后该集团增加工厂时候，只需要把它分配给 CN01 就可以了，而不必再定义一套记账规则。&lt;/li&gt;
&lt;li&gt;除了工厂，另一个决定不同的会计科目的因素是物料本身，此处我们在物料主数据中定义一个 “评估类” 参数，通过 “评估类” 来决定会计科目。
本处我们使用标准评估类：3000 原材料、3100 贸易商品、7920 成品。&lt;/li&gt;
&lt;li&gt;这时可以进行原材料主数据的录入了（MMRL）。填入相应的采购组、物料组 MRP 控制者、计划边际码等。&lt;/li&gt;
&lt;li&gt;随后新建贸易商品主数据 MMH1。&lt;/li&gt;
&lt;li&gt;新建生产成品主数据 MMF1。&lt;/li&gt;
&lt;li&gt;创建完各种物料后，可以在 MM60 中显示物料主记录清单。&lt;/li&gt;
&lt;li&gt;创建供应商的采购数据 MK01。创建的时候要填采购组织，账户组，账户组是在 FI 的时候创建的。
供应商的采购数据是和具体的采购组织相关的，也就是说不同的采购组织向同一个供应商采购，可以有不同的规定。&lt;/li&gt;
&lt;li&gt;新建采购信息记录 ME11。采购信息记录包括信息如标准订单数量，净价，几天内交货，由哪个采购组负责等。
保存这样的数据，可以方便实际采购时候参照使用。&lt;/li&gt;
&lt;li&gt;设置 SAP 中最为重要的集成配置之一，即物料移动在 SAP 中如何自动找到会计科目完成自动记账。&lt;/li&gt;
&lt;li&gt;将存货科目设置为只能自动记账，在 FS00 中实现。&lt;/li&gt;
&lt;li&gt;SAP 在处理采购订单时，会检查采购订单中的价格和物料主数据的成本价格差异有多大，同时也会检查采购订单中的现金折扣是否可接受。
如果差异超过一定的荣差，系统会发出警告消息或者错误信息。
不同的容差检查存放在 “容差码” 中，容差码 “PE” 是检查价格的，“SE” 是检查现金折扣的。这里复制 0001 公司的采购价格差异的容差限制。&lt;/li&gt;
&lt;li&gt;SAP 允许采购订单定价数量单位和采购订单数量单位有所不同。比如采购订单数量是按件，但定价是按斤。
这种情况下，收货的时候，两种单位的数量都要输入。在收货的时候，系统会检查定价数量和采购订单中的差异。
这里通过复制 0001 的方式建立公司的收货容差限制。&lt;/li&gt;
&lt;li&gt;SAP 系统在发票校验的时候会做大量检查，如果校验不通过发票就会被冻结。这里复制 0110 的容差检查。&lt;/li&gt;
&lt;li&gt;维护公司的项目全额检查。&lt;/li&gt;
&lt;li&gt;在 MD03 中运行物料需求计划，MD04 可以显示库存 / 需求清单。（MD05 显示 MRP 清单）。&lt;/li&gt;
&lt;li&gt;这里计划部门手动创建采购申请（ME51N）。根据采购申请，采购部门需要向供应商采购（ME21N）。&lt;/li&gt;
&lt;li&gt;进行采购收货（MIGO）。（MB03 显示凭证；显示库存 MMBE）&lt;/li&gt;
&lt;li&gt;供应商采购发票随后到达，在 MIRO 中输入发票，由于发票比采购订单原定的日期提前到达，并超过了荣差，所以发票被冻结了。&lt;/li&gt;
&lt;li&gt;被冻结的发票可以经过相关管理人员检查后手工下达，这里我们下达 35 步被冻结的发票。事物码 MRBR。&lt;/li&gt;
&lt;li&gt;在 MIR4 中显示发票和会计凭证。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mm常用透明表&#34;&gt;MM常用透明表&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Table&lt;/th&gt;
&lt;th&gt;Desc&lt;/th&gt;
&lt;th&gt;Table&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Desc&lt;/th&gt;
&lt;th&gt;Table&lt;/th&gt;
&lt;th&gt;Desc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MARA&lt;/td&gt;
&lt;td&gt;物料主数据&lt;/td&gt;
&lt;td&gt;MARC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;物料工厂(在途库存)&lt;/td&gt;
&lt;td&gt;MSKA&lt;/td&gt;
&lt;td&gt;销售订单库存&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MAKT&lt;/td&gt;
&lt;td&gt;物料描述&lt;/td&gt;
&lt;td&gt;MARD&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;物料库存(当前库存)&lt;/td&gt;
&lt;td&gt;T001L&lt;/td&gt;
&lt;td&gt;工厂库位关系&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MARM&lt;/td&gt;
&lt;td&gt;物料的计量单位&lt;/td&gt;
&lt;td&gt;MARDH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;历史库存&lt;/td&gt;
&lt;td&gt;T001W&lt;/td&gt;
&lt;td&gt;工厂表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MBEW&lt;/td&gt;
&lt;td&gt;物料评估/价格&lt;/td&gt;
&lt;td&gt;MSKU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;第三方库存表&lt;/td&gt;
&lt;td&gt;RKPF&lt;/td&gt;
&lt;td&gt;预留抬头&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MKPF&lt;/td&gt;
&lt;td&gt;物料凭证抬头&lt;/td&gt;
&lt;td&gt;EKKO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;采购订单抬头&lt;/td&gt;
&lt;td&gt;EINE&lt;/td&gt;
&lt;td&gt;Purchasing Org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MSEG&lt;/td&gt;
&lt;td&gt;物料凭证明细&lt;/td&gt;
&lt;td&gt;EKPO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;采购订单明细&lt;/td&gt;
&lt;td&gt;EINA&lt;/td&gt;
&lt;td&gt;Info record(G_data)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MVKE&lt;/td&gt;
&lt;td&gt;物料的销售数据&lt;/td&gt;
&lt;td&gt;EBAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;采购申请抬头&lt;/td&gt;
&lt;td&gt;MAST&lt;/td&gt;
&lt;td&gt;物料到BOM link&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;MVVE&lt;/td&gt;
&lt;td&gt;物料的销售数据&lt;/td&gt;
&lt;td&gt;EBKN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;采购申请明细&lt;/td&gt;
&lt;td&gt;MVER&lt;/td&gt;
&lt;td&gt;物料消耗&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T023&lt;/td&gt;
&lt;td&gt;物料类型&lt;/td&gt;
&lt;td&gt;LFA1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;供应商主数据&lt;/td&gt;
&lt;td&gt;T161T&lt;/td&gt;
&lt;td&gt;采购订单类型文本&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T024&lt;/td&gt;
&lt;td&gt;采购组&lt;/td&gt;
&lt;td&gt;LFB1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Vendor master&lt;/td&gt;
&lt;td&gt;EKET&lt;/td&gt;
&lt;td&gt;安排协议交付时间表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T157H&lt;/td&gt;
&lt;td&gt;移动类型帮助文档&lt;/td&gt;
&lt;td&gt;RESB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;保留/依赖 要求&lt;/td&gt;
&lt;td&gt;EKKN&lt;/td&gt;
&lt;td&gt;采购订单账号分配&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;NRIV&lt;/td&gt;
&lt;td&gt;数字范围间隔&lt;/td&gt;
&lt;td&gt;EKBE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;历史采购订单&lt;/td&gt;
&lt;td&gt;EKAB&lt;/td&gt;
&lt;td&gt;发布文档&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ISEG&lt;/td&gt;
&lt;td&gt;实物盘存凭证项目&lt;/td&gt;
&lt;td&gt;A501&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;冻结购买价格。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IKPF&lt;/td&gt;
&lt;td&gt;实物盘存凭证抬头&lt;/td&gt;
&lt;td&gt;USR21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SAP所有用户信息&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;mm配置&#34;&gt;MM配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 创建工厂、公司代码                    22. 批量导入物料主数据（BAPI）
2. 创建库存地点                         23. 创建供应商
3. 创建采购组织                         24. 创建采购信息记录（Info Recode）
4. 创建采购组                           25. 维护物料管理的自动记账
5. MRP Controller                      26. 将存货科目设置为只能自动记账
6. 分配工厂到公司                       27. 设置采购价格差异容差限制
7. 分配采购组织到公司                    28. 设置收货的容差限制
8. 分配工厂到采购组织                    29. 设置发票冻结的容差限制
9. 定义物料                             30. 激活项目金额检查
10. 定义计划边界码                      31. 运行MRP
11. 物料管理设置-库存预留                32. 创建采购申请
12. 自动创建库存地点                    33. 创建采购订单
13. 税务代码缺省值                      34. 采购订单收货
14. 物料管理的初始期间                  35. 采购发票输入
15. 物料需求计划相关的参数维护           36. 发票冻结
16. 激活物料需求计划                    37. 在MIR4中显示发票和会计凭证
17. 检查MRP相关参数维护(主要看01范围)
18. 定义物料类型的属性
19. 定义评估控制方式
20. 定义评估分组
21. 定义评估类
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fi配置&#34;&gt;FI配置&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 创建会计科目表   (A999账目表)
2. 定义会计年度变式 (正常记账期间12、特殊期间4)
3. 创建信贷控制范围
4. 依据以上信息维护公司参数
5. 定义科目账户组合编号范围、
6. 定义公司字段状态变式
7. 把字段状态分配到公司代码
8. 定义预留收益科目
9. FS00科目批量导入 （LSMW）
10. 赋值凭证号码范围到公司代码
11. 定义记账期间变式
12. 把记账期间变式分配给公司代码
13. 拷贝设置记账期间
14. 为科目过账定义容差组
15. 输入总账凭证，显示科目余额
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SAP memory使用</title>
      <link>https://coldinfire.github.io/2019/ABAPMemory/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAPMemory/</guid>
      <description>

&lt;h3 id=&#34;sap-memory和abap-memory&#34;&gt;SAP memory和ABAP memory&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用的语句不同&lt;/p&gt;

&lt;p&gt;SAP memory使用SET/GET parameters；&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SPA：SET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD p_matnr.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GPA：GET PARAMETER ID &amp;lsquo;MAT&amp;rsquo; FIELD p_matnr.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ABAP Memory使用EXPORT 和IMPORT :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;EXPORT p_matnr = p_matnr TO MEMORY ID &amp;lsquo;ZTESTMAT&amp;rsquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IMPORT p_matnr = p_matnr FROM MEMORY ID &amp;lsquo;ZTESTMAT&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FREE MEMORY ID &amp;lsquo;ZTESTMAT&amp;rsquo;.         清空指定的ABAPmemory&lt;/p&gt;

&lt;p&gt;FREE MEMORY.                                    清空externalsession内的所有ABAPmemory&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;共享范围不同&lt;/p&gt;

&lt;p&gt;SAP memory用于所有external session间.&lt;/p&gt;

&lt;p&gt;ABAP memory用于同一个external session的internal session间。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;作用范围不同（就是生存期）&lt;/p&gt;

&lt;p&gt;SAP memory在登陆到退出这期间一直有效。&lt;/p&gt;

&lt;p&gt;ABAP memory只在同一个session(window) 内有效。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dialog获取SAPMemory方式&lt;/p&gt;

&lt;p&gt;在dialog 屏幕上建一个input field, 然后Parameter ID属性与&amp;rsquo;SAP_MMR&amp;rsquo;绑定,并打上2个勾。&lt;/p&gt;

&lt;p&gt;Set Parameter: 允许将屏幕值返回给SAP Memory (类似于执行SET PARAMETER ID语句)&lt;/p&gt;

&lt;p&gt;Get Parameter: 允许读取SAP Memory的值并默认显示(类似于执行GET PARAMETER ID语句).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>ABAP DOI使用</title>
      <link>https://coldinfire.github.io/2019/ABAPDOI/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAPDOI/</guid>
      <description>

&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;DOI（Desktop office Integration）采用OO的思想实现与Office的结合使用。&lt;/p&gt;

&lt;p&gt;可以先上传模板到服务器(OAOR)，然后对模板进行填充。也可以通过代码创建ExceL文档。&lt;/p&gt;

&lt;p&gt;OAOR：class name, class type，object key。&lt;/p&gt;

&lt;p&gt;会使用到的对象：TYPE-POOLS:vrm, sbdst, soi.&lt;/p&gt;

&lt;p&gt;重要对象：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;container: 存放excel电子表格(spreadsheet)的容器。spreadsheet需要一个容器来存放。&lt;/li&gt;
&lt;li&gt;container control: 容器中用于创建和管理其他Office集成所需要的对象。container control是一个接口，类型是i_oi_container_control。&lt;/li&gt;
&lt;li&gt;document proxy: 每一个document proxy的实例代表用office application打开的档,excel，    word。如果想打开多个文档，需要定义多个实例，类型为i_oi_document_proxy。&lt;/li&gt;
&lt;li&gt;spreadsheet: spreadsheet接口，代表最终要操作的excel文档。类型是   i_oi_spreadsheet&lt;/li&gt;
&lt;li&gt;errors：异常的处理，保存操作时的异常，类型是 i_oi_error。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果读取服务器上的文档模板，需要cl_bds_document_set类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;business document set：business document set用于管理后续要操作的文档，可以包含一个或多个文档。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;操作步骤(OAOR上传文档后)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取container&lt;/li&gt;
&lt;li&gt;创建container control对象实例并初始化&lt;/li&gt;
&lt;li&gt;创建document proxy对象的实例&lt;/li&gt;
&lt;li&gt;打开一个服务器上的模板文档或新建一个excel文档&lt;/li&gt;
&lt;li&gt;操作excel文档，设置excel的属性&lt;/li&gt;
&lt;li&gt;退出时关闭excel文档，释放资源&lt;/li&gt;
&lt;li&gt;异常管理&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;定义和使用&#34;&gt;定义和使用&lt;/h2&gt;

&lt;h3 id=&#34;字段定义&#34;&gt;字段定义：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;* SAP Desktop Office Integration Interfaces
DATA: cl_container type ref to cl_gui_container,
      cl_control type ref to i_oi_container_control,
      cl_document type ref to i_oi_document_proxy,
      cl_spreadsheet type ref to i_oi_spreadsheet，
      cl_error    TYPE REF TO i_oi_error，
      cl_errors  TYPE REF TO i_oi_error OCCURS 0 WITH HEADER LINE.
* Spreadsheet interface structures for Excel data input
DATA: wa_cellitem    TYPE soi_generic_item,
      wa_rangeitem   TYPE soi_range_item,
      gt_ranges      TYPE soi_range_list,
      gt_excel_input TYPE soi_generic_table,
      wa_excel_input TYPE soi_generic_item,
      g_initialized  type c,
      g_retcode      TYPE soi_ret_string,
      gt_excel_format TYPE soi_format_table,
      wa_format      LIKE LINE OF gt_excel_format.
DATA: gt_itab     TYPE TABLE OF alsmex_tabline WITH HEADER LINE,
      gt_imt_tab  TYPE TABLE OF typ_area_excel,
      wa_imt_tab  LIKE LINE OF gt_imt_tab,
      g_macro     TYPE text100,
      g_sheet(10) TYPE c,
      g_cell_fit  TYPE c.
DATA: cl_bds_instance   TYPE REF TO cl_bds_document_set,
      gt_doc_signature  TYPE sbdst_signature,
      wa_doc_signature  LIKE LINE OF gt_doc_signature,
      gt_doc_components TYPE sbdst_components,
      gt_doc_uris       TYPE sbdst_uri,
      wa_doc_uris       LIKE LINE OF gt_doc_uris.
DATA: g_app      TYPE vrm_id,
      gt_applist TYPE vrm_values,
      g_excel    TYPE text80 VALUE &#39;Excel.Sheet&#39;,       &amp;quot;EXCEL的表单
      g_docu_type TYPE text80,
      g_url(256)  TYPE c,
      g_has_activex TYPE c,
      g_col TYPE i,         &amp;quot;字段所在的列数
      g_row TYPE i.         &amp;quot;字段所在的行数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下三个值为Tcode:OAOR里面新建模板文件的参数&lt;/p&gt;

&lt;p&gt;DATA: g_classname  TYPE sbdst_classname VALUE &amp;lsquo;HRFPM_EXCEL_STANDARD&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;g_classtype  TYPE sbdst_classtype VALUE &amp;lsquo;OT&amp;rsquo;,&lt;/p&gt;

&lt;p&gt;g_object_key TYPE sbdst_object_key VALUE &amp;lsquo;ZTEST&amp;rsquo;.&lt;/p&gt;

&lt;h3 id=&#34;开始创建doi&#34;&gt;开始创建DOI:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*===== Get_container (动态Container)
CREATE OBJECT cl_splitter
    EXPORTING
        parent  = cl_gui_container=&amp;gt;screen0
        rows    = 1
        columns = 1.
CALL METHOD cl_splitter-&amp;gt;set_border
    EXPORTING
        border = cl_gui_cfw=&amp;gt;false.
        cl_container  = cl_splitter-&amp;gt;get_container( row = 1 column = 1 ).
*===== Get the SAP DOI  i_oi_container_control interface
CALL METHOD c_oi_container_control_creator=&amp;gt;get_container_control
    IMPORTING
      control = cl_control
      error   = cl_error.
* check no errors occured
CALL METHOD cl_error-&amp;gt;raise_message
    EXPORTING
      type = &#39;E&#39;.
*===== Initialize the SAP DOI Container, tell it to run in the container
call method gr_control-&amp;gt;init_control
    exporting
      inplace_enabled          = &#39;X &#39;
      inplace_scroll_documents = &#39;X&#39;
      register_on_close_event  = &#39;X&#39;
      register_on_custom_event = &#39;X&#39;
      r3_application_name      = &#39;DOI Test&#39;
      parent                  = cl_container
      no_flush      =   &#39;X&#39;
    IMPORTING
      error                    = cl_errors.
* save error object in collection
  APPEND cl_errors.
*===== Ask the SAP DOI container for a i_oi_document_proxy for Excel
CALL METHOD cl_control-&amp;gt;get_document_proxy
    EXPORTING
      document_type      = &#39;Excel.Sheet&#39;
      no_flush           = &#39;X&#39;
*    REGISTER_CONTAINER = &#39;X&#39;
    IMPORTING
      document_proxy     = cl_docu_proxy
      error              = cl_errors.
  APPEND cl_errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;对excel进行操作&#34;&gt;对Excel进行操作：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt; wa_doc_signature-prop_name = &#39;DESCRIPTION&#39;.
 wa_doc_signature-prop_value = &#39;PP_REPORT&#39;.
APPEND wa_doc_signature TO gt_doc_signature.
&amp;quot;===== Create_excel_document
call method gr_control-&amp;gt;get_document_proxy
  exporting
    document_type  = &#39;Excel.Sheet&#39;
    no_flush      = &#39;X&#39;
  importing
    document_proxy = gr_document.
call method gr_document-&amp;gt;create_document
  exporting
    document_title = &#39;DOI test by Stone Wang &#39;
    no_flush      = &#39;X &#39;
    open_inplace  = &#39;X&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;操作模板文档&#34;&gt;操作模板文档：&lt;/h3&gt;

&lt;p&gt;操作excel模板文档，使用cl_bds_document_set类，这个类的get_with_url方法获取文档的url&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*Business document system
*=====get_template_url
create object gr_bds_documents.
  call method cl_bds_document_set=&amp;gt;get_info
    exporting
      classname  = g_classname
      classtype  = g_classtype
      object_key = g_objectkey
    changing
      components = g_doc_components
      signature  = g_doc_signature.
call method cl_bds_document_set=&amp;gt;get_with_url
  exporting
    classname  = g_classname
    classtype  = g_classtype
    object_key = g_objectkey
  changing
    uris      = gt_bds_uris
    signature  = g_doc_signature.
 free gr_bds_documents.
 read table gt_bds_uris into gs_bds_url index 1.
 g_url = gs_bds_url-uri.
   &amp;lt;cl_bds_document_set&amp;gt; 的静态方法get_with_url获取excel template的url。数据存放在内表中，
读取后放在global变量g_template_url里面。

&amp;quot;Open the excel
call method gr_control-&amp;gt;get_document_proxy
   exporting
     document_type      = &#39;Excel.Sheet&#39;
     no_flush          = &#39;X&#39;
     register_container = &#39;X&#39;
   importing
     document_proxy    = gr_document.
call method gr_document-&amp;gt;open_document
   exporting
     open_inplace = &#39;X&#39;
     document_url = g_template_url.
 data: available type i.
call method gr_document-&amp;gt;has_spreadsheet_interface
   exporting
     no_flush    = &#39;X&#39;
   importing
     is_available = available.
call method gr_document-&amp;gt;get_spreadsheet_interface
   exporting
     no_flush        = &#39;X&#39;
   importing
     sheet_interface = gr_spreadsheet.
CALL method spreadsheet-&amp;gt;select_sheet
   exporting
     name    = &#39;Sheet1&#39;
     no_flush = &#39;&#39;
   importing
     error    = error
     retcode  = retcode.
CALL method spreadsheet-&amp;gt;get_active_sheet
    exporting
      no_flush  = &#39;&#39;
    importing
      sheetname = sheetname
      error    = error
      retcode  = retcode.
CALL method spreadsheet-&amp;gt;add_sheet
   exporting
     name    = &#39;年度报表&#39;
     no_flush = &#39;&#39;
   importing
     error    = error
     retcode  = retcode.
CALL method spreadsheet-&amp;gt;delete_sheet
   exporting
     name    = sheetname
     no_flush = &#39;&#39;
   importing
     error    = error
     retcode  = retcode.
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;作者：SAPmatinal&lt;/p&gt;

&lt;p&gt;来源：CSDN&lt;/p&gt;

&lt;p&gt;原文：&lt;a href=&#34;https://blog.csdn.net/SAPmatinal/article/details/52776862&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/SAPmatinal/article/details/52776862&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;数据写入excel&#34;&gt;数据写入Excel:&lt;/h3&gt;

&lt;p&gt;数据写入Excel，可以使用批量的方式或者逐个单元格写入的方式。批量写入的方式效率高，逐个单元格写入的方式比较灵活。将数据写入excel需要使用 i_oi_spreadsheet接口实例的两个方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;* insert_range_dim 方法，定义一个范围(range)，设定range的名称、位置和大小。
CALL method gr_spreadsheet-&amp;gt;insert_range_dim
 exporting
    name    = &#39;cell&#39;
    no_flush = &#39;X&#39;
    top      = 2
    left    = 1
    rows    = line_count
    columns  = 4.

* set_range_data 方法，写入数据到range，写入的时候，ranges参数设定range的名称和大小, contents参数
设定写入的内容。
CALL methodgr_spreadsheet-&amp;gt;set_ranges_data
 exporting
    ranges=gt_ranges
    contents=gt_contents
    no_flush= &#39;X&#39;.

Ex:*界定ranges范围
CALL METHOD R_HANDLE_EXCEL-&amp;gt;INSERT_RANGE_DIM
  EXPORTING
      NAME= &#39;title&#39;
      NO_FLUSH= &#39;X&#39;
      TOP= 1
      LEFT     = 1
      ROWS     = 1
      COLUMNS= LV_TOTAL_COLUMNS.
  WA_RANGES-NAME= &#39;title&#39;.
  WA_RANGES-ROWS = 1.
  WA_RANGES-COLUMNS= LV_TOTAL_COLUMNS.
  APPEND WA_RANGESTO IT_RANGES.
DATA LV_ROWTYPE I.
DATA LV_COLUMNTYPE I.
FIELD-SYMBOLS .
DATA LWA_FIELDCATTYPE SLIS_FIELDCAT_ALV.
CLEAR LV_COLUMN.
LOOP AT IT_FIELDCATINTO LWA_FIELDCAT.
  LV_COLUMN= LV_COLUMN +1.
  WA_CONTENTS-ROW= 1.
  WA_CONTENTS-COLUMN= LV_COLUMN.
  WA_CONTENTS-VALUE = LWA_FIELDCAT-SELTEXT_L.
  APPEND WA_CONTENTSTO IT_CONTENTS.
ENDLOOP.

* Set data
CALL METHOD R_HANDLE_EXCEL-&amp;gt;SET_RANGES_DATA
  EXPORTING
    RANGES   = IT_RANGE
    CONTENTS= IT_CONTENTS
    NO_FLUSH= &#39;X&#39;.
CALL METHOD R_HANDLE_EXCEL-&amp;gt;FIT_WIDEST
  EXPORTING
    NAME= SPACE
    NO_FLUSH= &#39;X&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;对象销毁&#34;&gt;对象销毁：&lt;/h3&gt;

&lt;p&gt;PAI的exit-command事件中对spreadsheet, control和container等对象的销毁。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;module exit_program input.
  save_ok = ok_code.
  clear ok_code.
  if save_ok = &#39;EXIT&#39;.
    if not gr_document is initial.
      call method gr_document-&amp;gt;close_document.
      free gr_document.
    endif.
    if not gr_control is initial.
      call method gr_control-&amp;gt;destroy_control.
      free gr_control.
    endif.
    if gr_container is not initial.
      call method gr_container-&amp;gt;free.
    endif.
    leave program.
  endif.
endmodule.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其他实现&#34;&gt;其他实现&lt;/h2&gt;

&lt;h3 id=&#34;1-如何根据屏幕大小让-excel-自适应&#34;&gt;1. 如何根据屏幕大小让 Excel 自适应&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;data: cl_container type ref to cl_gui_container,
      cl_splitter type ref to cl_gui_splitter_container,
    ......
form get_dynamic_container.
  create object gr_splitter
    exporting
      parent      = cl_gui_container=&amp;gt;screen0
      rows        = 1
      columns  = 1 .
  call method gr_splitter-&amp;gt;set_border
    exporting
      border = cl_gui_cfw=&amp;gt;false.
  gr_container = gr_splitter-&amp;gt;get_container( row = 1 column = 1 ).
endform.
container control 初始化的时候，设定 parent 为 gr_container
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-excel-单个单元格写入&#34;&gt;2. Excel 单个单元格写入&lt;/h3&gt;

&lt;p&gt;单个单元格写入的方法，同批量写入一样，使用 i_oi_spreadsheet 接口的set_range_dim 方法和 set_range_data方法。区别在于 range 只包含一行一列：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;form write_single_cell using p_row p_col p_value.
* define internal table for ranges and contents parameters
  data: lt_ranges type soi_range_list,
        ls_rangeitem type soi_range_item,
        lt_contents type soi_generic_table,
        ls_content type soi_generic_item.
* populate ranges
  clear ls_rangeitem.
  clear lt_ranges[].
  ls_rangeitem-name = &#39;cell&#39; .
  ls_rangeitem-columns = 1.
  ls_rangeitem-rows = 1.
  ls_rangeitem-code = 4.
  append ls_rangeitem to lt_ranges.
* populate contents
  clear ls_content.
  clear lt_contents[].
  ls_content-column = 1.
  ls_content-row = 1.
  ls_content-value = p_value.
  append ls_content to lt_contents.
* 每次只写一行一列
  call method gr_spreadsheet-&amp;gt;insert_range_dim
    exporting
      name    = &#39;cell&#39;
      no_flush = &#39;X&#39;
      top      = p_row
      left    = p_col
      rows    = 1
      columns  = 1.
  call method gr_spreadsheet-&amp;gt;set_ranges_data
    exporting
      ranges  = lt_ranges
      contents = lt_contents
      no_flush = &#39;X&#39;.
endform.   

循环写入：
loop at gt_spfli into gs_spfli.
   row_index = sy-tabix + 1.
   perform write_single_cell using row_index 1 gs_spfli-carrid.
   perform write_single_cell using row_index 2 gs_spfli-connid.
   perform write_single_cell using row_index 3 gs_spfli-cityfrom.
   perform write_single_cell using row_index 4 gs_spfli-cityto.
   clear gs_spfli.
endloop.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-设置-excel-属性&#34;&gt;3. 设置 Excel 属性&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;form set_excel_attributes.
* 修改WORK SHEET 的名字
  CALL METHOD cl_spreadsheet-&amp;gt;set_sheet_name
    EXPORTING
      newname = &#39;物料主数据清单&#39;
      oldname = &#39;Sheet1&#39;
    IMPORTING
      error   = cl_errors.
* set border line for range
  call method gr_spreadsheet-&amp;gt;set_frame
    exporting
      rangename = &#39;cell&#39;
      typ      = &#39;127&#39;
      color    = &#39;1&#39;
      no_flush  = &#39;X&#39;.
* auto fit
  call method gr_spreadsheet-&amp;gt;fit_widest
    exporting
      name    = space
      no_flush = &#39;X&#39;.
endform.   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-错误处理&#34;&gt;4. 错误处理&lt;/h3&gt;

&lt;p&gt;通常有两种方法来处理错误：&lt;/p&gt;

&lt;p&gt;第一种方法：使用 c_oi_errors 的静态方法 raise_message 简单地显示相关的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;CALL METHODC_OI_ERRORS=&amp;gt;RAISE_MESSAGE
    EXPORTING
       TYPE = type
 type 可以是 A, E, W, I, S 其中之一。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二种方法是区分不同的错误，给用户一个更明确的提示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;IF ret_code EQ c_oi_errors=&amp;gt;ret_ok.
  &amp;quot; Document opened successfully
ELSEIF ret_code EQ c_oi_errors=&amp;gt; ret_document_already_open.
  &amp;quot; Special error handling, e.g. dialog box.
ELSE.
  CALL METHOD c_oi_errors=&amp;gt;raise_message
     EXPORTING type = &#39;E&#39;.
ENDIF.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以把 ret_code 返回的错误码先储存在内表中，集中处理：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;DATA: errors TYPE REF TO i_oi_error OCCURS 0 WITH HEADER LINE.
* DOI processing
CALL METHOD control-&amp;gt;get_link_server
  EXPORTING server_type = server_type
    no_flush = &#39;X&#39;
  IMPORTING link_server = link_server
    retcode = retcode
    error = errors.
APPEND errors.
LOOP AT errors. 
  CALL METHOD errors-&amp;gt;raise_message
    EXPORTING
      type = &#39;E&#39;
    EXCEPTIONS 
      message_raised = 1
      flush_failed = 2.
ENDLOOP.
FREE errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原文：&lt;a href=&#34;https://blog.csdn.net/stone0823/article/details/53819960&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://blog.csdn.net/stone0823/article/details/53819960&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Python基础 </title>
      <link>https://coldinfire.github.io/2019/Python1/</link>
      <pubDate>Wed, 16 Jan 2019 17:20:58 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/2019/Python1/</guid>
      <description>

&lt;h1 id=&#34;变量定义和数据类型&#34;&gt;变量定义和数据类型&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;变量定义&#34;&gt;变量定义&lt;/h2&gt;

&lt;p&gt;Python的变量命名规则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;硬性规则：

&lt;ul&gt;
&lt;li&gt;变量由字母、数字和下划线构成，不能以数字开头&lt;/li&gt;
&lt;li&gt;大小写敏感&lt;/li&gt;
&lt;li&gt;不能跟python的关键字和系统保留字冲突&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PEP8要求：

&lt;ul&gt;
&lt;li&gt;用小写字母拼写，多个单词用下划线连接&lt;/li&gt;
&lt;li&gt;受保护的实例属性用单个下划线开头&lt;/li&gt;
&lt;li&gt;私有实例属性用两个下划线开头&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python关键字列表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;False&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;finally&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;is&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;lambda&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;try&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;True&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;def&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;from&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;nonlocal&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;while&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;del&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;global&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;with&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;as&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;if/else/elif&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;yield&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;assert&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;import&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;break&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;pass&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;except&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;raise&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;_*  __&lt;/strong&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*****&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;

&lt;p&gt;基本数据类型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;整型：对整数的处理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;浮点型：对小数的处理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字符串型：单引号和双引号引起来的任意文本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;布尔型：True和False两种值，也可通过计算得出&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;复数型：数学表示法&lt;code&gt;7i+8j&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;int()&lt;/code&gt;：将一个数值或字符串转换成整数，可以指定进制。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;float()&lt;/code&gt;：将一个字符串转换成浮点数。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;str()&lt;/code&gt;：将指定的对象转换成字符串形式，可以指定编码。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;chr()&lt;/code&gt;：将整数转换成该编码对应的字符串（一个字符）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ord()&lt;/code&gt;：将字符串（一个字符）转换成对应的编码（整数）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;复杂数据类型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;列表：[ ]，可以存储任意类型，任意数量的变量&lt;/li&gt;
&lt;li&gt;集合：{ }，可以存储任意类型变量，定以后不能更改其元素&lt;/li&gt;
&lt;li&gt;字典：{}，以键值对形式存储数据元素&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;运算操作符&#34;&gt;运算操作符&lt;/h1&gt;

&lt;hr /&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;和&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;除&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;左移&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;按位与&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;&amp;lt;=&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;strong&gt;&amp;hellip;&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;is/is not&lt;/th&gt;
&lt;th&gt;身份运算符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;差&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;//&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;模&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;右移&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;|&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;按位或&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;gt;=&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;hellip;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;in/not in&lt;/td&gt;
&lt;td&gt;成员运算符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;*****&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;积&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;%&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;整除&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;小于&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;按位异或&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;==&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;hellip;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;not/and/or&lt;/td&gt;
&lt;td&gt;逻辑运算符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;******&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;幂运算&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;大于&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;~&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;按位取反&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;!=&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&amp;hellip;&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;在实际开发中，运算会有不同的优先级，可以用括号保证运算的执行顺序。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;delimiters&#34;&gt;Delimiters&lt;/h1&gt;

&lt;hr /&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;(  )&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;,&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;:&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;- &amp;gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;*=&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;%=&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;|=&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&amp;lt;&amp;lt;=&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[  ]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;+=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;@=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;^=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;**=&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;{   }&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;@&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;//=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;amp;=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;分支结构&#34;&gt;分支结构&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;​   在Python中，构造分支结构使用if、else和elif关键字。与其他语言不同Python没有使用花括号构建代码块，而是使用其独特的缩进方式来设置代码的层次结构。连续的代码保持相同的缩进那么就属于同一个代码块。&lt;/p&gt;

&lt;p&gt;​   分支结构是可以嵌套使用的。&lt;/p&gt;

&lt;h1 id=&#34;list&#34;&gt;List&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;list.append(x)
list.extend(iterable)
list.insert(i,x)
list.remove(x)
list.pop([i])
from collections import deque  :  deque([])   deque.popleft()
list.clear()   =  del list
list.index(x[,start[,end]])
list.count(x)
list.sort(key = None,reverse=False)
list.reverse()
list.copy() = a[:]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tuples-sequences&#34;&gt;Tuples &amp;amp; Sequences&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. enumerate(): 
   for i, v in enumerate([&#39;tic&#39;, &#39;tac&#39;, &#39;toe&#39;]):
    ...     print(i, v)
    ...
    0 tic
    1 tac
    2 toe
2. zip()  reversed()  sorted()
3. 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;json&#34;&gt;JSON&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;python 与 JSON对照：
dict              {}
list              []
str               &#39;string&#39;
int/float         1234.56
True/False        true/false
None              null
&amp;gt;import json
&amp;gt;json.dumps([1, &#39;simple&#39;, &#39;list&#39;])
&amp;gt;&#39;[1, &amp;quot;simple&amp;quot;, &amp;quot;list&amp;quot;]&#39;

pickle : Pickle Module
        pickle.dump().
        pickle.load()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;函数-fun&#34;&gt;函数(FUN)&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/python/pythonFun.png&#34; alt=&#34;Python内置函数&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;位置参数：
         根据参数位置匹配
默认参数：def fun(arg1,arg2,arg = &#39;xxx&#39;)
         1.定义默认参数时，，默认参数必须指向不变对象
         2.当函数有多个参数时，将变化大的参数放前面，变化小的放后面。变化小的可以作为默认参数。
         3. 默认按参数位置匹配，可以通过名字进行相应的默认字段赋值
可变参数：def  fun（arg1,arg2,*numbers）
         允许传入多个参数，在函数调用时自动组装成一个tuple
         当参数为list或则tuple时，可以使用*list,*tuple
关键字参数：def fun(arg1,arg2,**kw)
         允许传入多个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。
         传入dict时，只是将所有的参数传入函数，对参数的改变不会影响到函数外的dict
命名关键字参数：def fun (arg1,arg2,*,arg3,arg4)
         对于关键字参数，需要在函数内部进行检查,使用命名关键字必须传入参数名
参数组合：
        参数定义的顺序（必选参数，默认参数，可变参数，命名关键字，关键字参数）
对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;递归函数&#34;&gt;递归函数&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;注意栈溢出问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​   解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;尾递归是指&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​   在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。&lt;/p&gt;

&lt;h1 id=&#34;迭代器-iterable&#34;&gt;迭代器（Iterable）&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 原理：
    For调用了var = iter(str)，next(var),当next()没有元素时，raise a StopIteration
2. 集合数据类型：list、tuple、dict、set、str等
generator:sum(i*i for i in range(10))
包括生成器和带yield的generator function
        def reverse(data):
            for index in range(len(data)-1, -1, -1):
                yield data[index]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;模块-mod&#34;&gt;模块(Mod)&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;导入整个模块：import modname.   from modname import *.
导入模块部分：from modname import name1[, name2[, ... nameN]].
OS Interface:
    os:getcwd()  chdir()  system() open()
    shutil:copyfile(&#39;source&#39;,&#39;aim&#39;)     move(&#39;source&#39;,&#39;aim&#39;)
File Wildcards: 
    glob:glob.glog(&#39;*.py&#39;)
Output Formatting:
    reprlib: reprlib.repr(set(&#39;adfasfsadfsfsfsfs&#39;))
    pprint: pprint.pprint((source,width = vaule))
    textwrap:格式化输出段落适应屏幕宽度  textwrap.fill(source,width=value)
    locale:culture specific data formats    
            x = 1234567.8
            locale.format_string(&amp;quot;%s%.*f&amp;quot;, (conv[&#39;currency_symbol&#39;],conv[&#39;frac_digits&#39;], x), grouping=True)
            &#39;$1,234,567.80&#39;
Command Line Arg:   
    sys: sys. args  sys.stdin sys.stdout, sys.stderr.write(&#39;Error msg&#39;) , sys.exit()
    getopt:
    argparse:
String Pattern Matching:
    re:re.fundall(), re.sub  etc.
Templating:
    string(Template):t = Template(&#39;${village}folk send $$10 to $cause.&#39;)
                         t.substitute(village=&#39;Nottingham&#39;, cause=&#39;the ditch fund&#39;)
                        &amp;gt;&amp;gt;&amp;gt;&#39;Nottinghamfolk send $10 to the ditch fund.&#39;
Mathematics:
    math:math.cos(),math.log() etc.
    random:random.choice([]),random.sample(range(100),10) etc,
    statistics:(mean,median,variance)etc.
Internet Access:
    urllim.request(retrieving data from URLs):
    smtplib(sending mail): server = smtplib.SMTP(&#39;xxx&#39;)   server.sendmail(&#39;from_email&#39;,&#39;to_email&#39;)  server.quit()
Dates and Times:
    datetime(date) :  date.today()  
Data Compression: (zlib,gzip,bz2,lzma,zipfile,tarfile)
    zlib:zlib.compress(&#39;source&#39;)   zlib.decompress(&#39;zlib_source&#39;)
Quality Control:
    doctest: doctest.testmod()
    unittest: unittest.TestCase   assertRaises():   unittest.amin()
Multi-threading:;
    threading: threading.Thread
Logging: 
    logging: sys.stderr(file)   logging.debug()  logging.info()  logging.warning()  logging.error() logging.critical()
Weak References:
    wearkref: 
Tools For Lists:
    array: a = array(&#39;H&#39;,[1213,1414,4124])   sum(a)-只计算list中的内容，对a的操作只对list有效
    collections(deque):
    bisect:manipulation sorder lists  bisect.insort(aim,source)
    heapq:use for repeatedly access the smallest element do not run a full list sort(堆排序)
            heapify(list)   heappush(list,value)   [headppop(list) for i in range(x)]   
Decimal Floating Point Ath:(精准计算)
    decimal:  
        help for(1) financial applications and other uses which require exact decimal representation,
                (2) control over precision,
                (3) control over rounding to meet legal or regulatory requirements,
                (4) tracking of significant decimal places, or
                (5) applications where the user expects the results to match calculations done by hand
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;包管理-pip&#34;&gt;包管理(pip)&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;Virtual environments:
1. Create
    On Windows, invoke the venv command as follows:
        python -m venv c:\path\to\myenv
        venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
                  [--upgrade] [--without-pip]
                  ENV_DIR [ENV_DIR ...]
2. Activate
    安装名\Scripts\activate.bat
3. Managing Packages  pip(On Virtual)
    https://pypi.org/
    pip search xxxx.(查找)
    pip install xxxx.(安装)
    pip install xxxx=version.(安装指定版本)
    pip install --upgrade xxxx.(更新到最新版本)
    pip show xxxxx.(显示包有关信息)
    pip list:(将显示虚拟环境中安装的所有软件包)
    pip uninstall xxx,xxxx,xxxx.(卸载)
    pip freeze &amp;gt; requirements.txt.(以指定文件格式显示已安装软件包)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;异常-error&#34;&gt;异常(Error)&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fIWzpEQ.png&#34; alt=&#34;异常1&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/4B9otUe.png&#34; alt=&#34;异常2&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/xCmfhsi.png&#34; alt=&#34;异常3&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 捕捉异常：
    try:
    &amp;lt;语句&amp;gt;        #运行别的代码
    except &amp;lt;名字&amp;gt;：
    &amp;lt;语句&amp;gt;        #如果在try部份引发了&#39;name&#39;异常
    except &amp;lt;name1,name2&amp;gt;，&amp;lt;数据&amp;gt;:
    &amp;lt;语句&amp;gt;        #如果引发了&#39;name&#39;异常，获得附加的数据
    else:
    &amp;lt;语句&amp;gt;        #如果没有异常发生
2. 最终处理
    try:
    
    finaly:

    raise:
3. 自定义异常
    class Error(Exception):
        &amp;quot;&amp;quot;&amp;quot;Base class for exceptions in this module.&amp;quot;&amp;quot;&amp;quot;
        pass
    
    class InputError(Error):
        &amp;quot;&amp;quot;&amp;quot;Exception raised for errors in the input.
    
        Attributes:
            expression -- input expression in which the error occurred
            message -- explanation of the error
        &amp;quot;&amp;quot;&amp;quot;
    
        def __init__(self, expression, message):
            self.expression = expression
            self.message = message
    
    class TransitionError(Error):
        &amp;quot;&amp;quot;&amp;quot;Raised when an operation attempts a state transition that&#39;s not
        allowed.
    
        Attributes:
            previous -- state at beginning of transition
            next -- attempted new state
            message -- explanation of why the specific transition is not allowed
        &amp;quot;&amp;quot;&amp;quot;
    
        def __init__(self, previous, next, message):
            self.previous = previous
            self.next = next
            self.message = message
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;面向对象-oo&#34;&gt;面向对象(OO)&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 定义
    类帮助信息：ClassName._doc_查看
    class_suite：有数据属性，类成员，方法组成
    self：代表类的实例，当前对象的地址，而非类，self.class则指向类

    class ClassName:
       &amp;quot;&amp;quot;&amp;quot;所有员工的基类&amp;quot;&amp;quot;&amp;quot;  #类文档字符串
       empCount = 0    #数据属性
       def __init__(self, name, salary):   #该方法接收参数
          self.name = name
          self.salary = salary
          Employee.empCount += 1
       
       def displayCount(self):
         print &amp;quot;Total Employee %d&amp;quot; % Employee.empCount
     
       def displayEmployee(self):
          print &amp;quot;Name : &amp;quot;, self.name,  &amp;quot;, Salary: &amp;quot;, self.salary

2. 添加，删除，修改，访问类的属性
    demo.attr = value1：添加属性
    demo.attr = value2：修改属性
    del demo.attr：删除属性
    getattr(obj,name[,default])：访问对象的属性
    hasattr(obj,name[,default])：检查是否存在一个属性
    setattr(obj,name[,default])：设置一个属性。如果不存在，会创建一个新属性
    delattr(obj,name)：删除属性
3. 内置属性类
    __dict__：类的属性（包含一个字典，由类的数据属性组成）
    __doc__：类的文档字符串
    __name__：类名
    _module_：类定义所在的模块
    _bases_：类的所有父类构成元素
    __del__：析构函数，在队象销毁时被调用
    __class__:是实例的类
4. 对象销毁（垃圾回收）
    采用引用计数来跟踪和回收垃圾
5. 封装
    如果类具有__setattr__()或 __delattr__()方法，则调用此方法而不是直接更新实例字典。
    __getattr__(self,attr1,attr2):
        setattr(self,attr1,attr2)   
    object.__getattriabute__()
    get(self,实例,所有者)    set()  delete()  set_name()
    
    slots():为此变量分配字符串，可迭代，阻止每个实例自动创建__dict__和__weakref__
    
6. 类的继承
    (1) 语法：class 派生类名(basic1,basic2)：...
          调用：__init_subclass__
    (2)Python内置的@property装饰器就是负责把一个方法变成属性调用
    (3)mixln:主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable
7. 元类
    class OrderedClass(type):
    
        @classmethod
        def __prepare__(metacls, name, bases, **kwds):
            return collections.OrderedDict()
    
        def __new__(cls, name, bases, namespace, **kwds):
            result = type.__new__(cls, name, bases, dict(namespace))
            result.members = tuple(namespace)
            return result
    
    class A(metaclass=OrderedClass):
        def one(self): pass
        def two(self): pass
        def three(self): pass
        def four(self): pass
    
    &amp;gt;&amp;gt;&amp;gt; A.members
    (&#39;__module__&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;正则表达式&#34;&gt;正则表达式&lt;/h1&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 匹配
     \d:匹配一个数字
     \w:匹配一个字母或数字
     \s:匹配一个空格（TAB）
     .:可以匹配任何字符
     *:表示任意个字符（包括0个）
     +:表示至少一个字符
     ?:表示0个或1个字符
     {n}:表示n个字符
     {n,m}:表示n-m个字符
     A|B：可以匹配A或B
     ^:表示行的开头，^\d表示必须以数字开头。
     $表示行的结束，\d$表示必须以数字结束。
     [0-9a-zA-Z\_]：可以匹配一个数字、字母或者下划线；
     [0-9a-zA-Z\_]+：可以匹配至少由一个数字、字母或者下划线组成的字符串，比如&#39;a100&#39;，&#39;0_Z&#39;，&#39;Py3000&#39;等等；
     [a-zA-Z\_][0-9a-zA-Z\_]*：可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
     [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}：更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）
2. match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
    print(re.match(r&#39;^\d{3}\-\d{3,8}$&#39;, &#39;010-12345&#39;))
    re.match(r&#39;^\d{3}\-\d{3,8}$&#39;,&#39;010 12345&#39;)
3. 切割 re.split()
    st = re.split(r&#39;[\s\,\;]+&#39;, &#39;a,;;b, c  d&#39;)
    print(st)
4. 分组 如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来 0:原始，1:第几个字串
    m = re.match(r&#39;^(\d{3})-(\d{3,8})$&#39;,&#39;010-12314&#39;)
    print(m)
    print(m.group(0))
    print(m.group(1))
    print(m.group(2))
5. 贪婪匹配:正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符.
    print(re.match(r&#39;^(\d+)(0*)$&#39;, &#39;102300&#39;).groups())
    加个?就可以让\d+采用非贪婪匹配
    print(re.match(r&#39;^(\d+?)(0*)$&#39;, &#39;102300&#39;).groups())
 6. 编译：
    编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
    用编译后的正则表达式去匹配字符串。
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title> Python学习资源</title>
      <link>https://coldinfire.github.io/2019/PythonResource/</link>
      <pubDate>Mon, 14 Jan 2019 17:20:58 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/2019/PythonResource/</guid>
      <description>

&lt;h1 id=&#34;资源&#34;&gt;资源&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/classes.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Python 官网&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;包含了 Python 框架、Python 库和软件的 awesome 列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aosabook/500lines&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Python 神书，里面有若干个项目，每个项目都是由业内大神所写，每个项目代码在 500 行左右&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pymotw.com/3/#python-3-module-of-the-week&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;介绍 Python3 中的标准库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jackfrued/Python-100-Days&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;一百天学Python,github开源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeffPaine/beautiful_idiomatic_python&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;写出简洁的、优雅的 Python 代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jobbole.github.io/awesome-python-cn/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Python 资源大全，包含：Web 框架、网络爬虫、模板引擎和数据库等，由伯乐在线更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pycoders.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;优秀的免费邮件 Python 新闻周刊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.jobbole.com/82399/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;伯乐在线翻译的 Python 学习资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fullstackpython.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Python 资源汇总，从基础入门到各种 Web 开发框架，再到高级的 ORM，Docker 等等&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python-guide.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;kennethreitz介绍 Python 的最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pymbook.readthedocs.io/en/latest/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;介绍 Python 的基本语法，特点等&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://districtdatalabs.silvrback.com/how-to-develop-quality-python-code&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;开发高质量的 Python 代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sloria/7001839&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Python 最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://python3-cookbook.readthedocs.io/zh_CN/latest/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Cook Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Yixiaohan/codeparkshare&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;推荐内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://pypi.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pyvideo.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Python Video&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title> Pycharm </title>
      <link>https://coldinfire.github.io/2019/Pycharm/</link>
      <pubDate>Thu, 03 Jan 2019 17:20:58 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/2019/Pycharm/</guid>
      <description>

&lt;h1 id=&#34;paycharm&#34;&gt;Paycharm&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;常用快捷键&#34;&gt;常用快捷键&lt;/h2&gt;

&lt;p&gt;1、Ctrl + Enter：在下方新建行但不移动光标&lt;/p&gt;

&lt;p&gt;2、Shift + Enter：在下方新建行并移到新行行首&lt;/p&gt;

&lt;p&gt;3、Ctrl + /：注释(取消注释)选择的行&lt;/p&gt;

&lt;p&gt;4、Ctrl + Alt + L：格式化代码(与QQ锁定热键冲突，关闭QQ的热键)&lt;/p&gt;

&lt;p&gt;5、Ctrl + Shift + +：展开所有的代码块&lt;/p&gt;

&lt;p&gt;6、Ctrl + Shift + -：收缩所有的代码块&lt;/p&gt;

&lt;p&gt;7、Ctrl + Alt + I：自动缩进行&lt;/p&gt;

&lt;p&gt;8、Alt + Enter：优化代码，添加包&lt;/p&gt;

&lt;p&gt;9、Ctrl + Shift + F：高级查找&lt;/p&gt;

&lt;p&gt;10、Alt + Shift + Q：更新代码到远程服务器&lt;/p&gt;

&lt;p&gt;11、Alt + Insert：创建万物&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BOM展开</title>
      <link>https://coldinfire.github.io/2018/BOM/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/BOM/</guid>
      <description>

&lt;h2 id=&#34;sap-bom读取逻辑&#34;&gt;SAP BOM读取逻辑&lt;/h2&gt;

&lt;h3 id=&#34;相关表&#34;&gt;相关表&lt;/h3&gt;

&lt;p&gt;MAST：Material BOM&lt;/p&gt;

&lt;p&gt;STKO : BOM Header&lt;/p&gt;

&lt;p&gt;STPO : BOM Positions (detail)&lt;/p&gt;

&lt;p&gt;MAPL : Assignment fo Task Lists to Materials&lt;/p&gt;

&lt;p&gt;PLKO : Routing Group Header&lt;/p&gt;

&lt;p&gt;PLSO : Routing Group Sequence&lt;/p&gt;

&lt;p&gt;PLPO : Routing Group Operations&lt;/p&gt;

&lt;p&gt;AFKO : Production Order Header&lt;/p&gt;

&lt;p&gt;AFPO : Production Order Position (details)&lt;/p&gt;

&lt;p&gt;可用函数：CSAP_MAT_BOM_READ&lt;/p&gt;

&lt;h3 id=&#34;读取逻辑&#34;&gt;读取逻辑&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1.查找Material,Plant,Material Desc          Table:MARA,MARC,MAKT
   MARA-MATNR    
   MARC-WERKS   
   MARA-MTART（Material type）
   Note: Proceeding to Step 2 or 3 or 4 depends on the input radio button for 
       Production or Engineering or ALL BOM option.
2. Search for BOM – Engineering.            Table:MAST
   Material (MAST-MATNR) = Materials selected above and
   Plant (MAST–WERKS) = As in input and
   BOM usage (MAST-STLAN) = 2 (Engineering usage).
  ● Read BOM Header and Item
      Read BOM Header from table  【STKO】。
          BOM Number (STKO-STLNR) = BOM number got in previous step and
          BOM alternative (STKO-STLAL) = BOM alternative got in previous step.
      Read BOM Item details from  【STOP】.
          BOM number (STOP-STLNR) = STKO-STNLR.
      Read BOM text from table  STZU.
3. Search BOM – Production.      Table:MAST
    Material (MAST-MATNR) = Materials selected above and
    Plant (MAST–WERKS) = As in input and
    BOM usage (MAST-STLAN) = 1 (Production usage).
  ● Read BOM Header and Item
      Read BOM Header from table    【STKO】。
          BOM Number (STKO-STLNR) = BOM number got in previous step and
          BOM alternative (STKO-STLAL) = BOM alternative got in previous step.
      Read BOM Item details from    【STOP】.
          BOM number (STOP-STLNR) = STKO-STNLR.
      Read BOM text from table STZU.
  ● Search for Resource / Production Version (Production BOM’s only)    【MKAL】
       Material number (MKAL–MATNR) = Material number from above selection (MAST) 
       And Plant (MKAL–WERKS) = Plant from above selection (MAST)
       And Alternative BOM (MKAL-STLAL) = Alternative BOM from above selection (MAST) 
       And  BOM Usage (MKAL-STLAN) = 1 (Production BOM).
Note:
  1. If no production version exists for any of the BOM’s write such records at the bottom of the
     report under the heading “No Production Version Exists (Production BOM’s)”.
  2. Sort the output on Plant, Usage and then on Material.
  3. If multiple plants then the report will be displayed Plant wise.
        • Header to be displayed for Production / Engineering BOM option.
  4. Material BOM Comparison.           【MAST 】
        Material (MAST-MATNR) = Materials selected above and
        Plant (MAST–WERKS) = As in input.
    ● Read BOM Header and Item
    Read BOM Header from table 【STKO】。
          BOM Number (STKO-STLNR) = BOM number got in previous step and
          BOM alternative (STKO-STLAL) = BOM alternative got in previous step.
    Read BOM Item details from 【STOP】.
          BOM number (STOP-STLNR) = STKO-STNLR.

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bom逆向和正向查询&#34;&gt;BOM逆向和正向查询&lt;/h2&gt;

&lt;h3 id=&#34;顺查bom-cs12&#34;&gt;顺查BOM（CS12）&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;CALL FUNCTION &#39;CS_BOM_EXPL_MAT_V2&#39;
  EXPORTING
     capid = pm_capid      “应用程序一般为PP01
     datuv = pm_datuv     “通常为系统的当前日期
     mtnrv = pm_mtnrv    “要展开BOM的物料
     mehrs = &#39;X&#39;                “ x表示多层展开﹐space表示只展开第一层
     werks = pm_werks    “通常为1000
   IMPORTING
     topmat = selpool
     dstst = dstst_flg
    TABLES
      stb = stb                “展开的BOM存放在该内表
      matcat = matcat     “下面含有元件的物料存放在该内表
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;逆查bom&#34;&gt;逆查BOM&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;DATA: IT_WULTB LIKE STPOV OCCURS 0 WITH HEADER LINE,
  IT_EQUICAT LIKE CSCEQUI OCCURS 0 WITH HEADER LINE,
  IT_KNDCAT LIKE CSCKND OCCURS 0 WITH HEADER LINE,
  IT_MATCAT LIKE CSCMAT OCCURS 0 WITH HEADER LINE,
  IT_STDCAT LIKE CSCSTD OCCURS 0 WITH HEADER LINE,
  IT_TPLCAT LIKE CSCTPL OCCURS 0 WITH HEADER LINE,
  IT_PRJCAT LIKE CSCPRJ OCCURS 0 WITH HEADER LINE.
  CLEAR:IT_WULTB,IT_WULTB[].
  CALL  FUNCTION  &#39;CS_WHERE_USED_MAT&#39;
    EXPORTING
      DATUB              = SY-DATUM
      DATUV              = SY-DATUM
      MATNR              = P_C_MATNR
*     POSTP               = &#39; &#39;
*     RETCODE_ONLY        = &#39; &#39;
*     STLAN               = &#39; &#39;
      MCLMT              = &#39;00000000&#39;
      WERKS              = S2_WERKS
*    IMPORTING
*    TOPMAT              =
    TABLES
       WULTB           = IT_WULTB
       EQUICAT         = IT_EQUICAT
       KNDCAT          = IT_KNDCAT
       MATCAT          = IT_MATCAT
       STDCAT          = IT_STDCAT
       TPLCAT          = IT_TPLCAT
    EXCEPTIONS
       CALL_INVALID        = 1
       MATERIAL_NOT_FOUND          = 2
       NO_WHERE_USED_REC_FOUND     = 3
       NO_WHERE_USED_REC_SELECTED = 4
       NO_WHERE_USED_REC_VALID     = 5
       OTHERS              = 6.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** T-Code：CS02，确保递归BOM的比例在0.95左右。即：产品A，其BOM中的A的消耗量应该小于0.95. **&lt;/p&gt;

&lt;h3 id=&#34;批量删除bom分配&#34;&gt;批量删除BOM分配&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;CALL FUNCTION &#39;CSAP_MAT_BOM_ALLOC_DELETE&#39;
  EXPORTING
    MATERIAL                 = ITAB-MATNR
    PLANT                    = ITAB-WERKS
    BOM_USAGE                = &#39;1&#39;
    ALTERNATIVE              =
    FL_NO_CHANGE_DOC         = &#39; &#39;
    FL_COMMIT_AND_WAIT       = &#39; &#39;
  IMPORTING
    FL_WARNING               = FLG_WARNING
    BOM_NO                   = BOM_NO
  TABLES
    T_PLANT                  =
  EXCEPTIONS
    ERROR                    = 1
    OTHERS                   = 2
         .
IF FLG_WARNING = &#39;X&#39;.
  WRITE :/ ITAB-WERKS,ITAB-MATNR , &#39;删除成功&#39;.
ELSE.
  WRITE :/ ITAB-WERKS,ITAB-MATNR , &#39;删除失败&#39;.
ENDIF.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ABAP 工作流</title>
      <link>https://coldinfire.github.io/2018/ABAPWorkFlow/</link>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAPWorkFlow/</guid>
      <description>

&lt;h3 id=&#34;sap工作流介绍&#34;&gt;SAP工作流介绍&lt;/h3&gt;

&lt;p&gt;工作流是一个基于某组程序规则所采用的路径。是自动运作的任务的进程中，参与的人、文件、信息或任务，以及各个要素间的传递按照规程运转。它们可能非常简单，如批准或拒绝；或则非常复杂，根据许多部门所涉及的采购订单的发布条件获得许多级别的审批。&lt;/p&gt;

&lt;p&gt;工作流特别适合于多次重复执行类型的业务工作流程。还可以用来处理业务流程中出现的错误和例外：预先在工作流中定义例外事件，当系统自动检查发现例外时，就会有触发某种反应或措施，如给相关人员发Mail等。&lt;/p&gt;

&lt;h3 id=&#34;包含组件&#34;&gt;包含组件&lt;/h3&gt;

&lt;p&gt;Organizational Plan：管理报告和消息流的层次结构&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Organizational Unit：企业中的功能单元&lt;/li&gt;
&lt;li&gt;Position：代表一个Post&lt;/li&gt;
&lt;li&gt;Job：企业中的功能分类&lt;/li&gt;
&lt;li&gt;Staff Assignments / Assignment of User-id&amp;rsquo;s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Workflow Builder(SWDD)：创建，显示和更改工作流。提供一个工作流定义视图。&lt;/p&gt;

&lt;p&gt;Workflow instance：是工作流的单次运行。&lt;/p&gt;

&lt;p&gt;Task：是由软件自动或由人员执行的过程中的步骤，Activity的描述。&lt;/p&gt;

&lt;p&gt;Work Item：是作为单个工作流步骤执行的任务实例。&lt;/p&gt;

&lt;p&gt;Workflow Container：是收集工作流中使用的所有数据的地方。&lt;/p&gt;

&lt;p&gt;Binding：是一组规则，用于定义将哪些数据传递到进程的哪个部分。&lt;/p&gt;

&lt;p&gt;Event：Triggering Events，Terminating Events。&lt;/p&gt;

&lt;p&gt;Agent resolution：流程的节点负责人。&lt;/p&gt;

&lt;h3 id=&#34;定义和创建&#34;&gt;定义和创建&lt;/h3&gt;

&lt;h4 id=&#34;定义&#34;&gt;定义:&lt;/h4&gt;

&lt;p&gt;每个workflow都能在SAP中找到业务流程；由很多步骤组成；可以由事件触发。&lt;/p&gt;

&lt;p&gt;模板：SAP提供了大量的Workflow的模板可供参考，如果不符合具体的业务流程，可以对该模板做增强。不过就像SAP标准程序一样，不能对其进行修改，可以根据需求把这个模板复制出来然后对其修改。&lt;/p&gt;

&lt;p&gt;Workflow助手：Business Workplace(TCode：SBWP)&lt;/p&gt;

&lt;p&gt;当Workflow执行到某一步需要特定的用户确认或者批准的时候，就会发出work item到该用户的workplace，以使该用户做出相应的操作。&lt;/p&gt;

&lt;h4 id=&#34;创建步骤&#34;&gt;创建步骤：&lt;/h4&gt;

&lt;p&gt;&amp;lt;一&amp;gt;创建Workflow模板（TCode：PFTC_INS）,  TCode：SWDD——创建工作流
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/SWDD.png&#34; alt=&#34;SWDD&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Information Area:信息是SAP自动生成的&lt;/li&gt;
&lt;li&gt;Steps:当前Workflow所使用的Steps的列表&lt;/li&gt;
&lt;li&gt;Step Types：Steps list （可选不同的组件）&lt;/li&gt;
&lt;li&gt;Graphical Model：进行Workflow的流程定义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;二&amp;gt;定义Condition和创建业务所需要的Steps
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/Container.png&#34; alt=&#34;Container &amp;amp; Steps&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Workflow Container:定义workflow所需要的数据元素；数据元素可定义参考类型，参数设置，初始值。&lt;/li&gt;
&lt;li&gt;Steps创建：在对应的分支线上根据业务流程创建具体的Step，每个Step都有具体的使用要求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;三&amp;gt;对Steps进行详细的内容设定（Activity —&amp;gt;Task）
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/StepDetail.png&#34; alt=&#34;Steps Details&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Task：定义系统流程执行事件。&lt;/li&gt;
&lt;li&gt;Binding：将Workflow定义数据与Task使用字段进行绑定&lt;/li&gt;
&lt;li&gt;Task Tcode : PFTC_INS / _CHG / _DIS / _COP：Create / Change / Display /Copy Tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;agents&#34;&gt;Agents&lt;/h4&gt;

&lt;p&gt;Role:&amp;ldquo;assign agents&amp;rdquo;,通过PFCG进行分配到用户&lt;br /&gt;
Rule:&amp;ldquo;define agents&amp;rdquo;,通过PFAC进行定义&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PFAC_INS / _CHG / _DIS/_COP：Create / Change / Display /Copy Rules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rule:允许我们定义和实施问题处理流程。允许我们根据定义时定义的模板在运行时指定数据。与电子邮件通知一起，工作流程规则可帮助我们自动跟踪和管理问题。如果在工作流中使用Rule来确定责任代理，则Rule解析的结果会存储在容器元素_RULE_RESULT中，可以通过绑定传输到工作流容器中。&lt;/p&gt;

&lt;p&gt;Scenario:创建一个rule找到任意user/agent的上级。&lt;/p&gt;

&lt;p&gt;Design:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1.创建一张自定义表ZUsers，存放用户和上级的关联，及用户信息，上级信息。
2.创建一个Function,返回包含user/agent对应的上级的有效信息。ZFIND_SUPERIOR
   自定义的Function应和SAP标准的Module有相同的表参数：
     ACTOR_TAB              STRUCTURE       SWHACTOR
     AC_CONTAINER        STRUCTURE      SWCONT
     lwa_hoders-otype = &#39;US&#39;.
     lwa_holders-objid = superior.
3.创建rule:ZRULE_TEST.
     Rule Definition：
        Category:选择Agent Determination:Function to be Executed
           Function Module : ZFIND_SUPERIOR.（定义的Function module）
        Container:
           定义参数，参数在Function module中使用。
4.Rule Resolution Based on Evaluation Paths
        维护Evaluation paths: OOAW
   Rule Definition：
        Category:中选择Agent Determination:Function to be Executed
        Function Module:RH_GET_STRUCTURE,激活Evaluation Path
        Evaluation Path:输入评估路径值
   注意：基于评估路径的代理确定Rule的Rule container必须仅包含要为其应用评估路径的组织管理对象。
     在运行时，系统填充使用绑定从工作流或任务容器中规则容器。
    Container:
         OType  type  OBJEC-OTYPE : Type of the Org Management Object
         ObjID  type  OBJEC-REALO : ID of the Org Management Object
         Org_Agent  type  WFSYST-AGENT : Org Management object
   注意：Container可以传输组织管理对象的元素。在运行时，必须填充容器元素OType和ObjID或容器元素Org_Agent。
        如果填充所有容器元素，仅评估在Org_Agent中传输的值。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/TaskDetails.png&#34; alt=&#34;Task Details&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object method：定义要调用的Class,Type,Method,并进行字段绑定。&lt;/li&gt;
&lt;li&gt;Object Type：需要定义Interfaces实现IF_WORKFLOW.&lt;/li&gt;
&lt;li&gt;Synchronous object method：同步对象的方法。&lt;/li&gt;
&lt;li&gt;Execution：执行方式的选择&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;激活保存，运行并查看Log
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/Execute.png&#34; alt=&#34;执行&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/Log.png&#34; alt=&#34;Log查看&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以通过Print Log（Ctrl + P）查看Workflow Classical Technical Log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/PrintLog.png&#34; alt=&#34;Print Log&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/WorkFlowLog.png&#34; alt=&#34;Workflow Log&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Various Status of Work Item.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/VariousStatus.png&#34; alt=&#34;Various Status&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;四&amp;gt;在程序中调用Workflow
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/Function.png&#34; alt=&#34;Function&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过Function(SWU_START_WORKFLOW)调用，根据传入的参数和数据调用对应的Workflow。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;五&amp;gt;通过Event触发Workflow
- SWE2:定义事件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/SWE2.png&#34; alt=&#34;SWE2&#34; /&gt;
&lt;img src=&#34;https://coldinfire.github.io/images/WorkFlow/SWDD2.png&#34; alt=&#34;SWDD&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;CALL FUNCTION &#39;SAP_WAPI_CREATE_EVENT&#39;
  EXPORTING
    object_type= &#39;ZMINORDER&#39;
    object_key= l_obj_key
    event                   = &#39;APP&#39;
    *commit_work             = &#39;X&#39;
    event_language= sy-langu
    language                = sy-langu
    user= sy-uname
  TABLES
    *INPUT_CONTAINER         =
    message_lines= l_message_lines
    *MESSAGE_STRUCT          =  .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tcode&#34;&gt;TCode&lt;/h2&gt;

&lt;h3 id=&#34;最常用事务码&#34;&gt;最常用事务码：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;SWDM：Business Workflow Explorer
SWDD：Workflow Builder
SWO1：Business Object Builder
SWETPYV：Display and maintain event type link age
SBWP：Business Workplace
SWI1：Selection report for work items
SWEL：Display Event Trace
SWE2：Create Event
PPOMW：Maintain organizational plan
PFTC_INS / _CHG / _DIS / _COP：Create / Change / Display /Copy Tasks
PFAC_INS / _CHG / _DIS/_COP：Create / Change / Display /Copy Rules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析工具事务码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;SBWP：Business Workplace ( Outbox )
SWIA：Process Work Item As Administrator
SWI6：Workflows for Object
SWI14：Workflows for Object Type
SWEL Display event trace
SWI1 Selection report for work items
SWU7 Consistency check for workflow templates
SWU9 Display workflow trace
SWUD Diagnostic tools
SWU3 Customizing
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Excle操作</title>
      <link>https://coldinfire.github.io/2018/ABAPExcel/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2018/ABAPExcel/</guid>
      <description>

&lt;h2 id=&#34;使用-bapi&#34;&gt;使用 BAPI&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 内表数据下载到文件:
  CALL FUNCTION &#39;DOWNLOAD&#39;：提示保存
  CALL FUNCTION &#39;WS_DOWNLOAD&#39;：不提示直接保存
  CALL FUNCTION &#39;DOWNLOAD_WEB_OBJECT&#39;：提示保存
2. 文件数据读取到内表
  CALL FUNCTION &#39;UPLOAD&#39;：提示读入内表
  CALL FUNCTION &#39;WS_UPLOAD&#39;：不提示直接读入内表
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;上传和下载模板&#34;&gt;上传和下载模板&lt;/h2&gt;

&lt;p&gt;上传模板：文档是通过SMW0上传的。SMW0:Binary data =&amp;gt; Package =&amp;gt; create object name and description&lt;/p&gt;

&lt;p&gt;下载模板：调用METHOD 下载通过SMWO上传的服务器模板文件到本地&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;弹出下载框函数&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;DATA: lv_filename   TYPE string,
      lv_path       TYPE string,
      lv_fullpath   TYPE string,

FORM frm_file_save_dialog  USING    pv_value
                           CHANGING pv_filename
                                    pv_path
                                    pv_fullpath.
  CALL METHOD cl_gui_frontend_services=&amp;gt;file_save_dialog
    EXPORTING
     default_file_name= pv_value
     default_extension= &#39;XLSX&#39;
  CHANGING
    filename = pv_filename
    path = pv_path
    fullpath = pv_fullpath
  EXCEPTIONS
    cntl_error   = 1
    error_no_gui = 2
    not_supported_by_gui = 3
    OTHERS   = 4.
ENDFORM.&amp;quot; FRM_FILE_SAVE_DIALOG
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;选择合适的文件夹后保存&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;FORM frm_download_files  USING pv_fullpath .
  DATA:lw_key TYPE wwwdatatab,
       lv_rc  TYPE sy-subrc.
  DATA: lv_destination LIKE  rlgrap-filename .
  DATA: lw_application TYPE ole2_object,
        lw_workbook    TYPE ole2_object,
        lw_sheet       TYPE ole2_object.
  lv_destination = pv_fullpath .

  SELECT SINGLE relid objid INTO CORRESPONDING FIELDS OF lw_key
         FROM wwwdata
         WHERE srtf2 EQ 0
           AND relid EQ &#39;MI&#39;
           AND objid EQ &#39;OBJID&#39; .&amp;quot;SY-CPROG.上传的文件对象名
  IF sy-subrc NE 0.
    MESSAGE text-m03 TYPE &#39;E&#39;. &amp;quot;Template is not exist
    RETURN.
  ENDIF.

  CALL FUNCTION &#39;DOWNLOAD_WEB_OBJECT&#39;
    EXPORTING
      key         = lw_key
      destination = lv_destination
    IMPORTING
      rc          = lv_rc.
  IF lv_rc &amp;lt;&amp;gt; 0.
    MESSAGE text-m05 TYPE &#39;E&#39;. &amp;quot;Error occurs when download
    RETURN.
  ENDIF.
ENDFORM.                    &amp;quot; FRM_DOWNLOAD_FILES
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;操作&#34;&gt;操作&lt;/h3&gt;

&lt;p&gt;CL_GUI_FRONTEND_SERVICES:该类提供了大量对操作系统文件的操作，如拷贝、列出文件名、打开文件等。&lt;/p&gt;

&lt;p&gt;打开文件：调用静态方法 FILE_OPEN_DIALOG&lt;/p&gt;

&lt;p&gt;将文本文件读取到内表：GUI_UPLOAD&lt;/p&gt;

&lt;p&gt;下载：GUI_DOWNLOAD&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打开选择上传文件对话框&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;CALL METHOD CL_GUI_FRONTEND_SERVICES=&amp;gt;FILE_OPEN_DIALOG  
  EXPORTING
    WINDOW_TITLE = &#39;选择上传文件&#39;
    FILE_FILTER = &#39;All Files (*.*)|*.*|NotePad Files(*.txt)|*.txt|Excel Files(*.xls)|*.xls|Word files(*.doc)|*.doc&#39; 
    DEFAULT_EXTENSION = &#39;*.txt&#39;
    DEFAULT_FilENAME = &#39;1.txt&#39;  &amp;quot;默认打开的文件
    &amp;quot;INITIAL_DIRECTORY = &#39;C:/&#39;  &amp;quot;初始化的目录
    &amp;quot;MULTISELECTION = &#39;X&#39; &amp;quot;是否可以同时打开多个文件
    CHANGING
    FILE_TABLE = LV_FILETABLE &amp;quot;你打开文件名的列表
    RC = LV_RC . &amp;quot;返回打开文件的数量
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;调用METHOD 读取文件内容到内表&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;CALL FUNCTION &#39;GUI_UPLOAD&#39;
   EXPORTING
    FILENAME                      = LV_FILENAME  &amp;quot;要讀取的文件
    FILETYPE                      = &#39;ASC&#39;
    HAS_FIELD_SEPARATOR           =  CL_ABAP_CHAR_UTILITIES=&amp;gt;HORIZONTAL_TAB &amp;quot;字段間按TAB鍵分隔開來
  TABLES
    DATA_TAB                      = TXT_READ_DATA  &amp;quot;寫入相應的內表中
    EXCEPTIONS
    FILE_OPEN_ERROR               = 1
    FILE_READ_ERROR               = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;获取excel数据&#34;&gt;获取Excel数据&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;1. 选择屏幕上加个文件路径选择
    SELECTION-SCREEN:BEGIN OF BLOCK BLK01 WITH FRAME TITLE TEXT-001.
    PARAMETERS:P_FILE LIKE RLGRAP-FILENAME.
    SELECTION-SCREEN END OF BLOCK BLK01.
2. 给文件搜索帮助
  AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  PERFORM FRM_GET_FILEPATH.
    FORM FRM_GET_FILEPATH .
      CALL FUNCTION &#39;WS_FILENAME_GET&#39;
        EXPORTING
          MASK             = &#39;,Excel(*.xls),*.XLS,*.XLSX,&#39;
          TITLE            = &#39;选择文件&#39;(100)
        IMPORTING
          FILENAME         = P_FILE
        EXCEPTIONS
          INV_WINSYS       = 1
          NO_BATCH         = 2
          SELECTION_CANCEL = 3
          SELECTION_ERROR  = 4
          OTHERS           = 5.
      IF SY-SUBRC &amp;lt;&amp;gt; 0.
        MESSAGE E100(ZDEV) WITH &#39;选择文件出错！&#39;(007).
      ENDIF.
    ENDFORM.
3. 获取EXCEL内容
    CALL FUNCTION &#39;ALSM_EXCEL_TO_INTERNAL_TABLE&#39;
      EXPORTING
        FILENAME    = P_FILE
        I_BEGIN_COL = &#39;1&#39;
        I_BEGIN_ROW = &#39;2&#39;
        I_END_COL   = &#39;300&#39;
        I_END_ROW   = &#39;65535&#39;
      TABLES
        INTERN      = GT_EXCEL_T.
4. 获取EXCEL行，列，值进行数据处理
    LOOP AT GT_EXCEL_T INTO GS_EXCEL_T.
    AT NEW ROW.
      CLEAR:GW_EXCEL.
    ENDAT.
    CASE GS_EXCEL_T-COL.
      WHEN 1.
        GW_EXCEL-LIFNR = GS_EXCEL_T-VALUE.
        CALL FUNCTION &#39;CONVERSION_EXIT_ALPHA_INPUT&#39;
          EXPORTING
            INPUT  = GW_EXCEL-LIFNR
          IMPORTING
            OUTPUT = GW_EXCEL-LIFNR.
      WHEN 2.
        GW_EXCEL-MATNR = GS_EXCEL_T-VALUE.
        CALL FUNCTION &#39;CONVERSION_EXIT_ALPHA_INPUT&#39;
          EXPORTING
            INPUT  = GW_EXCEL-MATNR
          IMPORTING
            OUTPUT = GW_EXCEL-MATNR.
      WHEN 3.
        GW_EXCEL-EKORG = GS_EXCEL_T-VALUE.
      WHEN 4.
        GW_EXCEL-WERKS = GS_EXCEL_T-VALUE.
      WHEN 5.
        GW_EXCEL-NETPR = GS_EXCEL_T-VALUE.
      WHEN 6.
        GW_EXCEL-KPEIN = GS_EXCEL_T-VALUE.
      WHEN 7.
        GW_EXCEL-LIFAB = GS_EXCEL_T-VALUE.
      WHEN 8.
   *    GW_EXCEL-NORBM = GS_EXCEL_T-VALUE.
        GW_EXCEL-LIFBI = GS_EXCEL_T-VALUE.
      WHEN 9.
        GW_EXCEL-MWSKZ = GS_EXCEL_T-VALUE.
      WHEN OTHERS.
    ENDCASE.

    AT END OF ROW.
      APPEND GW_EXCEL TO GT_EXCEL.
    ENDAT.
  ENDLOOP.

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;获取excel数据函数&#34;&gt;获取Excel数据函数：&lt;/h4&gt;

&lt;p&gt;“TEXT_CONVERT_XLS_TO_SAP”：这个函数直接可以把 execl 的内容原原本本的写入到内表，不用格式转化那么麻烦。如果该内表 ITAB 的数据最后要写入你的自建表里，那么还得迂回一下，因为透明表里有个 MANDT 客户端字段。所以得再建一个内表来迂回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.EXCEL 中第一行是标题，调用 FM 时，参数 I_LINE_HEADER=’X’&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;读第一条数据时，会把标题放入 “值是空的字段”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 模板中前两行是标题，调用 FM 时，参数 I_LINE_HEADER=”，然后再把前两行数据删除&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;100*N+1 行，有把标题放入 “值是空的字段” 的情况&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;* 定义一个内表来存储数据，内表的列数和要传得数据的列数要相同，其按照列来匹配传值
DATA: BEGIN OF gt_data OCCURS 0,
     col1 TYPE char10,
     col2 TYPE char10,
      END OF gt_data.

CALL FUNCTION &#39;TEXT_CONVERT_XLS_TO_SAP&#39;  
  EXPORTING  
*   I_FIELD_SEPERATOR          =  
    I_LINE_HEADER               = &#39;X&#39;  
    i_tab_raw_data             = IT_RAW  
    i_filename                 = fname1  
  tables  
    i_tab_converted_data       = gt_data  
  EXCEPTIONS  
    CONVERSION_FAILED          = 1  
    OTHERS                     = 2  
          .  
IF sy-subrc &amp;lt;&amp;gt; 0.  
  MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO  
      WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.  
ENDIF.  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实例-https-github-com-coldinfire-erp-wiki-e6-96-87-e6-a1-a3-e4-b8-8a-e4-bc-a0-e5-92-8c-e4-b8-8b-e8-bd-bd-e4-b8-89-e5-ae-9e-e4-be-8b&#34;&gt;&lt;a href=&#34;https://github.com/coldinfire/ERP/wiki/%E6%96%87%E6%A1%A3%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD#%E4%B8%89%E5%AE%9E%E4%BE%8B&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;实例&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;SELECTION-SCREEN:
  PUSHBUTTON /2(30) button1 USER-COMMAND but1.&amp;quot;30是按钮长度

SELECTION-SCREEN BEGIN OF BLOCK blk1 WITH FRAME TITLE text-001.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS p_file TYPE rlgrap-filename.
SELECTION-SCREEN POSITION 50.
SELECTION-SCREEN COMMENT (20) p_comm FOR FIELD p_file.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK blk1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  &amp;quot;发出上传文件时，弹出选择文件框，选择对应的文件
  PERFORM frm_get_filepath.

AT SELECTION-SCREEN. &amp;quot;检查界面操作并响应
  IF sscrfields EQ &#39;BUT1&#39;.&amp;quot;下载按钮时，下载文档模板
    PERFORM download_file.
  ENDIF.
  IF p_file IS NOT INITIAL.
    PERFORM frm_check_file.&amp;quot;当文档上传框有请求时，检验路径是否存在
  ENDIF.

INITIALIZATION.
  p_comm = &#39;&#39;.
  button1 = &#39;Download template file&#39;.

START-OF-SELECTION.
  PERFORM frm_inter_table.
*  PERFORM frm_check_xzael.

FORM download_file .
  DATA: lwa_wwwdata_tab LIKE wwwdatatab,
        l_filename      TYPE rlgrap-filename,
        mes             TYPE string.

  l_filename = &#39;C:/temp/BatchInput.xlsx&#39;.
  SELECT SINGLE *
    FROM wwwdata
   INNER JOIN tadir
      ON wwwdata~objid = tadir~obj_name
    INTO CORRESPONDING FIELDS OF lwa_wwwdata_tab
   WHERE wwwdata~srtf2  = 0
     AND wwwdata~relid  = &#39;MI&#39;             &amp;quot;标识二进制的对象
     AND tadir~pgmid    = &#39;R3TR&#39;
     AND tadir~object   = &#39;W3MI&#39;
     AND tadir~obj_name = &#39;ZMI05&#39;.         &amp;quot;模板名字

  IF sy-subrc = 0.
    CALL FUNCTION &#39;DOWNLOAD_WEB_OBJECT&#39;
      EXPORTING
        key         = lwa_wwwdata_tab
        destination = l_filename.
    IF sy-subrc = 0.
      CONCATENATE &#39;The File Download Directory:&#39; l_filename INTO mes.
      MESSAGE mes TYPE &#39;S&#39;.
    ENDIF.
  ENDIF.
ENDFORM.                    &amp;quot; DOWNLOAD_FILE

FORM frm_get_filepath .
  DATA lv_filepath TYPE ibipparms-path.

  CALL FUNCTION &#39;WS_FILENAME_GET&#39;
    EXPORTING
      mask             = &#39;,EXCEL FILE,*.XLS;*.XLSX;&#39;
      mode             = &#39;O&#39; &amp;quot;S为保存，O为打开
    IMPORTING
      filename         = p_file
    EXCEPTIONS
      inv_winsys       = 1
      no_batch         = 2
      selection_cancel = 3
      selection_error  = 4
      OTHERS           = 5.
ENDFORM.                    &amp;quot; FRM_GET_FILEPATH

FORM frm_check_file .
  DATA:lv_filename TYPE string,
       lv_result TYPE c.
  lv_filename = p_file.
  CALL METHOD cl_gui_frontend_services=&amp;gt;file_exist
    EXPORTING
      file                 = lv_filename
    RECEIVING
      result               = lv_result
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      wrong_parameter      = 3
      not_supported_by_gui = 4
      OTHERS               = 5.
  IF sy-subrc NE 0.
  ENDIF.
  IF lv_result = &#39;&#39;.
    MESSAGE &#39;The File Not Found In The Direct!&#39; TYPE &#39;E&#39;.
  ENDIF.
ENDFORM.                    &amp;quot; FRM_CHECK_FILE

FORM frm_inter_table.
    CALL FUNCTION &#39;ALSM_EXCEL_TO_INTERNAL_TABLE&#39;
    EXPORTING
      filename                = p_file   &amp;quot;本地文件全路径名
      i_begin_col             = &#39;1&#39;      &amp;quot;开始列
      i_begin_row             = &#39;2&#39;      &amp;quot;开始行
      i_end_col               = &#39;7&#39;      &amp;quot;结束列
      i_end_row               = &#39;6666&#39;   &amp;quot;结束行
    TABLES
      intern                  = it_file   &amp;quot;输出文件内容到it_file
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.

  IF it_file[] IS INITIAL.
    MESSAGE &#39;There is no data in the excel!&#39; TYPE &#39;E&#39;.
  ENDIF.
  SORT it_file BY row.
  LOOP AT it_file ASSIGNING &amp;lt;wa_file&amp;gt;.     &amp;quot;将上传文件的内容写到内表中
    CASE &amp;lt;wa_file&amp;gt;-col.
      WHEN &#39;0001&#39;.
        wa_iseg-gjahr  =  &amp;lt;wa_file&amp;gt;-value.
      WHEN &#39;0002&#39;.
        wa_iseg-iblnr  =  &amp;lt;wa_file&amp;gt;-value.
      WHEN &#39;0003&#39;.
        wa_iseg-zeili  =  &amp;lt;wa_file&amp;gt;-value.
      WHEN &#39;0004&#39;.
        wa_iseg-buchm  =  &amp;lt;wa_file&amp;gt;-value.
      WHEN &#39;0005&#39;.
        wa_iseg-meins  =  &amp;lt;wa_file&amp;gt;-value.
      WHEN &#39;0006&#39;.
        wa_iseg-lgort  =  &amp;lt;wa_file&amp;gt;-value.
      WHEN &#39;0007&#39;.
        wa_iseg-usnam  =  &amp;lt;wa_file&amp;gt;-value.
    ENDCASE.
    AT END OF row.
      APPEND wa_iseg TO it_iseg.
      CLEAR wa_iseg.
    ENDAT.
  ENDLOOP.
ENDFORM.                    &amp;quot; FRM_UPLOAD_FILE
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
