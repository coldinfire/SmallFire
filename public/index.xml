<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Small Fire`s Blog on Small Fire`s Blog</title>
    <link>https://coldinfire.github.io/</link>
    <description>Recent content in Small Fire`s Blog on Small Fire`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Mar 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://coldinfire.github.io/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Books</title>
      <link>https://coldinfire.github.io/books/</link>
      <pubDate>Thu, 15 Jun 2017 23:39:47 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/books/</guid>
      <description>

&lt;h3 id=&#34;开卷有益&#34;&gt;开卷有益&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;State&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img width=200/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width=500/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img width=500/&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1084336/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;小王子&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1023045/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;我们仨&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;孩子你慢些走&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1008145/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;围城&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/5346110/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;穷查理宝典&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/3533221/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;非暴力沟通&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/1056295/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;人性的弱点&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;🕐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://book.douban.com/subject/20427187/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;看见&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://coldinfire.github.io/about/</link>
      <pubDate>Thu, 15 Jun 2017 23:39:47 +0800</pubDate>
      
      <guid>https://coldinfire.github.io/about/</guid>
      <description>&lt;p&gt;免责声明：&lt;/p&gt;

&lt;p&gt;​   此博客中凡无特别说明 “Small Fire 原创” 字样的文章，均来源于互联网，本人只是作为收藏学习之用，其版权为原作者所有，可能由于本人疏忽未注明来源，如本博客转载文章涉及作品内容、版权等问题，原作者有疑义或者认为侵犯了版权的，请尽快联系本人。
Email：&lt;a href=&#34;mailto:coldinfire@163.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;coldinfire@163.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OLE下载数据到EXCEL模板及速度优化</title>
      <link>https://coldinfire.github.io/2020/ABAP_OLEtoECS/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_OLEtoECS/</guid>
      <description>

&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/9_1gyAgRwgGa09dXID-_LA&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;OLE 下载数据到EXCEL模板及速度优化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题描述:&lt;/strong&gt;当项目中对导出数据EXCEL模板有要求时，ALV标准导出功能不能满足需要开发人员自定义下载数据程序。&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上传模板 tcode：smw0&lt;/li&gt;
&lt;li&gt;获取并展示数据&lt;/li&gt;
&lt;li&gt;自定义按钮&lt;/li&gt;
&lt;li&gt;将ALV数据下载到EXCEL模板中&lt;/li&gt;
&lt;li&gt;下载速度的优化&lt;/li&gt;
&lt;li&gt;程序源码（ZOLE_EXCEL）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;下载速度优化&#34;&gt;下载速度优化：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;将内表数据先放到剪切板上，全量粘贴
DESCRIBE FIELD LW_ALV TYPE LV_TYPE COMPONENTS LV_RC.
  LOOP AT T_ALV INTO W_ALV.
    LW_ALV-LINE1 = W_ALV-MANDT.      &amp;quot;
    LW_ALV-LINE2 = W_ALV-PERSNUMBER.    &amp;quot;
    LW_ALV-LINE3 = W_ALV-NAME_LAST.    &amp;quot;
    LW_ALV-LINE4 = W_ALV-NAME_TEXT.    &amp;quot;
    LW_ALV-LINE5 = W_ALV-COMPANY.    &amp;quot;
    CLEAR LW_CHAR-LINE.
    DO LV_RC TIMES.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE LW_ALV TO &amp;lt;LV_FIELD&amp;gt;.
      CONCATENATE LW_CHAR-LINE &amp;lt;LV_FIELD&amp;gt; CL_ABAP_CHAR_UTILITIES=&amp;gt;HORIZONTAL_TAB INTO LW_CHAR-LINE.
    ENDDO.
    APPEND LW_CHAR TO LT_CHAR.
  ENDLOOP.
* 将内表数据放到excel剪切板上
  CALL METHOD CL_GUI_FRONTEND_SERVICES=&amp;gt;CLIPBOARD_EXPORT
    IMPORTING
      DATA                 = LT_CHAR    &amp;quot; Data
    CHANGING
      RC                   = LV_RC    &amp;quot; Return Code
    EXCEPTIONS
      CNTL_ERROR           = 1
      ERROR_NO_GUI         = 2
      NOT_SUPPORTED_BY_GUI = 3
*     no_authority         = 4
      OTHERS               = 5.

  GET PROPERTY OF APPLICATION &#39;ACTIVECELL&#39; = SHEET.
*
  CALL METHOD OF APPLICATION &#39;Worksheets&#39; = SHEET
    EXPORTING
    #1 = &#39;Sheet1&#39;.
**
  CALL METHOD OF SHEET &#39;Activate&#39;.
* Select the cell A1
  CALL METHOD OF APPLICATION &#39;CELLS&#39; = CELL
    EXPORTING
    #1 = 2  &amp;quot; i_row
    #2 = 1 . &amp;quot; i_col

* Paste clipboard from cell
  CALL METHOD OF CELL &#39;SELECT&#39;. &amp;quot; 选择单元格
  CALL METHOD OF SHEET &#39;Paste&#39;. &amp;quot; 粘贴
  CALL METHOD OF APPLICATION &#39;CELLS&#39; = CELL
    EXPORTING
    #1 = 2
    #2 = 1 .
  CALL METHOD OF CELL &#39;SELECT&#39;. &amp;quot; 取消全选
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;程序源码&#34;&gt;程序源码&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;&amp;quot; Declare Table*
TABLES:ADRP.
&amp;quot; Declare Internal Table TYPE*
TYPES:BEGIN OF TP_ALV ,
       MANDT      TYPE ADRP-CLIENT,      *&amp;quot;* *客户端*
       PERSNUMBER TYPE ADRP-PERSNUMBER,  *&amp;quot;* *人员编号*
       NAME_LAST  TYPE ADRP-NAME_LAST,   *&amp;quot;* *姓*
       NAME_TEXT  TYPE ADRP-NAME_TEXT,   *&amp;quot;* *全名*
       COMPANY    TYPE CHAR50,           *&amp;quot;* *公司*
      END OF TP_ALV.

&amp;quot; Declare Internal Table
DATA T_ALV TYPE STANDARD TABLE OF TP_ALV.
DATA W_ALV TYPE TP_ALV.
DATA: W_LAYOUT TYPE LVC_S_LAYO,
      W_FCAT   TYPE LVC_S_FCAT,
      T_FCAT   TYPE LVC_T_FCAT.

DATA: APPLICATION TYPE OLE2_OBJECT,       *&amp;quot;excel object*
      WORKBOOK    TYPE OLE2_OBJECT,       *&amp;quot;excel workbook objcet*
      SHEET       TYPE OLE2_OBJECT,       *&amp;quot;workbook sheet object*
      COLUMNS     TYPE OLE2_OBJECT,       *&amp;quot;sheet col objcet*
      ROWS        TYPE OLE2_OBJECT,       *&amp;quot;sheet row objcet*
      RANGE       TYPE OLE2_OBJECT,       *&amp;quot;range*
      RANGE1      TYPE OLE2_OBJECT,                         *&amp;quot;range1*
      FONT        TYPE OLE2_OBJECT,       *&amp;quot;font*
      CELL        TYPE OLE2_OBJECT,       *&amp;quot;cell*
      CELL1       TYPE OLE2_OBJECT,                         *&amp;quot;cell1*
      SHEET1      TYPE OLE2_OBJECT,       *&amp;quot;workbook sheet object*
      BORDERS     TYPE OLE2_OBJECT.       *&amp;quot;borders*
      
&amp;quot; Constants:
CONSTANTS LC_PF_STATUS TYPE SLIS_FORMNAME VALUE &#39;ALV_PF_STATUS&#39; .       &amp;quot;alv* *自定义按钮*
CONSTANTS LC_USER_COMMAND TYPE SLIS_FORMNAME VALUE &#39;ALV_USER_COMMAND&#39; . &amp;quot;alv* *自定义按钮响应事件*
CONSTANTS LC_COMPANY TYPE CHAR50 VALUE &#39;迈思诚(大连)科技有限公司&#39;.

**---------Selection-Screen----------**
SELECTION-SCREEN BEGIN OF BLOCK B01 WITH FRAME TITLE TEXT-P01.
PARAMETERS: R_1 TYPE C RADIOBUTTON GROUP R1 DEFAULT &#39;X&#39;,    
            R_2 TYPE C RADIOBUTTON GROUP R1 .  
SELECTION-SCREEN END OF BLOCK B01.
**======================================================================**
**  Report Events*
INITIALIZATION.
AT SELECTION-SCREEN OUTPUT.             
AT SELECTION-SCREEN.
START-OF-SELECTION.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE T_ALV FROM ADRP.
  LOOP AT T_ALV INTO W_ALV.
    W_ALV-MANDT = SY-MANDT.
    W_ALV-COMPANY = LC_COMPANY.
    MODIFY T_ALV FROM W_ALV.
    CLEAR W_ALV.
  ENDLOOP.
END-OF-SELECTION.

  DEFINE _APPEND_FCAT.
    CLEAR w_fcat.
    w_fcat-fieldname = &amp;amp;1.
    w_fcat-scrtext_l = &amp;amp;2.
**  ls_fcat-hotspot   = &amp;amp;3.*
    append  w_fcat to t_fcat.
  END-OF-DEFINITION.

  W_LAYOUT-ZEBRA = ABAP_TRUE.
  W_LAYOUT-CWIDTH_OPT  = ABAP_TRUE.
  _APPEND_FCAT: &#39;MANDT&#39; &#39;客户端&#39;,
&#39;PERSNUMBER&#39; &#39;人员编号&#39; ,
&#39;NAME_LAST&#39; &#39;姓&#39; ,
&#39;NAME_TEXT&#39; &#39;全名&#39; ,
&#39;COMPANY&#39; &#39;公司&#39;.

  CALL FUNCTION &#39;REUSE_ALV_GRID_DISPLAY_LVC&#39;
    EXPORTING
      I_CALLBACK_PROGRAM       = SY-REPID
      I_CALLBACK_PF_STATUS_SET = LC_PF_STATUS    &amp;quot; 自定义按钮GUI
      I_CALLBACK_USER_COMMAND  = LC_USER_COMMAND &amp;quot; 自定义按钮响应事件
      IS_LAYOUT_LVC            = W_LAYOUT
      IT_FIELDCAT_LVC          = T_FCAT
    TABLES
      T_OUTTAB                 = T_ALV.

FORM ALV_PF_STATUS USING RT_EXTAB TYPE SLIS_T_EXTAB .
  SET PF-STATUS &#39;STANDARD_001&#39;.
ENDFORM.

FORM ALV_USER_COMMAND USING R_UCOMM LIKE SY-UCOMM   *&amp;quot;user_command*
                       RS_SELFIELD  TYPE SLIS_SELFIELD.

  DATA: LR_GRID TYPE REF TO CL_GUI_ALV_GRID.
  &amp;quot;将变更的数据刷新*
  CALL FUNCTION &#39;GET_GLOBALS_FROM_SLVC_FULLSCR&#39;
    IMPORTING
      E_GRID = LR_GRID.
  CALL METHOD LR_GRID-&amp;gt;CHECK_CHANGED_DATA.
  RS_SELFIELD-REFRESH = &#39;X&#39;.
  
  CASE R_UCOMM.
    WHEN &#39;&amp;amp;DOWNLOAD&#39;.
     PERFORM FRM_DOWNLOAD_ALV. *&amp;quot;* *附加关税成本追加*
  ENDCASE.
ENDFORM.
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_DOWNLOAD_ALV*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_DOWNLOAD_ALV .
  DATA: LV_FILE    TYPE RLGRAP-FILENAME,
        LV_PATH    TYPE RLGRAP-FILENAME ,
        LV_ERROR   TYPE CHAR1,
        LV_PERCENT(5) TYPE P DECIMALS 2.
  *&amp;quot;**获取文件路径*
  PERFORM FRM_GET_FILE CHANGING LV_PATH
                                LV_ERROR.
  CHECK LV_ERROR IS INITIAL.
  PERFORM FRM_PROCESS_INDCATOR USING &#39;程序正在下载模板&#39; 0 .
  LV_FILE = LV_PATH.
  CONCATENATE LV_FILE
            &#39;员工信息表&#39;
            SY-UZEIT
            &#39;.xlsx&#39;
       INTO LV_FILE.
  *&amp;quot;**下载模板*
  PERFORM FRM_DOWN_TEMPLATE USING LV_FILE
                            CHANGING LV_ERROR.

  CHECK LV_ERROR IS INITIAL.

  *&amp;quot;**打开**excel*
  PERFORM FRM_OPEN_EXCEL_HIDE USING LV_FILE &#39;X&#39;.

  PERFORM FRM_PROCESS_INDCATOR USING &#39;程序正在把数据写入到Excel&#39; LV_PERCENT.
  IF R_1 = &#39;X&#39;.
    PERFORM FRM_WRITE_DATA.
  ELSEIF R_2 = &#39;X&#39;.
    PERFORM FRM_WRITE_DATA_YH .
  ENDIF.

  *&amp;quot;**关闭**excel*
  PERFORM FRM_CLOSE_EXCEL USING LV_FILE.
  PERFORM FRM_FREE_OBJECT.

ENDFORM.                    *&amp;quot; FRM_DOWNLOAD_ALV*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_GET_FILE*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_GET_FILE  CHANGING OV_FILE
                            OV_ERROR.
  DATA: LV_FOLDER  TYPE STRING.

  CALL METHOD CL_GUI_FRONTEND_SERVICES=&amp;gt;DIRECTORY_BROWSE
    EXPORTING
      WINDOW_TITLE         = &#39;文件路径选择&#39;
**     initial_folder       =*
    CHANGING
      SELECTED_FOLDER      = LV_FOLDER
    EXCEPTIONS
      CNTL_ERROR           = 1
      ERROR_NO_GUI         = 2
      NOT_SUPPORTED_BY_GUI = 3
      OTHERS               = 4.
  IF SY-SUBRC &amp;lt;&amp;gt; 0.
    MESSAGE ID SY-MSGID TYPE &#39;S&#39; NUMBER SY-MSGNO
               WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
               DISPLAY LIKE &#39;E&#39;.
    OV_ERROR = &#39;X&#39;.
  ELSEIF LV_FOLDER IS INITIAL.
    MESSAGE &#39;文件下载取消！&#39; TYPE &#39;S&#39;.
    OV_ERROR = &#39;X&#39;.
  ELSE.
    OV_FILE = LV_FOLDER.
  ENDIF.
ENDFORM.                    *&amp;quot; FRM_GET_FILE*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_PROCESS_INDCATOR*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_PROCESS_INDCATOR  USING TEXT PERCENTAGE.
  CALL FUNCTION &#39;SAPGUI_PROGRESS_INDICATOR&#39;
    EXPORTING
      PERCENTAGE = PERCENTAGE
      TEXT       = TEXT.
ENDFORM.                    *&amp;quot; FRM_PROCESS_INDCATOR*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_DOWN_TEMPLATE*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_DOWN_TEMPLATE  USING    I_FILE TYPE RLGRAP-FILENAME
                        CHANGING OV_ERROR.

  DATA: LO_OBJDATA     LIKE WWWDATATAB,
      LO_MIME        LIKE W3MIME,
      LS_OBJNAM      TYPE STRING,
      LI_RC          LIKE SY-SUBRC,
      LS_ERRTXT      TYPE STRING,
      LV_OBJID       TYPE WWWDATA-OBJID.

  LV_OBJID  = &#39;ZOLE_EXCEL&#39;.
  CONCATENATE LV_OBJID &#39;.XLSX&#39; INTO LS_OBJNAM.
  CONDENSE LS_OBJNAM NO-GAPS.
  SELECT SINGLE RELID OBJID FROM WWWDATA
  INTO CORRESPONDING FIELDS OF LO_OBJDATA
  WHERE SRTF2    = 0
    AND RELID    = &#39;MI&#39;
    AND OBJID    = LV_OBJID.

  IF SY-SUBRC NE 0 OR LO_OBJDATA-OBJID EQ SPACE.
    MESSAGE &#39;模板文件不存在，请用TCODE：SMW0进行加载!&#39; TYPE &#39;E&#39;.
    OV_ERROR = &#39;X&#39;.
  ENDIF.

  CALL FUNCTION &#39;DOWNLOAD_WEB_OBJECT&#39;
    EXPORTING
      KEY         = LO_OBJDATA
      DESTINATION = I_FILE
    IMPORTING
      RC          = LI_RC.

  IF LI_RC NE 0.
    MESSAGE &#39;模板文件下载失败!&#39; TYPE &#39;E&#39;.
    OV_ERROR = &#39;X&#39;.
  ENDIF.
ENDFORM.                    *&amp;quot; FRM_DOWN_TEMPLATE*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_OPEN_EXCEL_HIDE*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_OPEN_EXCEL_HIDE  USING    P_FILE
                                   P_HIDE.
  CREATE OBJECT APPLICATION &#39;EXCEL.APPLICATION&#39;.

  IF P_HIDE IS NOT INITIAL.
    SET PROPERTY OF APPLICATION &#39;VISIBLE&#39; = 0.
  ELSE.
    SET PROPERTY OF APPLICATION &#39;Visible&#39; = 1.
  ENDIF.
  CALL METHOD OF APPLICATION &#39;Workbooks&#39; = WORKBOOK.
  CALL METHOD OF WORKBOOK &#39;Open&#39; = WORKBOOK
    EXPORTING
    \#1 = P_FILE.

ENDFORM.                    *&amp;quot; FRM_OPEN_EXCEL_HIDE*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_WRITE_DATA*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_WRITE_DATA .
  DATA L_COUNT TYPE I VALUE &#39;1&#39;.
  LOOP AT T_ALV INTO W_ALV .
    L_COUNT = L_COUNT + 1.
    PERFORM FRM_FILL_CELL USING L_COUNT 1 W_ALV-MANDT SPACE.
    PERFORM FRM_FILL_CELL USING L_COUNT 2 W_ALV-PERSNUMBER SPACE.
    PERFORM FRM_FILL_CELL USING L_COUNT 3 W_ALV-NAME_LAST SPACE.
    PERFORM FRM_FILL_CELL USING L_COUNT 4 W_ALV-NAME_TEXT SPACE.
    PERFORM FRM_FILL_CELL USING L_COUNT 5 W_ALV-COMPANY SPACE.
  ENDLOOP.
  CLEAR L_COUNT.
ENDFORM.                    *&amp;quot; FRM_WRITE_DATA*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_FILL_CELL*
**&amp;amp;---------------------------------------------------------------------**
**       text*
**----------------------------------------------------------------------**
**      --&amp;gt;P_2      text*
**      --&amp;gt;P_1      text*
**      --&amp;gt;P_L_HEADDATA  text*
**      --&amp;gt;P_SPACE  text*
**----------------------------------------------------------------------**
FORM FRM_FILL_CELL  USING    I_ROW I_COL I_VALUE P_FLAG.
  CALL METHOD OF APPLICATION &#39;CELLS&#39; = CELL
    EXPORTING
    \#1 = I_ROW
    \#2 = I_COL.
  SET PROPERTY OF CELL &#39;VALUE&#39; = I_VALUE.

  IF P_FLAG = &#39;&#39;.
**    SET PROPERTY OF cell &#39;HORIZONTALALIGNMENT&#39; = 2.*
**  ELSEIF P_FLAG = cns_C.*
**    SET PROPERTY OF cell &#39;HORIZONTALALIGNMENT&#39; = 3.*
  ELSEIF P_FLAG = &#39;Z&#39;.
    SET PROPERTY OF CELL &#39;HORIZONTALALIGNMENT&#39; = -4108.
  ENDIF.

ENDFORM.                    *&amp;quot; FRM_FILL_CELL*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_CLOSE_EXCEL*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_CLOSE_EXCEL USING P_FILE.

  GET PROPERTY OF APPLICATION &#39;ActiveWorkbook&#39; = WORKBOOK.
  CALL METHOD OF WORKBOOK &#39;SAVE&#39;.
  CALL METHOD OF WORKBOOK &#39;ClOSE&#39;.
**    EXPORTING*
**    #1 = 1.*
  CALL METHOD OF WORKBOOK &#39;QUIT&#39;.

ENDFORM.                      *&amp;quot; FRM_CLOSE_EXCEL*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_FREE_OBJECT*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_FREE_OBJECT .
  FREE OBJECT FONT.
  FREE OBJECT RANGE.
  FREE OBJECT RANGE1.
  FREE OBJECT COLUMNS.
  FREE OBJECT ROWS.
  FREE OBJECT CELL.
  FREE OBJECT CELL1.
  FREE OBJECT SHEET1.
  FREE OBJECT SHEET.
  FREE OBJECT WORKBOOK.
  FREE OBJECT APPLICATION.
ENDFORM.                    *&amp;quot; FRM_FREE_OBJECT*
**&amp;amp;---------------------------------------------------------------------**
**&amp;amp;      Form  FRM_WRITE_DATA_YH*
**&amp;amp;---------------------------------------------------------------------**
FORM FRM_WRITE_DATA_YH .
  DATA: BEGIN OF LW_CHAR,
    LINE(2200) TYPE C,
  END OF LW_CHAR.

  DATA LT_CHAR LIKE TABLE OF LW_CHAR.*&amp;quot;**将数据拷贝到剪切板上*
  DATA: BEGIN OF LW_ALV ,
           LINE1(200) TYPE C,    *&amp;quot;*
           LINE2(200) TYPE C,    *&amp;quot;*
           LINE3(200) TYPE C,    *&amp;quot;*
           LINE4(200) TYPE C,    *&amp;quot;*
           LINE5(200) TYPE C,    *&amp;quot;*
        END OF LW_ALV.
  DATA LV_RC TYPE I.
  DATA LV_TYPE TYPE C.
  FIELD-SYMBOLS &amp;lt;LV_FIELD&amp;gt;.


  DESCRIBE FIELD LW_ALV TYPE LV_TYPE COMPONENTS LV_RC.
  LOOP AT T_ALV INTO W_ALV.
    LW_ALV-LINE1 = W_ALV-MANDT.      *&amp;quot;*
    LW_ALV-LINE2 = W_ALV-PERSNUMBER.    *&amp;quot;*
    LW_ALV-LINE3 = W_ALV-NAME_LAST.    *&amp;quot;*
    LW_ALV-LINE4 = W_ALV-NAME_TEXT.    *&amp;quot;*
    LW_ALV-LINE5 = W_ALV-COMPANY.    *&amp;quot;*
    CLEAR LW_CHAR-LINE.
    DO LV_RC TIMES.
      ASSIGN COMPONENT SY-INDEX OF STRUCTURE LW_ALV TO &amp;lt;LV_FIELD&amp;gt;.
      CONCATENATE LW_CHAR-LINE &amp;lt;LV_FIELD&amp;gt; CL_ABAP_CHAR_UTILITIES=&amp;gt;HORIZONTAL_TAB INTO LW_CHAR-LINE.
    ENDDO.
    APPEND LW_CHAR TO LT_CHAR.
  ENDLOOP.
*** *将内表数据放到**excel**剪切板上*
  CALL METHOD CL_GUI_FRONTEND_SERVICES=&amp;gt;CLIPBOARD_EXPORT
    IMPORTING
      DATA                 = LT_CHAR    *&amp;quot; Data*
    CHANGING
      RC                   = LV_RC    *&amp;quot; Return Code*
    EXCEPTIONS
      CNTL_ERROR           = 1
      ERROR_NO_GUI         = 2
      NOT_SUPPORTED_BY_GUI = 3
**     no_authority         = 4*
      OTHERS               = 5.


  GET PROPERTY OF APPLICATION &#39;ACTIVECELL&#39; = SHEET.
***
  CALL METHOD OF APPLICATION &#39;Worksheets&#39; = SHEET
    EXPORTING
    \#1 = &#39;Sheet1&#39;.
****
  CALL METHOD OF SHEET &#39;Activate&#39;.
** Select the cell A1*
  CALL METHOD OF APPLICATION &#39;CELLS&#39; = CELL
    EXPORTING
    \#1 = 2  *&amp;quot; i_row*
    \#2 = 1 . *&amp;quot; i_col*

** Paste clipboard from cell*
  CALL METHOD OF CELL &#39;SELECT&#39;. *&amp;quot;* *选择单元格*
  CALL METHOD OF SHEET &#39;Paste&#39;. *&amp;quot;* *粘贴*
  CALL METHOD OF APPLICATION &#39;CELLS&#39; = CELL
    EXPORTING
    \#1 = 2
    \#2 = 1 .
  CALL METHOD OF CELL &#39;SELECT&#39;. *&amp;quot;* *取消全选*
ENDFORM.                    *&amp;quot; FRM_WRITE_DATA_YH*  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ALV复制内容到剪贴板</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALV_COPYPASE/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALV_COPYPASE/</guid>
      <description>&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/h9vRrzQUir8epaypNdcC6w&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;ALV复制内容到剪贴板&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用在ALV的USER_COMMAND里面
复制ALV内容到剪贴板，已经考虑了ALV的列隐藏、筛选，负号已经提前
如果有选中的列，则复制选中的列，如果没有选中的列，复制所有可见的列&lt;/p&gt;

&lt;p&gt;如果要保存ALV的数据到Excel，可以先复制，然后到Excel粘贴。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;FORM user_command USING r_ucomm LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.
  CASE r_ucomm.
    WHEN &#39;TOCLIP&#39;.
      PERFORM itabtoclip_alv TABLES itab_dis.
  ENDCASE.
ENDFORM. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*&amp;amp;--------------------------------------
*&amp;amp;  用在ALV的USER_COMMAND里面
*&amp;amp;  复制ALV内容到剪贴板，已经考虑了ALV的列隐藏、筛选，负号已经提前
*&amp;amp;  如果有选中的列，则复制选中的列，如果没有选中的列，复制所有可见的列 
*&amp;amp;      Form  itabtoclip_alv
*---------------------*
FORM itabtoclip_alv TABLES itab.
  DATA: fldcat TYPE slis_t_fieldcat_alv WITH HEADER LINE,
        marked TYPE slis_t_fieldcat_alv WITH HEADER LINE,
        entries TYPE slis_t_fieldcat_entries WITH HEADER LINE.

  DATA: charc TYPE char256,
        ftype.

  DATA: htab TYPE c VALUE cl_abap_char_utilities=&amp;gt;horizontal_tab.
  DATA: lt_clip TYPE TABLE OF char2048 WITH HEADER LINE.
  FIELD-SYMBOLS &amp;lt;fs_fld&amp;gt;.

  CALL FUNCTION &#39;REUSE_ALV_GRID_LAYOUT_INFO_GET&#39;
    IMPORTING
      et_fieldcat         = fldcat[]
      et_marked_columns   = marked[]
      et_filtered_entries = entries[]
    EXCEPTIONS
      no_infos            = 1
      program_error       = 2
      OTHERS              = 3.
  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
         WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  IF marked[] IS INITIAL.
    marked[] = fldcat[].
    DELETE marked WHERE no_out = &#39;X&#39;.
  ENDIF.
  SORT entries.
  CHECK marked[] IS NOT INITIAL.
  CHECK itab[] IS NOT INITIAL.

  LOOP AT itab.
    READ TABLE entries WITH KEY table_line = sy-tabix BINARY SEARCH.
    CHECK sy-subrc &amp;lt;&amp;gt; 0.
    CLEAR lt_clip.
    LOOP AT marked.
      ASSIGN COMPONENT marked-filename OF STRUCTURE itab TO &amp;lt;fs_fld&amp;gt;.
      CHECK sy-subrc = 0.

      DESCRIBE FIELD &amp;lt;fs_fld&amp;gt; TYPE ftype.
      CASE  ftype.
        WHEN  &#39;I&#39; OR &#39;P&#39; OR &#39;F&#39; OR &#39;a&#39; OR &#39;e&#39;.
          charc = ABS( &amp;lt;fs_fld&amp;gt; ).
          CONDENSE  charc NO-GAPS.
          IF &amp;lt;fs_fld&amp;gt; &amp;lt; 0.
            CONCATENATE &#39;-&#39; charc INTO charc.
          ENDIF.
        WHEN OTHERS.
          WRITE &amp;lt;fs_fld&amp;gt; TO charc.
      ENDCASE.
      CONCATENATE lt_clip htab INTO lt_clip.
    ENDLOOP.
    SHIFT lt_clip.
    APPEND lt_clip.
  ENDLOOP.

  CHECK lt_clip[] IS NOT INITIAL.
  CALL FUNCTION &#39;CLPB_EXPORT&#39;
    TABLES
      data_tab   = lt_clip
    EXCEPTIONS
      clpb_error = 1
      OTHERS     = 2.
  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE s000(00) WITH &#39;已经导出到剪贴板&#39;.
  ELSE.
    MESSAGE e000(00) WITH &#39;导出到剪切板错误&#39;.
  ENDIF.
ENDFORM.                    &amp;quot;itabtoclip_alv
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ALV添加执行进度功能</title>
      <link>https://coldinfire.github.io/2020/ABAP_ALVProgress/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/ABAP_ALVProgress/</guid>
      <description>&lt;p&gt;为了提升用户体验添加进度条功能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;DATA:BEGIN OF gt_result OCCURS 0,
    sel(1),
    matnr         TYPE mara-matnr,
    zz_edi_grp    TYPE mara-zz_edi_grp,
    werks         TYPE mseg-werks,
    eknam         TYPE eknam,
    maktx         TYPE maktx,
    num           TYPE sy-tabix,
    row           TYPE sy-tabix,
    icon          TYPE icon-id,
    mess          TYPE string,
    flag(1),
  END OF gt_result.
DATA:lt_result LIKE STANDARD TABLE OF gt_result WITH HEADER LINE.  
DATA: l_perc      TYPE int4,
      l_perc_cnt  TYPE int4,
      l_perc_i    TYPE int4,
      l_perc_stxt TYPE string,
      l_sperc(3)  TYPE c.  
  READ TABLE gt_result WITH KEY sel = &#39;X&#39;.
  IF sy-subrc &amp;lt;&amp;gt; 0.
    MESSAGE &#39;Please select at leaset one line.&#39; TYPE &#39;E&#39; .
  ENDIF.
  
  lt_result[] = gt_result[].
  DELETE lt_result[] WHERE sel  &amp;lt;&amp;gt; &#39;X&#39;.

  l_perc = 0.
  l_perc_i = 0.
  l_perc_cnt = LINES( lt_result ).  &amp;quot;DESCRIBE TABLE itab LINES n

  LOOP AT  lt_result.
    l_perc_i = l_perc_i + 1.
    l_perc_stxt = &#39;&#39;.
    l_perc = l_perc_i * 100 / l_perc_cnt.
    l_sperc = l_perc.
    CONCATENATE &#39;Processing: &#39;  l_sperc &#39;% …… &#39; lt_result-matnr &#39;@ plant:&#39; lt_result-werks INTO l_perc_stxt.
    CALL FUNCTION &#39;SAPGUI_PROGRESS_INDICATOR&#39;
      EXPORTING
        percentage = l_perc
        text       = l_perc_stxt.
     ........
  ENDLOOPG.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>创建PR BAPI_REQUISITION_CREATE</title>
      <link>https://coldinfire.github.io/2020/SAP_PR/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_PR/</guid>
      <description>

&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/2nt_V5dpgxkspDQsldJJ3A&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://mp.weixin.qq.com/s/2nt_V5dpgxkspDQsldJJ3A&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;创建pr-bapi-requisition-create&#34;&gt;创建PR BAPI_REQUISITION_CREATE&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; BAPI_REQUISITION_CREATE 和 BAPI_PR_CREATE 相关问题查看NOTE
*&amp;amp; 499627 - FAQ BAPIs for purchase requisitions
*&amp;amp;---------------------------------------------------------------------*
REPORT ZLM_CREATE_PR.
DATA: LT_ITEM     LIKE TABLE OF  BAPIEBANC,
      LT_RETURN   LIKE TABLE OF  BAPIRETURN.
DATA: LS_RETURN   LIKE            BAPIRETURN.
DATA: LS_ITEM     LIKE            BAPIEBANC.
*&amp;amp;如果有增强字段
DATA: LT_EXTENSIONIN  TYPE TABLE OF  BAPIPAREX .
DATA: LW_ITM       TYPE BAPI_TE_REQUISITION_ITEM.
DATA: LV_PR_NO        TYPE BAPIEBANC-PREQ_NO.
PARAMETERS:P_MATNR1 TYPE MATNR .
PARAMETERS:P_MATNR2 TYPE MATNR.
PARAMETERS:P_EKORG TYPE EKORG .
PARAMETERS:P_WERKS TYPE WERKS_D .
START-OF-SELECTION.
  CLEAR LT_ITEM[].
  CLEAR LS_ITEM.
  LS_ITEM-DOC_TYPE          = &#39;NB&#39;.              &amp;quot;凭证类型
  LS_ITEM-PREQ_ITEM         = &#39;00010&#39;.           &amp;quot;项目
  LS_ITEM-MATERIAL          = P_MATNR1.             &amp;quot;商品代码
  LS_ITEM-QUANTITY          = 1.                 &amp;quot;数量
  LS_ITEM-DELIV_DATE        = SY-DATUM.        &amp;quot;交货日期
  LS_ITEM-PLANT             = P_WERKS.            &amp;quot;工厂
  LS_ITEM-PURCH_ORG             = P_EKORG.

  APPEND LS_ITEM TO LT_ITEM.
  IF P_MATNR2 IS NOT INITIAL.
    LS_ITEM-DOC_TYPE          = &#39;NB&#39;.              &amp;quot;凭证类型
    LS_ITEM-PREQ_ITEM         = &#39;00020&#39;.           &amp;quot;项目
    LS_ITEM-MATERIAL          = P_MATNR2.             &amp;quot;商品代码
    LS_ITEM-QUANTITY          = 1.                 &amp;quot;数量
    LS_ITEM-DELIV_DATE        = SY-DATUM.        &amp;quot;交货日期
    LS_ITEM-PLANT             = P_WERKS.            &amp;quot;工厂
    LS_ITEM-PURCH_ORG             = P_EKORG.
    APPEND LS_ITEM TO LT_ITEM.

  ENDIF.
*  extensionin-structure = &#39;BAPI_TE_REQUISITION_ITEM&#39;.
*  extensionin-valuepart1 = lw_itm.
*  APPEND EXTENSIONIN.

  CALL FUNCTION &#39;BAPI_REQUISITION_CREATE&#39;
    IMPORTING
      NUMBER            = LV_PR_NO
    TABLES
      REQUISITION_ITEMS = LT_ITEM
*     requisition_account_assignment = pr_account
*     requisition_item_text          = pr_item_id
      RETURN            = LT_RETURN.
*      extensionin                    = extensionin[].

  LOOP AT LT_RETURN INTO LS_RETURN WHERE TYPE = &#39;E&#39; .
    WRITE LS_RETURN-MESSAGE.
  ENDLOOP.
  WRITE LV_PR_NO.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>凭证冲销 BAPI_ACC_DOCUMENT_REV_POST</title>
      <link>https://coldinfire.github.io/2020/SAP_ACC_DOCUMENT_REV/</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_ACC_DOCUMENT_REV/</guid>
      <description>

&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/0RoUY8nyWfONjKTItjTouA&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://mp.weixin.qq.com/s/0RoUY8nyWfONjKTItjTouA&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;bapi-acc-document-rev-post-凭证冲销&#34;&gt;BAPI_ACC_DOCUMENT_REV_POST 凭证冲销&lt;/h4&gt;

&lt;p&gt;前台操作： FB08&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/FB08.png&#34; alt=&#34;FB08&#34; /&gt;&lt;/p&gt;

&lt;p&gt;直接点保存,然后查看表BKPF数据。&lt;/p&gt;

&lt;p&gt;自定义程序：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; Report  ZLM_DEMO_REVERSE
*&amp;amp;---------------------------------------------------------------------*
REPORT ZLM_DEMO_REVERSE.
PARAMETERS:
  P_BUKRS TYPE BKPF-BUKRS,
  P_BELNR TYPE BKPF-BELNR,
  P_GJAHR TYPE BKPF-GJAHR.

DATA:
  GS_REVERSAL TYPE BAPIACREV,
  LV_MSG      TYPE STRING,
  LV_OBJ_TYPE TYPE BAPIACHE09-OBJ_TYPE,
  LV_OBJ_KEY  TYPE BAPIACHE09-OBJ_KEY,
  LV_OBJ_SYS  TYPE BAPIACHE09-OBJ_SYS,
  LT_RETURN   TYPE TABLE OF BAPIRET2 WITH HEADER LINE.

CLEAR: GS_REVERSAL.

SELECT SINGLE AWTYP AWKEY AWKEY BUDAT
  INTO (GS_REVERSAL-OBJ_TYPE,GS_REVERSAL-OBJ_KEY,GS_REVERSAL-OBJ_KEY_R,GS_REVERSAL-PSTNG_DATE)
    FROM BKPF
      WHERE BELNR EQ P_BELNR
        AND BUKRS EQ P_BUKRS
        AND GJAHR EQ P_GJAHR.

CALL FUNCTION &#39;OWN_LOGICAL_SYSTEM_GET&#39;
  IMPORTING
    OWN_LOGICAL_SYSTEM = GS_REVERSAL-OBJ_SYS.

GS_REVERSAL-COMP_CODE  = P_BUKRS.
GS_REVERSAL-REASON_REV = &#39;03&#39;.

CALL FUNCTION &#39;BAPI_ACC_DOCUMENT_REV_POST&#39;
  EXPORTING
    REVERSAL = GS_REVERSAL
    BUS_ACT  = &#39;RFBU&#39;
  IMPORTING
    OBJ_TYPE = LV_OBJ_TYPE
    OBJ_KEY  = LV_OBJ_KEY
    OBJ_SYS  = LV_OBJ_SYS
  TABLES
    RETURN   = LT_RETURN.

LOOP AT LT_RETURN WHERE TYPE = &#39;E&#39;.
  WRITE LT_RETURN-MESSAGE.
ENDLOOP.

IF SY-SUBRC &amp;lt;&amp;gt; 0.
  COMMIT WORK AND WAIT.

  WRITE LV_OBJ_KEY.
ELSE.
  ROLLBACK WORK .
ENDIF.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>创建固定资产凭证 BAPI_ACC_DOCUMENT_POST</title>
      <link>https://coldinfire.github.io/2020/SAP_ACC_DOCUMENT_POST/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_ACC_DOCUMENT_POST/</guid>
      <description>

&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/BJBjzFUluYm5xNp1Xmph0Q&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://mp.weixin.qq.com/s/BJBjzFUluYm5xNp1Xmph0Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​                       &lt;a href=&#34;https://mp.weixin.qq.com/s/6Fa9RtRTZpBU-fXejoTCTA&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://mp.weixin.qq.com/s/6Fa9RtRTZpBU-fXejoTCTA&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;固定资产-bapi-acc-document-post-凭证创建&#34;&gt;固定资产 BAPI_ACC_DOCUMENT_POST 凭证创建&lt;/h3&gt;

&lt;p&gt;TCode : F-02 (固定资产)&lt;/p&gt;

&lt;h4 id=&#34;增强创建&#34;&gt;增强创建&lt;/h4&gt;

&lt;p&gt;和其他常规标准增强一样：创建自定义结构 ZLM_ENHANCE_ACC_DOC  (ACC_DOCUMENT)&lt;/p&gt;

&lt;p&gt;SE19创建增强实例:ACC_DOCUMENT（大部分项目应该有已经实现的增强实例，不见得需要新建）。&lt;/p&gt;

&lt;h4 id=&#34;自定义程序&#34;&gt;自定义程序：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;REPORT ZLM_DEMO_F02_ANLN1.
PARAMETERS:
P_BUKRS TYPE BUKRS DEFAULT &#39;9160&#39;.

DATA:GS_HEADER TYPE BAPIACHE09.
DATA:GV_KEY TYPE BAPIACHE09-OBJ_KEY.
DATA:GT_GL TYPE TABLE OF BAPIACGL09.
DATA:GS_GL TYPE          BAPIACGL09.

DATA:GT_CUR TYPE TABLE OF BAPIACCR09.
DATA:GS_CUR TYPE   BAPIACCR09.

DATA:GT_EXT TYPE TABLE OF BAPIPAREX.
DATA:GS_EXT TYPE  BAPIPAREX.

DATA:GT_RETURN TYPE TABLE OF BAPIRET2.
DATA:GS_RETURN TYPE        BAPIRET2.


DATA:GS_ACC_POST TYPE ZLM_ENHANCE_ACC_DOC.

GS_HEADER-OBJ_TYPE     =       &#39;BKPFF     &#39;.&amp;quot;参考交易
GS_HEADER-OBJ_KEY      =       &#39;RFBU      &#39;.&amp;quot;字段参考关键
GS_HEADER-USERNAME     =       SY-UNAME.&amp;quot;用户名
GS_HEADER-HEADER_TXT   =       &#39;TEST      &#39;.&amp;quot;凭证抬头文本
GS_HEADER-COMP_CODE    =       P_BUKRS.&amp;quot;公司代码
GS_HEADER-DOC_DATE     =       SY-DATUM.&amp;quot;凭证中的凭证日期
GS_HEADER-PSTNG_DATE   =       SY-DATUM.&amp;quot;凭证中的过帐日期
GS_HEADER-TRANS_DATE   =       SY-DATUM.&amp;quot;换算日期
GS_HEADER-FISC_YEAR    =       SY-DATUM(4).&amp;quot;会计年度
GS_HEADER-FIS_PERIOD   =       SY-DATUM+4(2)..&amp;quot;会计期间
GS_HEADER-DOC_TYPE     =       &#39;SA        &#39;.&amp;quot;凭证类型



CLEAR:GT_GL[],GT_CUR[],GT_EXT[],GT_RETURN[].

CLEAR GS_GL.
GS_GL-ITEMNO_ACC = 1.
GS_GL-GL_ACCOUNT = &#39;1601000060&#39;.
GS_GL-ITEM_TEXT = &#39;现支_固定资产测试&#39;.
GS_GL-ACCT_TYPE = &#39;A&#39;.
GS_GL-PROFIT_CTR = &#39;0000999999&#39;.
GS_GL-ALLOC_NMBR = &#39;现支_固定资产测试&#39;.
GS_GL-ASSET_NO = &#39;600000000003&#39;.
GS_GL-SUB_NUMBER = &#39;0000&#39;.
GS_GL-COMP_CODE = P_BUKRS.

APPEND GS_GL TO GT_GL.

CLEAR GS_ACC_POST.
GS_ACC_POST-POSNR = GS_GL-ITEMNO_ACC.
GS_ACC_POST-BSCHL = &#39;70&#39;.
GS_ACC_POST-ANBWA = &#39;100&#39;.
GS_EXT-STRUCTURE  = &#39;ZLM_ENHANCE_ACC_DOC&#39;.
GS_EXT-VALUEPART1 = GS_ACC_POST.
APPEND GS_EXT TO GT_EXT[].


CLEAR GS_GL.
GS_GL-ITEMNO_ACC = 2.
GS_GL-GL_ACCOUNT = &#39;1002001002&#39;.
GS_GL-ITEM_TEXT = &#39;现支_固定资产测试&#39;.
GS_GL-VALUE_DATE = SY-DATUM.
GS_GL-PROFIT_CTR = &#39;0000999999&#39;.
GS_GL-ALLOC_NMBR = &#39;现支_固定资产测试&#39;.
GS_GL-COMP_CODE = P_BUKRS.

APPEND GS_GL TO GT_GL.

CLEAR GS_ACC_POST.
GS_ACC_POST-POSNR = GS_GL-ITEMNO_ACC.
GS_ACC_POST-BSCHL = &#39;50&#39;.
GS_ACC_POST-RSTGR = &#39;101&#39;.
GS_EXT-STRUCTURE  = &#39;ZLM_ENHANCE_ACC_DOC&#39;.
GS_EXT-VALUEPART1 = GS_ACC_POST.
APPEND GS_EXT TO GT_EXT[].


CLEAR GS_CUR.
GS_CUR-ITEMNO_ACC = 1.
GS_CUR-CURRENCY = &#39;CNY&#39;.
GS_CUR-AMT_DOCCUR = 1000.
APPEND GS_CUR TO GT_CUR.
CLEAR GS_CUR.

GS_CUR-ITEMNO_ACC = 2.
GS_CUR-CURRENCY = &#39;CNY&#39;.
GS_CUR-AMT_DOCCUR = &#39;-1000&#39;.
APPEND GS_CUR TO GT_CUR.


&amp;quot;凭证数据检查-防止跳号
CALL FUNCTION &#39;BAPI_ACC_DOCUMENT_CHECK&#39;
  EXPORTING
    DOCUMENTHEADER = GS_HEADER
  TABLES
    ACCOUNTGL      = GT_GL
    CURRENCYAMOUNT = GT_CUR
    RETURN         = GT_RETURN
    EXTENSION2     = GT_EXT.


LOOP AT GT_RETURN INTO GS_RETURN WHERE TYPE = &#39;E&#39;.
  WRITE GS_RETURN-MESSAGE.
ENDLOOP.

IF SY-SUBRC &amp;lt;&amp;gt; 0..
  CALL FUNCTION &#39;BAPI_ACC_DOCUMENT_POST&#39;
    EXPORTING
      DOCUMENTHEADER = GS_HEADER
    IMPORTING
      OBJ_KEY        = GV_KEY
    TABLES
      ACCOUNTGL      = GT_GL
      CURRENCYAMOUNT = GT_CUR
      RETURN         = GT_RETURN
      EXTENSION2     = GT_EXT.

  CALL FUNCTION &#39;BAPI_TRANSACTION_COMMIT&#39;.

  WRITE GV_KEY.
ENDIF.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MIRO根据退货PO创建贷项凭证:BAPI_INCOMINGINVOICE_CREATE</title>
      <link>https://coldinfire.github.io/2020/SAP_INCOMINGINVOICE_CREATE/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_INCOMINGINVOICE_CREATE/</guid>
      <description>

&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/_6CL2fdz6WYCc4gMO8t3Zw&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://mp.weixin.qq.com/s/_6CL2fdz6WYCc4gMO8t3Zw&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;miro根据退货po创建贷项凭证-bapi-incominginvoice-create&#34;&gt;MIRO根据退货PO创建贷项凭证:BAPI_INCOMINGINVOICE_CREATE&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/MIRO_PO.png&#34; alt=&#34;MIRO&#34; /&gt;&lt;/p&gt;

&lt;p&gt;或者不勾选计算税额，手动输入税额。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; Report  ZLM_MIRO_2
*&amp;amp; SAP干货铺
*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; 根据po创建贷项凭证
*&amp;amp;---------------------------------------------------------------------*
REPORT ZLM_MIRO_2.

TABLES EKKO.
TABLES EKPO.

PARAMETERS P_EBELN   TYPE EKKO-EBELN DEFAULT &#39;4690000030&#39;.
PARAMETERS P_CA_TAX AS CHECKBOX DEFAULT &#39;X&#39;.&amp;quot;自动计算税费

DATA:LS_EKKO TYPE EKKO.
DATA:LT_EKPO TYPE TABLE OF EKPO.
DATA:LS_EKPO TYPE   EKPO.

DATA:LT_MSEG TYPE TABLE OF MSEG.
DATA:LS_MSEG TYPE   MSEG.

DATA:LS_HEADER TYPE BAPI_INCINV_CREATE_HEADER.
DATA:LT_TAXDATA  TYPE TABLE OF BAPI_INCINV_CREATE_TAX.
DATA:LT_ITEM TYPE TABLE OF BAPI_INCINV_CREATE_ITEM.
DATA:LT_RETURN TYPE TABLE OF BAPIRET2.

DATA:LS_TAXDATA  TYPE   BAPI_INCINV_CREATE_TAX.
DATA:LS_ITEM TYPE   BAPI_INCINV_CREATE_ITEM.
DATA:LS_RETURN TYPE   BAPIRET2.

DATA:LV_DOC TYPE BAPI_INCINV_FLD-INV_DOC_NO.
START-OF-SELECTION.
  SELECT SINGLE * FROM EKKO INTO LS_EKKO WHERE EBELN = P_EBELN.
  SELECT * FROM EKPO INTO TABLE LT_EKPO WHERE EBELN = P_EBELN.
  SELECT * FROM MSEG INTO TABLE LT_MSEG WHERE EBELN = P_EBELN.
  CHECK SY-SUBRC = 0.
  CLEAR LS_HEADER.
  LS_HEADER-DOC_DATE = SY-DATUM.
  LS_HEADER-PSTNG_DATE = SY-DATUM.
  LS_HEADER-BLINE_DATE = SY-DATUM.
  LS_HEADER-REF_DOC_NO = P_EBELN.
  LS_HEADER-COMP_CODE = LS_EKKO-BUKRS.
  LS_HEADER-DIFF_INV = LS_EKKO-LIFNR.
  LS_HEADER-CURRENCY = LS_EKKO-WAERS.
  
*LS_HEADER-GROSS_AMOUNT =  .
*LS_HEADER-HEADER_TXT = p_EBELN.
  CLEAR LT_ITEM[].
  CLEAR LT_TAXDATA[].
  CLEAR LT_RETURN[].
  CLEAR LS_ITEM.
  LOOP AT LT_EKPO INTO LS_EKPO.
    CLEAR LS_MSEG.
    CLEAR LS_ITEM.
    READ TABLE LT_MSEG INTO LS_MSEG WITH KEY
             EBELN  = LS_EKPO-EBELN
             EBELP  = LS_EKPO-EBELP.
    LS_ITEM-INVOICE_DOC_ITEM = SY-TABIX.
    LS_ITEM-PO_NUMBER      = LS_EKPO-EBELN.
    LS_ITEM-PO_ITEM        = LS_EKPO-EBELP.
    LS_ITEM-REF_DOC        = LS_MSEG-MBLNR.
    LS_ITEM-REF_DOC_YEAR   = LS_MSEG-MJAHR.
    LS_ITEM-REF_DOC_IT     = LS_MSEG-ZEILE.
    LS_ITEM-TAX_CODE       = LS_EKPO-MWSKZ.
    LS_ITEM-ITEM_AMOUNT    = LS_EKPO-NETWR.
    LS_ITEM-QUANTITY       = LS_EKPO-MENGE.
    LS_ITEM-PO_UNIT        = LS_EKPO-MEINS.
    LS_HEADER-GROSS_AMOUNT  = LS_HEADER-GROSS_AMOUNT  + LS_EKPO-NETWR.
    APPEND LS_ITEM TO LT_ITEM.

    CLEAR LS_TAXDATA.
    LS_TAXDATA-TAX_CODE = LS_EKPO-MWSKZ.
    LS_TAXDATA-TAX_AMOUNT = LS_EKPO-NETWR *  17 / 100.&amp;quot; demo 默认17%，
    LS_TAXDATA-ITEMNO_TAX = LS_ITEM-INVOICE_DOC_ITEM.

    LS_HEADER-GROSS_AMOUNT  = LS_HEADER-GROSS_AMOUNT  +
    LS_TAXDATA-TAX_AMOUNT .
    APPEND LS_TAXDATA TO LT_TAXDATA.
    CLEAR LS_EKPO.
  ENDLOOP.

  IF P_CA_TAX IS NOT INITIAL.
    LS_HEADER-CALC_TAX_IND = &#39;X&#39;.
    CLEAR LT_TAXDATA[].
  ENDIF.

  CALL FUNCTION &#39;BAPI_INCOMINGINVOICE_CREATE&#39;
    EXPORTING
      HEADERDATA       = LS_HEADER
    IMPORTING
      INVOICEDOCNUMBER = LV_DOC
    TABLES
      ITEMDATA         = LT_ITEM
      TAXDATA          = LT_TAXDATA
      RETURN           = LT_RETURN.

  LOOP AT LT_RETURN INTO LS_RETURN WHERE TYPE = &#39;E&#39;.
    WRITE LS_RETURN-MESSAGE.
    SKIP.
  ENDLOOP.
  WRITE LV_DOC.
  ROLLBACK WORK.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MIRO根据物料创建贷项凭证:BAPI_INCOMINGINVOICE_CREATE</title>
      <link>https://coldinfire.github.io/2020/SAP_MIRO_Matnr/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2020/SAP_MIRO_Matnr/</guid>
      <description>&lt;p&gt;引用链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/7Wvo452ZJN3MBemD-ehJlw&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://mp.weixin.qq.com/s/7Wvo452ZJN3MBemD-ehJlw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MIRO根据物料创建贷项凭证: BAPI_INCOMINGINVOICE_CREATE&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp; Report  ZLM_MIRO
*&amp;amp;
*&amp;amp;---------------------------------------------------------------------*
REPORT ZLM_MIRO.
DATA:   LS_HEADERDATA       LIKE BAPI_INCINV_CREATE_HEADER,
        LT_RETURN           LIKE TABLE OF BAPIRET2,
        LS_RETURN           LIKE BAPIRET2,
        LV_INVOICEDOCNUMBER LIKE BAPI_INCINV_FLD-INV_DOC_NO.

DATA:LT_TAXDATA             TYPE TABLE OF BAPI_INCINV_CREATE_TAX.
DATA:LS_TAXDATA             TYPE  BAPI_INCINV_CREATE_TAX.
DATA:LT_ITEMDATA TYPE TABLE OF BAPI_INCINV_CREATE_ITEM.
DATA:LS_ITEMDATA TYPE          BAPI_INCINV_CREATE_ITEM.
DATA:LT_MATERIALDATA        LIKE TABLE OF   BAPI_INCINV_CREATE_MATERIAL.
DATA:LS_MATERIALDATA        LIKE  BAPI_INCINV_CREATE_MATERIAL.
DATA:LV_ITEM                TYPE  RBLGP.
DATA:LV_GROSS               TYPE  BAPI_RMWWR.

PARAMETERS P_MATNR  TYPE  MATNR DEFAULT &#39;V700000526&#39;.
PARAMETERS P_AMOUNT TYPE  BAPIWRBTR DEFAULT &#39;9&#39;  .
PARAMETERS P_BWKEY  TYPE  BWKEY DEFAULT &#39;9110&#39; .
PARAMETERS P_UOM    TYPE  MEINS DEFAULT  &#39;EA&#39;.
PARAMETERS P_MENGE  TYPE  MENGE_D DEFAULT &#39;1&#39;.
PARAMETERS P_TAX    TYPE  MWSKZ_MRM DEFAULT &#39;J1&#39;.
PARAMETERS P_CA_TAX AS CHECKBOX DEFAULT &#39;X&#39;.&amp;quot;自动计算税费

LS_MATERIALDATA-INVOICE_DOC_ITEM = 1.
LS_MATERIALDATA-MATERIAL = P_MATNR.
LS_MATERIALDATA-DB_CR_IND = &#39;H&#39;.
LS_MATERIALDATA-ITEM_AMOUNT = P_AMOUNT.
LS_MATERIALDATA-QUANTITY = P_MENGE.
LS_MATERIALDATA-TAX_CODE = P_TAX.
LS_MATERIALDATA-BASE_UOM = P_UOM.
LS_MATERIALDATA-VAL_AREA = P_BWKEY.
APPEND LS_MATERIALDATA TO LT_MATERIALDATA.

LV_GROSS = LV_GROSS + P_AMOUNT + P_AMOUNT  * 17 / 100.
*&amp;amp;header
CLEAR: LS_HEADERDATA.
LS_HEADERDATA-INVOICE_IND  = &#39;&#39;.&amp;quot;贷项凭证
LS_HEADERDATA-GROSS_AMOUNT = LV_GROSS.
LS_HEADERDATA-BLINE_DATE   = SY-DATUM.
LS_HEADERDATA-DIFF_INV     = &#39;S0021&#39;.
LS_HEADERDATA-REF_DOC_NO   = &#39;4690000030&#39;.
LS_HEADERDATA-DOC_DATE     = SY-DATUM.
LS_HEADERDATA-PSTNG_DATE   = SY-DATUM.
LS_HEADERDATA-COMP_CODE    = &#39;9110&#39;..
LS_HEADERDATA-CURRENCY     = &#39;CNY&#39;.
LS_HEADERDATA-CURRENCY_ISO     = &#39;CNY&#39;.
LS_HEADERDATA-CALC_TAX_IND = &#39;X&#39;.
LS_HEADERDATA-PMNTTRMS     = &#39;0001&#39;.
LS_HEADERDATA-ITEM_TEXT    = &#39;text&#39;.
LS_HEADERDATA-GROSS_AMOUNT = LV_GROSS.

IF P_CA_TAX IS INITIAL.
  LS_HEADERDATA-CALC_TAX_IND = &#39; &#39;.
  CLEAR LS_TAXDATA.
  LS_TAXDATA-TAX_CODE = &#39;J1&#39;.
  LS_TAXDATA-TAX_AMOUNT = P_AMOUNT  * 17 / 100.&amp;quot; demo 默认17%，
  LS_TAXDATA-ITEMNO_TAX = 1.
  APPEND LS_TAXDATA TO LT_TAXDATA.
ENDIF.

CALL FUNCTION &#39;BAPI_INCOMINGINVOICE_CREATE&#39;
  EXPORTING
    HEADERDATA       = LS_HEADERDATA
  IMPORTING
    INVOICEDOCNUMBER = LV_INVOICEDOCNUMBER
  TABLES
    ITEMDATA         = LT_ITEMDATA
    MATERIALDATA     = LT_MATERIALDATA
    TAXDATA          = LT_TAXDATA
    RETURN           = LT_RETURN.

WRITE LV_INVOICEDOCNUMBER.

ROLLBACK WORK.  
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ABAP BTE增强使用</title>
      <link>https://coldinfire.github.io/2019/ABAP_BTE/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_BTE/</guid>
      <description>

&lt;h3 id=&#34;bte概念&#34;&gt;BTE概念&lt;/h3&gt;

&lt;p&gt;​   BTE(&lt;strong&gt;Business Transaction Events&lt;/strong&gt;)：BTE是SAP中可用的增强技术之一，通常使用在财务会计模块,&lt;/p&gt;

&lt;p&gt;可由 SAP，第三方供应商（合作伙伴）和客户使用。SAP程序通过调用&lt;code&gt;OPEN_FI_PERFORM_&amp;lt;Number&amp;gt;&lt;/code&gt;或&lt;code&gt;OUTBOUNT_CALL_&amp;lt;Number&amp;gt;&lt;/code&gt;函数来调用BTE.&lt;/p&gt;

&lt;p&gt;以下是两种可用于实现BTE的类型：P/S 为检查用的 BTE，Processes 是修改用的&lt;/p&gt;

&lt;p&gt;​   &lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE5.png&#34; alt=&#34;BTE Type&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​   这些接口通知外部软件某些事件已在 SAP 标准应用程序中发生，并向其提供产生的数据。外部软件不会向 SAP Standard System 返回任何数据。它们不会以任何方式影响标准 R / 3 程序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE6.png&#34; alt=&#34;BTE事件&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE7.png&#34; alt=&#34;BTE提供的FM Template&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE8.png&#34; alt=&#34;FM Tempate&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bte查找技巧&#34;&gt;BTE查找技巧&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;BTE 技巧：
  1）在 FM：`BF_FUNCTIONS_FIND`，设断点，然后查看 CALL FUNCTION &#39;BF_FUNCTIONS_READ&#39; 里面的变量，可以
  查看这个流程，会触发那些 event，以及那些 customerFM，这样就可以在相应的 EVENT 开发对应的 ZFM。
  2）查找对应合适的 BTE：运行事务码 XD02，查找到对应的程序为 SAPMF02D，在此程序中搜索字符串
  “OPEN_FI_PERFORM”，可以找到此程序中的所有用到的 BTE。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;配置bte&#34;&gt;配置BTE&lt;/h3&gt;

&lt;p&gt;Tcode：FIBF&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE1.png&#34; alt=&#34;BTE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE3.png&#34; alt=&#34;Add entries&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE2.png&#34; alt=&#34;创建P/S BTE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​   根据系统提供的事件模板，创建自定义的FM，并实现相应的业务逻辑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE4.png&#34; alt=&#34;选择对应的事件和处理的函数&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bte程序创建&#34;&gt;BTE程序创建&lt;/h3&gt;

&lt;p&gt;​   将光标放在已识别的 BTE 进程号上，单击示例功能模块，然后将其复制到 ZFM* 中并编写自己的功能。&lt;/p&gt;

&lt;p&gt;​   &lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE9.png&#34; alt=&#34;FM Tempate&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE10.png&#34; alt=&#34;FM Tempate Implement&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bte系统间传输&#34;&gt;BTE系统间传输&lt;/h3&gt;

&lt;p&gt;​   通过FIBF创建和配置完成的内容需要传输到其他系统，需要选中对应的Item，并执行下图步骤。可以将配置内容包含在TR中进行传输。&lt;/p&gt;

&lt;p&gt;​   &lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BTE11.png&#34; alt=&#34;Transfer&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bte-有用的tcode&#34;&gt;BTE 有用的Tcode&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TCode&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;TCode&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BERE&lt;/td&gt;
&lt;td&gt;Business Event Repository&lt;/td&gt;
&lt;td&gt;BF34&lt;/td&gt;
&lt;td&gt;Customer Modules per Event&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BERP&lt;/td&gt;
&lt;td&gt;Business Processes&lt;/td&gt;
&lt;td&gt;BF41&lt;/td&gt;
&lt;td&gt;Application Modules per Process&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BF31&lt;/td&gt;
&lt;td&gt;Application modules per Event&lt;/td&gt;
&lt;td&gt;BF42&lt;/td&gt;
&lt;td&gt;Partner Modules per Process&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;BF32&lt;/td&gt;
&lt;td&gt;Partner Modules per Event&lt;/td&gt;
&lt;td&gt;BF44&lt;/td&gt;
&lt;td&gt;Customer Modules per Process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title> CS12 ALV的增强 </title>
      <link>https://coldinfire.github.io/2019/BOM_Enhance/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/BOM_Enhance/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Tcode：CS12的执行程序查看&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BOM_Enhance1.png&#34; alt=&#34;CS12&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，最终执行的程序是RCS12001，因此可以在该程序中查找增强。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://coldinfire.github.io/images/ABAP/BOM_Enhance2.png&#34; alt=&#34;RCS12001&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;执行的程序：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;RCS11001 Display BOM Level by Level&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RCS12001 Display Multilevel BOM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;RCS13001 Summarized BOM - Multilevel&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;User Exits:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PCSD0001：Applications development R/3 BOMS&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0002： BOMs: Customer fields in item&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0003： BOMs: Customer fields in header&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0004： BOM comparison&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0005 BOMs: component check for material items&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0006： Mass changes user exit&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0007： Check changes in STKO&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0008： WBS BOM: Customer-specific explosion for creating&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0009： Order/WBS BOM, determine URL page&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0010： Order/WBS BOM, determine explosion date&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0011： Knowledge-based order BOM, parallel update&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0012： Customer - Mat. number/mat. number during material exchange&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0013： Customer-specific processing of an explosion for BOM browser&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCSD0014： Knowledge-Based Order BOM: Status&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SAP JCO连接</title>
      <link>https://coldinfire.github.io/2019/SAP_JCO/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/SAP_JCO/</guid>
      <description>

&lt;h4 id=&#34;sap-jco简介&#34;&gt;SAP JCO简介&lt;/h4&gt;

&lt;p&gt;​   为了在R/3系统和JAVA平台之间进行实时的交换数据。SAP提供了一套高效的基于RFC的ABAP和JAVA进程间通讯组件：SAP JAV Connector.&lt;/p&gt;

&lt;p&gt;​   Jco库提供了可以直接在JAVA程序中使用的API.该API通过JNI调用部署在客户端的SAP的RFC库。&lt;/p&gt;

&lt;h4 id=&#34;安装与配置&#34;&gt;安装与配置&lt;/h4&gt;

&lt;p&gt;​   下载Jco库的jar包。然后解压，将文件librfc32.dll的文件复制到目录system32下面。这个文件就是SAP的RFC协议实现。然后确保CLASSPATH环境下包含文件sapjco.jar所在的目录。该jar包中包含有在JAVA程序中需要直接调用的类和接口。&lt;/p&gt;

&lt;h4 id=&#34;建立连接&#34;&gt;建立连接&lt;/h4&gt;

&lt;p&gt;​   类JCO是Jco库中最主要的一个入口，提供了很多静态方法。其中有一系列重载的createClient方法可以用来创建于SAP系统的连接信息。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;直接输入参数&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;  import com.sap.mw.jco.*;
  JCO.Client myCont = JCO.createClient(&amp;quot;000&amp;quot;,        //SAP Client
                                       &amp;quot;UserName&amp;quot;,   //userid
                                       &amp;quot;PassWord&amp;quot;,   //password
                                       &amp;quot;EN&amp;quot;,         //Language
                                       &amp;quot;ClientIP&amp;quot;,   //application server host name
                                       &amp;quot;ClientID&amp;quot;)   //system number
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用JAVA 配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;  Properties properties = new Properties();
  properties.put(&amp;quot;jco.client.ashost&amp;quot;,&amp;quot;HostIP&amp;quot;);
  properties.put(&amp;quot;jco.client.client&amp;quot;,&amp;quot;client&amp;quot;);
  properties.put(&amp;quot;jco.client.user&amp;quot;,&amp;quot;user&amp;quot;);
  properties.put(&amp;quot;jco.client.passwd&amp;quot;,&amp;quot;passwd&amp;quot;);
  properties.put(&amp;quot;jco.client.sysnr&amp;quot;,&amp;quot;00&amp;quot;);
  properties.put(&amp;quot;jco.client.lange&amp;quot;,&amp;quot;EN&amp;quot;);
  
  JCO.Client myCont = JCO.createClient(properties);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​   建立从当前JAVA进程到SAP服务器的连接:  &lt;code&gt;this.myCont.connect();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;​   获取连接状态：&lt;code&gt;if( myCont != null &amp;amp;&amp;amp; myCont.isAlive())&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;连接池&#34;&gt;连接池&lt;/h5&gt;

&lt;p&gt;​   Jco库支持以连接池的形式重用已经创建的连接。需要调用JCO类的静态方法addClientPool即可创建一个连接池，并可以在参数中指定连接池的名字和允许同时激活的最大连接数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;public static final String POOL_NAME = &amp;quot;JCO_Pool&amp;quot;;
public static int max_cont = 3;

JCO.Pool pool = JCO.getClientPoolManager().getPool(POOL_NAME);
if(poo == null){
   Properties properties = new Properties();
    ... read properties file ...
   JCO.addClientPool(POOL_NAME,max_cont,properties);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;获取连接：&lt;code&gt;myCont = JCO.getClient(POOL_NAME);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;释放连接：&lt;code&gt;JCO.releaseClient(myCont);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;移除连接池：&lt;code&gt;JCO.removeClientPool(POOL_NAME);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;移除连接池会导致其中所有的活动连接被迫强行关闭，必须在确保连接池中所有的连接都不在被使用时才能执行该操作。&lt;/p&gt;

&lt;h4 id=&#34;调用function-models&#34;&gt;调用Function Models&lt;/h4&gt;

&lt;p&gt;​   Jco库使用RFC的方式来调用ABAP中的函数，所以被调用的函数必须已经勾选&amp;rdquo;Remote-enabled&amp;rdquo;属性。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步：创建JCO.Repository类的对象，获取所有ABAP函数的元数据。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCO.Repository myRepository = new JCO.Repository(&amp;quot;Repository&amp;quot;,myCont/POOL_NAME);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构造函数有两个参数，第一个是可以任意指定的名字；第二个是当前使用的连接。可以指定连接池名字，Jco库会自动从该连接池获取连接&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二步：通过该实例获取函数的信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;  String strFunc = &amp;quot;BAPI_Name&amp;quot;;
  IFunctionTemplate ft =  myRepository.getFunctionTemplate(strFunc.toUpperCase());
  JCO.Function function = ft.getFunction();
  
  //Get a client form the pool
  JCO.Clietn client = JCO.getClient(pool);
  
  //Set up scalar parameter
  JCO.ParameterList input = function.getImportParameterList();
  input.setValue(10,&amp;quot;MAX_ROWS&amp;quot;);
  
  //Set up structure parameter
  JCO.Structure sFrom = input.getStructure(&amp;quot;STRUC_NAME&amp;quot;);
  sFrom.seValue(&amp;quot;Value&amp;quot;,&amp;quot;FIELD_NAME&amp;quot;);
  input.setValue(sFrom,&amp;quot;STRUC_NAME&amp;quot;);
  
  //Set up table parameter
  JCO.Table table = function.getTableParameterList().getTable(&amp;quot;TABLE_NAME&amp;quot;);
  table.appendRow();
  table.setRow(0);
  talbe.setValue(&amp;quot;Value&amp;quot;,&amp;quot;FIELD_NAME&amp;quot;);
  ....
  table.appendRow();
  table.setRow(n);
  table.setValue(&amp;quot;Value&amp;quot;,&amp;quot;FIELD_NAME&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第三步：执行&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCO.Client client = JCO.getClient(POOL_NAME); client.execute(function);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;myCont.execute(funtion);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第四步：关闭连接&lt;code&gt;myCont.disconnect();&lt;/code&gt;或则&lt;code&gt;JCO.releaseClient(myCont)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第五步：获取输出参数&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;  // GET export structure
  JCO.Structure struct = function.getExportParameterList.getStructure(&amp;quot;RETURN&amp;quot;);
  
  //GET table parameter
  JCO.Table table = function.getTableParameterList().getTable(&amp;quot;TABLE_NAME&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;异常处理&#34;&gt;异常处理&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;JCO.AbapException：ABAP函数执行过程中出现异常，在JAVA进程中触发该异常。&lt;/li&gt;
&lt;li&gt;JCO.ConversionException：当执行参数的get,set方法时，如果在Java类型和ABAP类型间转换失败，会触发该异常。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;调试&#34;&gt;调试&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;激活Jco的ABAP调试功能：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  JCO.Pool pool = JCO.getClientPoolManage().getPool(POOL_NAME);
  pool.setAbapDebug(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在ABAP程序内设置外部断点。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;并设置Debugging里设置External Debugging的Users为设置的外部名。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;data-type&#34;&gt;DATA TYPE&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ABAP Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;JAVA Data Type&lt;/th&gt;
&lt;th&gt;JCo Type Code&lt;/th&gt;
&lt;th&gt;JCo Access Method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;1-byte integer&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;JCO.TYPE_INT1&lt;/td&gt;
&lt;td&gt;int getInt()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;2-byte integer&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;JCO.TYPE_INT2&lt;/td&gt;
&lt;td&gt;int getInt()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;4-byte integer&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;JCO.TYPE_INT&lt;/td&gt;
&lt;td&gt;int getInt()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Character&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;JCO.TYPE_CHAR&lt;/td&gt;
&lt;td&gt;String getString()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Numerical Character&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;JCO.TYPE_NUM&lt;/td&gt;
&lt;td&gt;String getString()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;Binary Coded Decimal&lt;/td&gt;
&lt;td&gt;BigDecimal&lt;/td&gt;
&lt;td&gt;JCO.TYPE_BCD&lt;/td&gt;
&lt;td&gt;BigDecimal getBigDecimal()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;JCO.TYPE_DATE&lt;/td&gt;
&lt;td&gt;Date getDate()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;JCO.TYPE_TIME&lt;/td&gt;
&lt;td&gt;Date getTime()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;JCO.TYPE_FLOAT&lt;/td&gt;
&lt;td&gt;double getDouble()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;Raw data&lt;/td&gt;
&lt;td&gt;bytes[]&lt;/td&gt;
&lt;td&gt;JCO.TYPE_BYTE&lt;/td&gt;
&lt;td&gt;byte[] getByteArray()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;String(variable-length)&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;JCO.TYPE_STRING&lt;/td&gt;
&lt;td&gt;String getString()&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;Raw data&lt;/td&gt;
&lt;td&gt;byte[]&lt;/td&gt;
&lt;td&gt;JCO.TYPE_XSTRING&lt;/td&gt;
&lt;td&gt;byte[] getByteArray()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;jco-table-method&#34;&gt;JCO Table method&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JCO.Table Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int getNumRows()&lt;/td&gt;
&lt;td&gt;Returns teh number of rows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void setRow(int pos)&lt;/td&gt;
&lt;td&gt;Sets the current row pointer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;int getRow()&lt;/td&gt;
&lt;td&gt;Returns the current row pointer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void firstRow()&lt;/td&gt;
&lt;td&gt;Moves to the first row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void firstRow()&lt;/td&gt;
&lt;td&gt;Moves to the last row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean nextRow()&lt;/td&gt;
&lt;td&gt;Moves to the next row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean previousRow(0)&lt;/td&gt;
&lt;td&gt;Moves to the previous row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void appendRow()&lt;/td&gt;
&lt;td&gt;Adds one row at the end of the table&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void appendRow(int num_rows)&lt;/td&gt;
&lt;td&gt;Adds multiple rows at the end of table&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void deleteAllRows()&lt;/td&gt;
&lt;td&gt;Deletes all table rows&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void deleteRow()&lt;/td&gt;
&lt;td&gt;Delete the current row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void deleteRow(int pos)&lt;/td&gt;
&lt;td&gt;Deletes the specified row&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;void insertRow(int pos)&lt;/td&gt;
&lt;td&gt;Inserts a row at the specified position&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>ABAP 科学计数法问题</title>
      <link>https://coldinfire.github.io/2019/ABAP_NumberQAS/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_NumberQAS/</guid>
      <description>

&lt;h4 id=&#34;科学计数法转换数字&#34;&gt;科学计数法转换数字&lt;/h4&gt;

&lt;p&gt;​   ABAP 函数 &lt;code&gt;QSS0_FLTP_TO_CHAR_CONVERSION&lt;/code&gt;，能将 SAP 系统内的科学计数法显示的数字转换成一般数字。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;DATA: l_result TYPE qsollwerte,
       l_value TYPE char16.
       
CALL FUNCTION &#39;QSS0_FLTP_TO_CHAR_CONVERSION&#39;
  EXPORTING
    i_number_of_digits  = 2
    i_fltp_value        = l_result
  IMPORTING
    e_char_field        = l_value
           .
  CONDENSE l_value.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;数字千分位的转换处理&#34;&gt;数字千分位的转换处理&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;DATA: p_value type p,
       l_value TYPE char16.

CALL FUNCTION &#39;HRCM_STRING_TO_AMOUNT_CONVERT&#39;
  EXPORTING
    string            = l_value
    decimal_separator  = &#39;.&#39;
  IMPORTING
    betrg                     = p_value
  EXCEPTIONS
    convert_error             = 1
    OTHERS                    = 2
           .
IF sy-subrc = 1.
   CALL FUNCTION &#39;HRCM_STRING_TO_AMOUNT_CONVERT&#39;
     EXPORTING
       string            = l_value
       decimal_separator = &#39;,&#39;
     IMPORTING
       betrg             = p_value
     EXCEPTIONS
       convert_error     = 1
       OTHERS            = 2.
ENDIF.


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既要有千分位又要把符号提前的情况:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;*&amp;amp;---------------------------------------------------------------------*
*&amp;amp;      Form  NUMTOSTR
*&amp;amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&amp;gt;VALUE      text
*      --&amp;gt;(ZNUM)     text
*      --&amp;gt;VALUE      text
*      --&amp;gt;(ZSTR)     text
*----------------------------------------------------------------------*
FORM  numtostr CHANGING  p_is_result_amount
                         ``p_is_result_amount_h
                         ``p_is_result_total
                         ``p_is_result_total_h.
  ``DATA : zclen TYPE i,
  ``n TYPE i,
  ``zcstr(30) TYPE c,
  ``zcstr2(30) TYPE c,
  ``zctemp(3) TYPE c,
  ``zflag(1) TYPE c VALUE ``&#39;.&#39;``,
  ``zflag2 TYPE i VALUE 0,
  ``zcdec(30) TYPE c, &amp;quot;记录小数部分.
  ``znum(30),
  ``znum_h(30),
  ``ztotal(30),
  ``ztotal_h(30).
  ``&amp;quot;zstr = ``&#39;&#39;``.
  ``znum = is_result-amount.
  ``znum_h = is_result-amount_h.
  ``ztotal = is_result-total.
  ``ztotal_h = is_result-total_h.
  ``CLEAR: is_result-amount,is_result-amount_h,is_result-total,is_result-total_h.
*---------------------------------------------------------------------------------------------*1
  ``IF znum &amp;lt;&amp;gt; 0.
    ``IF znum &amp;lt;= -1000.
      ``zflag2 = 1.
      ``znum = znum * ( -1 ).
    ``ENDIF.
    ``IF znum &amp;gt;= 1000.
      ``zcstr = znum.
* 压缩字符串，去除前面的空格。
      ``CONDENSE zcstr NO-GAPS.
* 分离整数与小数，好单独处理整数。
      ``SPLIT zcstr AT zflag INTO zcstr zcdec.
      ``zclen = ``strlen``( zcstr ).
* 在循环中从右面在每三位的前面加上一个逗号。
      ``WHILE zclen &amp;gt; 3.
        ``n = zclen - 3.
        ``zctemp = zcstr+n(3).
        ``IF NOT zcstr2 IS INITIAL.
          ``CONCATENATE zctemp zcstr2 INTO zcstr2 SEPARATED BY ``&#39;,&#39;``.
        ``ELSE.
          ``zcstr2 = zctemp.
        ``ENDIF.
        ``zclen = zclen - 3.
      ``ENDWHILE.
* 将不剩下的不足三位数加到前面
      ``CONCATENATE zcstr+0(zclen) zcstr2 INTO zcstr2 SEPARATED BY ``&#39;,&#39;``.
      ``IF zflag2 = 1.
        ``CONCATENATE ``&#39;-&#39;` `zcstr2 INTO zcstr2.
      ``ENDIF.
      ``CLEAR zcstr.
* 将处理过的整数与小数连接起来。
      ``IF ``strlen``( zcdec ) &amp;gt; 1.
        ``CONCATENATE zcstr2 zcdec INTO zcstr SEPARATED BY zflag.
      ``ELSE.
        ``CONCATENATE zcdec ``&#39;00&#39;` `INTO zcdec.
        ``CONCATENATE zcstr2 zcdec  INTO zcstr SEPARATED BY zflag.
      ``ENDIF.
* 将值返回
      ``is_result-amount = zcstr.
    ``ELSE.
      ``is_result-amount = znum.
    ``ENDIF.
  ``ENDIF.
  ``CLEAR: zflag2,zcstr,zcdec,zclen,zctemp,zcstr2,n.
ENDFORM
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;计算数学表达式的方法&#34;&gt;计算数学表达式的方法&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;FORM cacule_value  USING    p_wf_formula TYPE string
                            p_source  TYPE string
                            p_js_processor TYPE REF TO cl_java_script
                   CHANGING p_value .
  DATA:molecule TYPE string,
     denominator TYPE string,
     denominator_source TYPE string,
     denominator_value  TYPE rr_szntr,
     l_result TYPE qsollwerte,
     l_value TYPE char16.

  IF p_wf_formula CS &#39;/&#39;.
    CLEAR:molecule,denominator.
    SPLIT p_wf_formula AT &#39;/&#39; INTO molecule denominator.
    CONCATENATE
    &#39;var string = &#39; denominator &#39;;&#39;
    &#39;function Set_String()                          &#39;
    &#39;  { string = eval(string);                     &#39;
    &#39;  }                                            &#39;
    &#39;Set_String();                                  &#39;
    &#39;string;                                        &#39;
      INTO denominator_source SEPARATED BY cl_abap_char_utilities=&amp;gt;cr_lf.
    denominator_value = js_processor-&amp;gt;evaluate( denominator_source ).
    IF denominator_value = 0.
      p_value = 0.
    ELSE.
      CONCATENATE
      &#39;var string = &#39; p_wf_formula &#39;;&#39;
      &#39;function Set_String()                          &#39;
      &#39;  { string = eval(string);                     &#39;
      &#39;  }                                            &#39;
      &#39;Set_String();                                  &#39;
      &#39;string;                                        &#39;
        INTO p_source SEPARATED BY cl_abap_char_utilities=&amp;gt;cr_lf.
      l_result = js_processor-&amp;gt;evaluate( p_source ).
*      p_value = js_processor-&amp;gt;evaluate( p_source ).

      CALL FUNCTION &#39;QSS0_FLTP_TO_CHAR_CONVERSION&#39;
        EXPORTING
          i_number_of_digits             = 2
          i_fltp_value                   = l_result
*         I_VALUE_NOT_INITIAL_FLAG       = &#39;X&#39;
*         I_SCREEN_FIELDLENGTH           = 16
       IMPORTING
         e_char_field                   = l_value
                .
      CONDENSE l_value.

      CALL FUNCTION &#39;HRCM_STRING_TO_AMOUNT_CONVERT&#39;
        EXPORTING
          string                    = l_value
         decimal_separator         = &#39;.&#39;
*         THOUSANDS_SEPARATOR       =
*         WAERS                     = &#39; &#39;
       IMPORTING
         betrg                     = p_value
       EXCEPTIONS
         convert_error             = 1
         OTHERS                    = 2
                .
      IF sy-subrc = 1.
        CALL FUNCTION &#39;HRCM_STRING_TO_AMOUNT_CONVERT&#39;
          EXPORTING
            string            = l_value
            decimal_separator = &#39;,&#39;
          IMPORTING
            betrg             = p_value
          EXCEPTIONS
            convert_error     = 1
            OTHERS            = 2.
      ENDIF.

    ENDIF.
  ELSE.
    CONCATENATE
      &#39;var string = &#39; p_wf_formula &#39;;&#39;
      &#39;function Set_String()                          &#39;
      &#39;  { string = eval(string);                     &#39;
      &#39;  }                                            &#39;
      &#39;Set_String();                                  &#39;
      &#39;string;                                        &#39;
        INTO p_source SEPARATED BY cl_abap_char_utilities=&amp;gt;cr_lf.
    p_value = js_processor-&amp;gt;evaluate( p_source ).
  ENDIF.
ENDFORM.                    &amp;quot; CACULE_VALUE
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SO10创建标准文本</title>
      <link>https://coldinfire.github.io/2019/ABAP_SO10/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://coldinfire.github.io/2019/ABAP_SO10/</guid>
      <description>&lt;p&gt;通过 Tcode SO10 可以创建标准文本：&lt;/p&gt;

&lt;p&gt;​   &lt;img src=&#34;https://coldinfire.github.io/images/ABAP/SO10.png&#34; alt=&#34;SO10&#34; /&gt;&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;通过占位符替换长文本：&lt;/p&gt;

&lt;p&gt;​   &lt;img src=&#34;https://coldinfire.github.io/images/ABAP/SO10_1.png&#34; alt=&#34;SO10 Symbol&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DATA lv_name TYPE thead-tdname.
DATA lv_langu LIKE sy-langu VALUE &#39;EN&#39;.
DATA lt_line TYPE STANDARD TABLE OF tline WITH HEADER LINE.
DATA lv_count TYPE i.
lv_name = &#39;Z_TEST&#39;.
&amp;quot;read text from SO10
  CALL FUNCTION &#39;READ_TEXT&#39;
  EXPORTING
    client                  = sy-mandt
    id                      = &#39;ST&#39;
    language                = lv_langu
    name                    = lv_name
    object                  = &#39;TEXT&#39;
  TABLES
    lines                   = lt_line
  EXCEPTIONS
    id                      = 1
    language                = 2
    name                    = 3
    not_found               = 4
    object                  = 5
    reference_check         = 6
    wrong_access_to_archive = 7
    OTHERS                  = 8.
  IF sy-subrc EQ 0 .
&amp;quot;initialize the text symbols
  CALL FUNCTION &#39;INIT_TEXTSYMBOL&#39;.
&amp;quot;set dynamic text symbol
  CALL FUNCTION &#39;SET_TEXTSYMBOL&#39;
    EXPORTING
      name    = &#39;&amp;amp;l_aa&amp;amp;&#39;
      value   = &#39;输入需要替换的内容&#39;
      replace = &#39;X&#39;.
  DESCRIBE TABLE lt_line LINES lv_count.
&amp;quot;replace all text symbol in your long text
  CALL FUNCTION &#39;REPLACE_TEXTSYMBOL&#39;
    EXPORTING
      endline   = lv_count
      startline = 1
    TABLES
      lines     = lt_line.
ENDIF.
LOOP AT lt_line.
  WRITE:/ lt_line-tdline.
ENDLOOP.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
